// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cli2ser.proto
#ifndef GRPC_cli2ser_2eproto__INCLUDED
#define GRPC_cli2ser_2eproto__INCLUDED

#include "cli2ser.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Cli2Master final {
 public:
  static constexpr char const* service_full_name() {
    return "Cli2Master";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // FindAddr(): client send the file_path, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::FindAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    // GetWriteAddr(): for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::GetWriteAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    // Stat(): client send the file_path, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ClientContext* context, const ::StatRequest& request, ::StatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    virtual ::grpc::Status Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::MkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::GetSubDirPathsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>> AsyncGetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>>(AsyncGetSubDirPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>> PrepareAsyncGetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>>(PrepareAsyncGetSubDirPathsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // FindAddr(): client send the file_path, get the chunk_handles and the addr. 
      virtual void FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetWriteAddr(): for client's API-Put() usage
      // master tells the client which chunkservers to write to 
      virtual void GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stat(): client send the file_path, get the file existence, path and size information
      virtual void Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for client's API-List() usage.
      virtual void GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>* AsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetSubDirPathsReply>* PrepareAsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::FindAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::GetWriteAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    ::grpc::Status Stat(::grpc::ClientContext* context, const ::StatRequest& request, ::StatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    ::grpc::Status Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::MkdirReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    ::grpc::Status GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::GetSubDirPathsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>> AsyncGetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>>(AsyncGetSubDirPathsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>> PrepareAsyncGetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>>(PrepareAsyncGetSubDirPathsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, std::function<void(::grpc::Status)>) override;
      void FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, std::function<void(::grpc::Status)>) override;
      void GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, std::function<void(::grpc::Status)>) override;
      void Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, std::function<void(::grpc::Status)>) override;
      void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, std::function<void(::grpc::Status)>) override;
      void Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, std::function<void(::grpc::Status)>) override;
      void GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>* AsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>* PrepareAsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWriteAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_Stat_;
    const ::grpc::internal::RpcMethod rpcmethod_Rename_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubDirPaths_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // FindAddr(): client send the file_path, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response);
    // GetWriteAddr(): for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response);
    // Stat(): client send the file_path, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ServerContext* context, const ::StatRequest* request, ::StatReply* response);
    virtual ::grpc::Status Rename(::grpc::ServerContext* context, const ::RenameRequest* request, ::RenameReply* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::DeleteRequest* request, ::DeleteReply* response);
    virtual ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::MkdirRequest* request, ::MkdirReply* response);
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirPaths(::grpc::ServerContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAddr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAddr(::grpc::ServerContext* context, ::FindAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::FindAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteAddr(::grpc::ServerContext* context, ::GetWriteAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetWriteAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::StatRequest* request, ::grpc::ServerAsyncResponseWriter< ::StatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rename() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::RenameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mkdir() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::MkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubDirPaths(::grpc::ServerContext* context, ::GetSubDirPathsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetSubDirPathsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAddr<WithAsyncMethod_GetWriteAddr<WithAsyncMethod_Stat<WithAsyncMethod_Rename<WithAsyncMethod_Delete<WithAsyncMethod_Mkdir<WithAsyncMethod_GetSubDirPaths<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAddr() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::FindAddrRequest, ::FindAddrReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response) { return this->FindAddr(context, request, response); }));}
    void SetMessageAllocatorFor_FindAddr(
        ::grpc::MessageAllocator< ::FindAddrRequest, ::FindAddrReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FindAddrRequest, ::FindAddrReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetWriteAddrRequest, ::GetWriteAddrReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response) { return this->GetWriteAddr(context, request, response); }));}
    void SetMessageAllocatorFor_GetWriteAddr(
        ::grpc::MessageAllocator< ::GetWriteAddrRequest, ::GetWriteAddrReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetWriteAddrRequest, ::GetWriteAddrReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWriteAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::StatRequest, ::StatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::StatRequest* request, ::StatReply* response) { return this->Stat(context, request, response); }));}
    void SetMessageAllocatorFor_Stat(
        ::grpc::MessageAllocator< ::StatRequest, ::StatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::StatRequest, ::StatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::RenameRequest, ::RenameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RenameRequest* request, ::RenameReply* response) { return this->Rename(context, request, response); }));}
    void SetMessageAllocatorFor_Rename(
        ::grpc::MessageAllocator< ::RenameRequest, ::RenameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RenameRequest, ::RenameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::DeleteRequest, ::DeleteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DeleteRequest* request, ::DeleteReply* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::DeleteRequest, ::DeleteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DeleteRequest, ::DeleteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Mkdir() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MkdirRequest, ::MkdirReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MkdirRequest* request, ::MkdirReply* response) { return this->Mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_Mkdir(
        ::grpc::MessageAllocator< ::MkdirRequest, ::MkdirReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MkdirRequest, ::MkdirReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::GetSubDirPathsRequest, ::GetSubDirPathsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response) { return this->GetSubDirPaths(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubDirPaths(
        ::grpc::MessageAllocator< ::GetSubDirPathsRequest, ::GetSubDirPathsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetSubDirPathsRequest, ::GetSubDirPathsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubDirPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_FindAddr<WithCallbackMethod_GetWriteAddr<WithCallbackMethod_Stat<WithCallbackMethod_Rename<WithCallbackMethod_Delete<WithCallbackMethod_Mkdir<WithCallbackMethod_GetSubDirPaths<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAddr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rename() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mkdir() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAddr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rename() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mkdir() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubDirPaths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAddr() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWriteAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWriteAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rename(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Mkdir() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubDirPaths(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubDirPaths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAddr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FindAddrRequest, ::FindAddrReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FindAddrRequest, ::FindAddrReply>* streamer) {
                       return this->StreamedFindAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::FindAddrRequest* /*request*/, ::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FindAddrRequest,::FindAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetWriteAddrRequest, ::GetWriteAddrReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetWriteAddrRequest, ::GetWriteAddrReply>* streamer) {
                       return this->StreamedGetWriteAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::GetWriteAddrRequest* /*request*/, ::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWriteAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetWriteAddrRequest,::GetWriteAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::StatRequest, ::StatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::StatRequest, ::StatReply>* streamer) {
                       return this->StreamedStat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::StatRequest* /*request*/, ::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StatRequest,::StatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rename() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RenameRequest, ::RenameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RenameRequest, ::RenameReply>* streamer) {
                       return this->StreamedRename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RenameRequest,::RenameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DeleteRequest, ::DeleteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DeleteRequest, ::DeleteReply>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteRequest,::DeleteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mkdir() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MkdirRequest, ::MkdirReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MkdirRequest, ::MkdirReply>* streamer) {
                       return this->StreamedMkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::MkdirRequest* /*request*/, ::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MkdirRequest,::MkdirReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubDirPaths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubDirPaths() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetSubDirPathsRequest, ::GetSubDirPathsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetSubDirPathsRequest, ::GetSubDirPathsReply>* streamer) {
                       return this->StreamedGetSubDirPaths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubDirPaths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubDirPaths(::grpc::ServerContext* /*context*/, const ::GetSubDirPathsRequest* /*request*/, ::GetSubDirPathsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubDirPaths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetSubDirPathsRequest,::GetSubDirPathsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirPaths<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirPaths<Service > > > > > > > StreamedService;
};
// client -> master rpcs
// -------------------

class Cli2ChunkServer final {
 public:
  static constexpr char const* service_full_name() {
    return "Cli2ChunkServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::ReadChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::WriteChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ReadChunk(): client send the read request, get the file data.
      virtual void ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::ReadChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::WriteChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, std::function<void(::grpc::Status)>) override;
      void ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, std::function<void(::grpc::Status)>) override;
      void WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response);
    virtual ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadChunk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadChunk(::grpc::ServerContext* context, ::ReadChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::ReadChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteChunk(::grpc::ServerContext* context, ::WriteChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::WriteChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadChunk<WithAsyncMethod_WriteChunk<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadChunk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ReadChunkRequest, ::ReadChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response) { return this->ReadChunk(context, request, response); }));}
    void SetMessageAllocatorFor_ReadChunk(
        ::grpc::MessageAllocator< ::ReadChunkRequest, ::ReadChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ReadChunkRequest, ::ReadChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::WriteChunkRequest, ::WriteChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response) { return this->WriteChunk(context, request, response); }));}
    void SetMessageAllocatorFor_WriteChunk(
        ::grpc::MessageAllocator< ::WriteChunkRequest, ::WriteChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::WriteChunkRequest, ::WriteChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadChunk<WithCallbackMethod_WriteChunk<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadChunk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadChunk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadChunk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadChunk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ReadChunkRequest, ::ReadChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ReadChunkRequest, ::ReadChunkReply>* streamer) {
                       return this->StreamedReadChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::ReadChunkRequest* /*request*/, ::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ReadChunkRequest,::ReadChunkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::WriteChunkRequest, ::WriteChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::WriteChunkRequest, ::WriteChunkReply>* streamer) {
                       return this->StreamedWriteChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::WriteChunkRequest* /*request*/, ::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::WriteChunkRequest,::WriteChunkReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<Service > > StreamedService;
};
// client -> chunk_server rpcs
// --------------------------


#endif  // GRPC_cli2ser_2eproto__INCLUDED
