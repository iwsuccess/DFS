// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: namenode_datanode_service.proto

#include "namenode_datanode_service.pb.h"
#include "namenode_datanode_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Rpc {

static const char* DataNodeControlerService_method_names[] = {
  "/Rpc.DataNodeControlerService/CheckHeartbeat",
  "/Rpc.DataNodeControlerService/CopyChunk",
};

std::unique_ptr< DataNodeControlerService::Stub> DataNodeControlerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataNodeControlerService::Stub> stub(new DataNodeControlerService::Stub(channel, options));
  return stub;
}

DataNodeControlerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckHeartbeat_(DataNodeControlerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CopyChunk_(DataNodeControlerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataNodeControlerService::Stub::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHeartbeat_, context, request, response);
}

void DataNodeControlerService::Stub::async::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHeartbeat_, context, request, response, std::move(f));
}

void DataNodeControlerService::Stub::async::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHeartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* DataNodeControlerService::Stub::PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::HeartbeatReply, ::Rpc::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHeartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* DataNodeControlerService::Stub::AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataNodeControlerService::Stub::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CopyChunk_, context, request, response);
}

void DataNodeControlerService::Stub::async::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunk_, context, request, response, std::move(f));
}

void DataNodeControlerService::Stub::async::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* DataNodeControlerService::Stub::PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::CopyChunkReply, ::Rpc::CopyChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CopyChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* DataNodeControlerService::Stub::AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataNodeControlerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeControlerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeControlerService::Service, ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeControlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::HeartbeatRequest* req,
             ::Rpc::HeartbeatReply* resp) {
               return service->CheckHeartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeControlerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeControlerService::Service, ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeControlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::CopyChunkRequest* req,
             ::Rpc::CopyChunkReply* resp) {
               return service->CopyChunk(ctx, req, resp);
             }, this)));
}

DataNodeControlerService::Service::~Service() {
}

::grpc::Status DataNodeControlerService::Service::CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeControlerService::Service::CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReportDataNodeSerivce_method_names[] = {
  "/Rpc.ReportDataNodeSerivce/ReportDataNode",
};

std::unique_ptr< ReportDataNodeSerivce::Stub> ReportDataNodeSerivce::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReportDataNodeSerivce::Stub> stub(new ReportDataNodeSerivce::Stub(channel, options));
  return stub;
}

ReportDataNodeSerivce::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReportDataNode_(ReportDataNodeSerivce_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReportDataNodeSerivce::Stub::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportDataNode_, context, request, response);
}

void ReportDataNodeSerivce::Stub::async::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDataNode_, context, request, response, std::move(f));
}

void ReportDataNodeSerivce::Stub::async::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDataNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* ReportDataNodeSerivce::Stub::PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::ReportDataNodeReply, ::Rpc::ReportDataNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportDataNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* ReportDataNodeSerivce::Stub::AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportDataNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReportDataNodeSerivce::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReportDataNodeSerivce_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReportDataNodeSerivce::Service, ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReportDataNodeSerivce::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::ReportDataNodeRequest* req,
             ::Rpc::ReportDataNodeReply* resp) {
               return service->ReportDataNode(ctx, req, resp);
             }, this)));
}

ReportDataNodeSerivce::Service::~Service() {
}

::grpc::Status ReportDataNodeSerivce::Service::ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Rpc

