// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cli2ser.proto

#include "cli2ser.pb.h"
#include "cli2ser.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Cli2Master_method_names[] = {
  "/Cli2Master/FindAddr",
  "/Cli2Master/GetWriteAddr",
  "/Cli2Master/Stat",
  "/Cli2Master/Rename",
  "/Cli2Master/Delete",
  "/Cli2Master/Mkdir",
  "/Cli2Master/GetSubDirPaths",
};

std::unique_ptr< Cli2Master::Stub> Cli2Master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cli2Master::Stub> stub(new Cli2Master::Stub(channel, options));
  return stub;
}

Cli2Master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FindAddr_(Cli2Master_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWriteAddr_(Cli2Master_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stat_(Cli2Master_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(Cli2Master_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Cli2Master_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mkdir_(Cli2Master_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubDirPaths_(Cli2Master_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cli2Master::Stub::FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::FindAddrReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FindAddrRequest, ::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindAddr_, context, request, response);
}

void Cli2Master::Stub::async::FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FindAddrRequest, ::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAddr_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::FindAddr(::grpc::ClientContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FindAddrReply>* Cli2Master::Stub::PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FindAddrReply, ::FindAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FindAddrReply>* Cli2Master::Stub::AsyncFindAddrRaw(::grpc::ClientContext* context, const ::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::GetWriteAddrReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetWriteAddrRequest, ::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWriteAddr_, context, request, response);
}

void Cli2Master::Stub::async::GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetWriteAddrRequest, ::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteAddr_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::GetWriteAddr(::grpc::ClientContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>* Cli2Master::Stub::PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetWriteAddrReply, ::GetWriteAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWriteAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetWriteAddrReply>* Cli2Master::Stub::AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWriteAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Stat(::grpc::ClientContext* context, const ::StatRequest& request, ::StatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StatRequest, ::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stat_, context, request, response);
}

void Cli2Master::Stub::async::Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StatRequest, ::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Stat(::grpc::ClientContext* context, const ::StatRequest* request, ::StatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StatReply>* Cli2Master::Stub::PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StatReply, ::StatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StatReply>* Cli2Master::Stub::AsyncStatRaw(::grpc::ClientContext* context, const ::StatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RenameRequest, ::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void Cli2Master::Stub::async::Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RenameRequest, ::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RenameReply>* Cli2Master::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RenameReply, ::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RenameReply>* Cli2Master::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DeleteRequest, ::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Cli2Master::Stub::async::Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DeleteRequest, ::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteReply>* Cli2Master::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DeleteReply, ::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DeleteReply>* Cli2Master::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Mkdir(::grpc::ClientContext* context, const ::MkdirRequest& request, ::MkdirReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MkdirRequest, ::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mkdir_, context, request, response);
}

void Cli2Master::Stub::async::Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MkdirRequest, ::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Mkdir(::grpc::ClientContext* context, const ::MkdirRequest* request, ::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MkdirReply>* Cli2Master::Stub::PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MkdirReply, ::MkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MkdirReply>* Cli2Master::Stub::AsyncMkdirRaw(::grpc::ClientContext* context, const ::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::GetSubDirPathsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetSubDirPathsRequest, ::GetSubDirPathsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubDirPaths_, context, request, response);
}

void Cli2Master::Stub::async::GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetSubDirPathsRequest, ::GetSubDirPathsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubDirPaths_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::GetSubDirPaths(::grpc::ClientContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubDirPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>* Cli2Master::Stub::PrepareAsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetSubDirPathsReply, ::GetSubDirPathsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubDirPaths_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetSubDirPathsReply>* Cli2Master::Stub::AsyncGetSubDirPathsRaw(::grpc::ClientContext* context, const ::GetSubDirPathsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubDirPathsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cli2Master::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::FindAddrRequest, ::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FindAddrRequest* req,
             ::FindAddrReply* resp) {
               return service->FindAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::GetWriteAddrRequest, ::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetWriteAddrRequest* req,
             ::GetWriteAddrReply* resp) {
               return service->GetWriteAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::StatRequest, ::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StatRequest* req,
             ::StatReply* resp) {
               return service->Stat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::RenameRequest, ::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RenameRequest* req,
             ::RenameReply* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::DeleteRequest, ::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DeleteRequest* req,
             ::DeleteReply* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::MkdirRequest, ::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MkdirRequest* req,
             ::MkdirReply* resp) {
               return service->Mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::GetSubDirPathsRequest, ::GetSubDirPathsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetSubDirPathsRequest* req,
             ::GetSubDirPathsReply* resp) {
               return service->GetSubDirPaths(ctx, req, resp);
             }, this)));
}

Cli2Master::Service::~Service() {
}

::grpc::Status Cli2Master::Service::FindAddr(::grpc::ServerContext* context, const ::FindAddrRequest* request, ::FindAddrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::GetWriteAddr(::grpc::ServerContext* context, const ::GetWriteAddrRequest* request, ::GetWriteAddrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Stat(::grpc::ServerContext* context, const ::StatRequest* request, ::StatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Rename(::grpc::ServerContext* context, const ::RenameRequest* request, ::RenameReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Delete(::grpc::ServerContext* context, const ::DeleteRequest* request, ::DeleteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Mkdir(::grpc::ServerContext* context, const ::MkdirRequest* request, ::MkdirReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::GetSubDirPaths(::grpc::ServerContext* context, const ::GetSubDirPathsRequest* request, ::GetSubDirPathsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Cli2ChunkServer_method_names[] = {
  "/Cli2ChunkServer/ReadChunk",
  "/Cli2ChunkServer/WriteChunk",
};

std::unique_ptr< Cli2ChunkServer::Stub> Cli2ChunkServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cli2ChunkServer::Stub> stub(new Cli2ChunkServer::Stub(channel, options));
  return stub;
}

Cli2ChunkServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadChunk_(Cli2ChunkServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteChunk_(Cli2ChunkServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cli2ChunkServer::Stub::ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::ReadChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ReadChunkRequest, ::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadChunk_, context, request, response);
}

void Cli2ChunkServer::Stub::async::ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ReadChunkRequest, ::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadChunk_, context, request, response, std::move(f));
}

void Cli2ChunkServer::Stub::async::ReadChunk(::grpc::ClientContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ReadChunkReply>* Cli2ChunkServer::Stub::PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ReadChunkReply, ::ReadChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ReadChunkReply>* Cli2ChunkServer::Stub::AsyncReadChunkRaw(::grpc::ClientContext* context, const ::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2ChunkServer::Stub::WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::WriteChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::WriteChunkRequest, ::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteChunk_, context, request, response);
}

void Cli2ChunkServer::Stub::async::WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::WriteChunkRequest, ::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteChunk_, context, request, response, std::move(f));
}

void Cli2ChunkServer::Stub::async::WriteChunk(::grpc::ClientContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WriteChunkReply>* Cli2ChunkServer::Stub::PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::WriteChunkReply, ::WriteChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::WriteChunkReply>* Cli2ChunkServer::Stub::AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cli2ChunkServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2ChunkServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2ChunkServer::Service, ::ReadChunkRequest, ::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2ChunkServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ReadChunkRequest* req,
             ::ReadChunkReply* resp) {
               return service->ReadChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2ChunkServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2ChunkServer::Service, ::WriteChunkRequest, ::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2ChunkServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WriteChunkRequest* req,
             ::WriteChunkReply* resp) {
               return service->WriteChunk(ctx, req, resp);
             }, this)));
}

Cli2ChunkServer::Service::~Service() {
}

::grpc::Status Cli2ChunkServer::Service::ReadChunk(::grpc::ServerContext* context, const ::ReadChunkRequest* request, ::ReadChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2ChunkServer::Service::WriteChunk(::grpc::ServerContext* context, const ::WriteChunkRequest* request, ::WriteChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


