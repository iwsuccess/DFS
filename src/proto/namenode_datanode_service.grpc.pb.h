// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: namenode_datanode_service.proto
#ifndef GRPC_namenode_5fdatanode_5fservice_2eproto__INCLUDED
#define GRPC_namenode_5fdatanode_5fservice_2eproto__INCLUDED

#include "namenode_datanode_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Rpc {

class DataNodeControlerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.DataNodeControlerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // to check if the datanode is alive
      virtual void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send request to tell a datanode to copy chunk to another chunk
      virtual void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)>) override;
      void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)>) override;
      void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_CopyChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response);
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHeartbeat(::grpc::ServerContext* context, ::Rpc::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::HeartbeatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CopyChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunk(::grpc::ServerContext* context, ::Rpc::CopyChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::CopyChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckHeartbeat<WithAsyncMethod_CopyChunk<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) { return this->CheckHeartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHeartbeat(
        ::grpc::MessageAllocator< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CopyChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) { return this->CopyChunk(context, request, response); }));}
    void SetMessageAllocatorFor_CopyChunk(
        ::grpc::MessageAllocator< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CheckHeartbeat<WithCallbackMethod_CopyChunk<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CopyChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CopyChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHeartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CopyChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CopyChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>* streamer) {
                       return this->StreamedCheckHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::HeartbeatRequest,::Rpc::HeartbeatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CopyChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>* streamer) {
                       return this->StreamedCopyChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopyChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::CopyChunkRequest,::Rpc::CopyChunkReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedService;
};

class ReportDataNodeSerivce final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.ReportDataNodeSerivce";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // each datanode reriodically reports the chunks it has
      // namenode replies with the identity of all chunk 
      virtual void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReportDataNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDataNode(::grpc::ServerContext* context, ::Rpc::ReportDataNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::ReportDataNodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportDataNode<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) { return this->ReportDataNode(context, request, response); }));}
    void SetMessageAllocatorFor_ReportDataNode(
        ::grpc::MessageAllocator< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDataNode(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReportDataNode<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDataNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportDataNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDataNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>* streamer) {
                       return this->StreamedReportDataNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportDataNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::ReportDataNodeRequest,::Rpc::ReportDataNodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedService;
};

}  // namespace Rpc


#endif  // GRPC_namenode_5fdatanode_5fservice_2eproto__INCLUDED
