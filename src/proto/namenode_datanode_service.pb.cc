// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namenode_datanode_service.proto

#include "namenode_datanode_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Rpc {
constexpr DataNodeLocation::DataNodeLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DataNodeLocationDefaultTypeInternal {
  constexpr DataNodeLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataNodeLocationDefaultTypeInternal() {}
  union {
    DataNodeLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataNodeLocationDefaultTypeInternal _DataNodeLocation_default_instance_;
constexpr DataNode::DataNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stored_chunk_handles_()
  , _stored_chunk_handles_cached_byte_size_(0)
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , available_size_(0u){}
struct DataNodeDefaultTypeInternal {
  constexpr DataNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataNodeDefaultTypeInternal() {}
  union {
    DataNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataNodeDefaultTypeInternal _DataNode_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_()
  , chunk_handle_(int64_t{0})
  , size_(int64_t{0}){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr ReportDataNodeRequest::ReportDataNodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datanode_(nullptr){}
struct ReportDataNodeRequestDefaultTypeInternal {
  constexpr ReportDataNodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDataNodeRequestDefaultTypeInternal() {}
  union {
    ReportDataNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDataNodeRequestDefaultTypeInternal _ReportDataNodeRequest_default_instance_;
constexpr ReportDataNodeReply::ReportDataNodeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReportDataNodeReplyDefaultTypeInternal {
  constexpr ReportDataNodeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportDataNodeReplyDefaultTypeInternal() {}
  union {
    ReportDataNodeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportDataNodeReplyDefaultTypeInternal _ReportDataNodeReply_default_instance_;
constexpr HeartbeatRequest::HeartbeatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HeartbeatRequestDefaultTypeInternal {
  constexpr HeartbeatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
constexpr HeartbeatReply::HeartbeatReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(nullptr){}
struct HeartbeatReplyDefaultTypeInternal {
  constexpr HeartbeatReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatReplyDefaultTypeInternal() {}
  union {
    HeartbeatReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
constexpr CopyChunkRequest::CopyChunkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunk_handle_(int64_t{0}){}
struct CopyChunkRequestDefaultTypeInternal {
  constexpr CopyChunkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CopyChunkRequestDefaultTypeInternal() {}
  union {
    CopyChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CopyChunkRequestDefaultTypeInternal _CopyChunkRequest_default_instance_;
constexpr CopyChunkReply::CopyChunkReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CopyChunkReplyDefaultTypeInternal {
  constexpr CopyChunkReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CopyChunkReplyDefaultTypeInternal() {}
  union {
    CopyChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CopyChunkReplyDefaultTypeInternal _CopyChunkReply_default_instance_;
}  // namespace Rpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_namenode_5fdatanode_5fservice_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_namenode_5fdatanode_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_namenode_5fdatanode_5fservice_2eproto = nullptr;

const uint32_t TableStruct_namenode_5fdatanode_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNodeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNodeLocation, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, available_size_),
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, stored_chunk_handles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, chunk_handle_),
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, datanode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatReply, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, chunk_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Rpc::DataNodeLocation)},
  { 7, -1, -1, sizeof(::Rpc::DataNode)},
  { 16, -1, -1, sizeof(::Rpc::Chunk)},
  { 25, -1, -1, sizeof(::Rpc::ReportDataNodeRequest)},
  { 32, -1, -1, sizeof(::Rpc::ReportDataNodeReply)},
  { 38, -1, -1, sizeof(::Rpc::HeartbeatRequest)},
  { 44, -1, -1, sizeof(::Rpc::HeartbeatReply)},
  { 51, -1, -1, sizeof(::Rpc::CopyChunkRequest)},
  { 59, -1, -1, sizeof(::Rpc::CopyChunkReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_DataNodeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_DataNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_ReportDataNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_ReportDataNodeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_HeartbeatReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_CopyChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rpc::_CopyChunkReply_default_instance_),
};

const char descriptor_table_protodef_namenode_5fdatanode_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037namenode_datanode_service.proto\022\003Rpc\"$"
  "\n\020DataNodeLocation\022\020\n\010location\030\001 \001(\t\"R\n\010"
  "DataNode\022\020\n\010location\030\001 \001(\t\022\026\n\016available_"
  "size\030\002 \001(\r\022\034\n\024stored_chunk_handles\030\003 \003(\003"
  "\"=\n\005Chunk\022\024\n\014chunk_handle\030\001 \001(\003\022\020\n\010locat"
  "ion\030\002 \003(\t\022\014\n\004size\030\003 \001(\003\"8\n\025ReportDataNod"
  "eRequest\022\037\n\010datanode\030\001 \001(\0132\r.Rpc.DataNod"
  "e\"\025\n\023ReportDataNodeReply\"\022\n\020HeartbeatReq"
  "uest\"8\n\016HeartbeatReply\022&\n\007request\030\001 \001(\0132"
  "\025.Rpc.HeartbeatRequest\":\n\020CopyChunkReque"
  "st\022\020\n\010location\030\001 \001(\t\022\024\n\014chunk_handle\030\002 \001"
  "(\003\"\020\n\016CopyChunkReply2\225\001\n\030DataNodeControl"
  "erService\022>\n\016CheckHeartbeat\022\025.Rpc.Heartb"
  "eatRequest\032\023.Rpc.HeartbeatReply\"\000\0229\n\tCop"
  "yChunk\022\025.Rpc.CopyChunkRequest\032\023.Rpc.Copy"
  "ChunkReply\"\0002a\n\025ReportDataNodeSerivce\022H\n"
  "\016ReportDataNode\022\032.Rpc.ReportDataNodeRequ"
  "est\032\030.Rpc.ReportDataNodeReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_namenode_5fdatanode_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_namenode_5fdatanode_5fservice_2eproto = {
  false, false, 719, descriptor_table_protodef_namenode_5fdatanode_5fservice_2eproto, "namenode_datanode_service.proto", 
  &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_namenode_5fdatanode_5fservice_2eproto::offsets,
  file_level_metadata_namenode_5fdatanode_5fservice_2eproto, file_level_enum_descriptors_namenode_5fdatanode_5fservice_2eproto, file_level_service_descriptors_namenode_5fdatanode_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter() {
  return &descriptor_table_namenode_5fdatanode_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_namenode_5fdatanode_5fservice_2eproto(&descriptor_table_namenode_5fdatanode_5fservice_2eproto);
namespace Rpc {

// ===================================================================

class DataNodeLocation::_Internal {
 public:
};

DataNodeLocation::DataNodeLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.DataNodeLocation)
}
DataNodeLocation::DataNodeLocation(const DataNodeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNodeLocation)
}

inline void DataNodeLocation::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataNodeLocation::~DataNodeLocation() {
  // @@protoc_insertion_point(destructor:Rpc.DataNodeLocation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataNodeLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataNodeLocation::ArenaDtor(void* object) {
  DataNodeLocation* _this = reinterpret_cast< DataNodeLocation* >(object);
  (void)_this;
}
void DataNodeLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataNodeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataNodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNodeLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNodeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Rpc.DataNodeLocation.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNodeLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNodeLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNodeLocation.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNodeLocation)
  return target;
}

size_t DataNodeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNodeLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNodeLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataNodeLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNodeLocation::GetClassData() const { return &_class_data_; }

void DataNodeLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataNodeLocation *>(to)->MergeFrom(
      static_cast<const DataNodeLocation &>(from));
}


void DataNodeLocation::MergeFrom(const DataNodeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNodeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNodeLocation::CopyFrom(const DataNodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeLocation::IsInitialized() const {
  return true;
}

void DataNodeLocation::InternalSwap(DataNodeLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNodeLocation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[0]);
}

// ===================================================================

class DataNode::_Internal {
 public:
};

DataNode::DataNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stored_chunk_handles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.DataNode)
}
DataNode::DataNode(const DataNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stored_chunk_handles_(from.stored_chunk_handles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  available_size_ = from.available_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNode)
}

inline void DataNode::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
available_size_ = 0u;
}

DataNode::~DataNode() {
  // @@protoc_insertion_point(destructor:Rpc.DataNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataNode::ArenaDtor(void* object) {
  DataNode* _this = reinterpret_cast< DataNode* >(object);
  (void)_this;
}
void DataNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stored_chunk_handles_.Clear();
  location_.ClearToEmpty();
  available_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Rpc.DataNode.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 available_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          available_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 stored_chunk_handles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_stored_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_stored_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNode.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_available_size(), target);
  }

  // repeated int64 stored_chunk_handles = 3;
  {
    int byte_size = _stored_chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_stored_chunk_handles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNode)
  return target;
}

size_t DataNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 stored_chunk_handles = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->stored_chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stored_chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_available_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNode::GetClassData() const { return &_class_data_; }

void DataNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataNode *>(to)->MergeFrom(
      static_cast<const DataNode &>(from));
}


void DataNode::MergeFrom(const DataNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stored_chunk_handles_.MergeFrom(from.stored_chunk_handles_);
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (from._internal_available_size() != 0) {
    _internal_set_available_size(from._internal_available_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNode::CopyFrom(const DataNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNode::IsInitialized() const {
  return true;
}

void DataNode::InternalSwap(DataNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stored_chunk_handles_.InternalSwap(&other->stored_chunk_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  swap(available_size_, other->available_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[1]);
}

// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  location_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      location_(from.location_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_handle_, &from.chunk_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Rpc.Chunk)
}

inline void Chunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:Rpc.Chunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  ::memset(&chunk_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 chunk_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chunk_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_location();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Rpc.Chunk.location"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunk_handle = 1;
  if (this->_internal_chunk_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_chunk_handle(), target);
  }

  // repeated string location = 2;
  for (int i = 0, n = this->_internal_location_size(); i < n; i++) {
    const auto& s = this->_internal_location(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.Chunk.location");
    target = stream->WriteString(2, s, target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string location = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(location_.size());
  for (int i = 0, n = location_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      location_.Get(i));
  }

  // int64 chunk_handle = 1;
  if (this->_internal_chunk_handle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_handle());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }

void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chunk *>(to)->MergeFrom(
      static_cast<const Chunk &>(from));
}


void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  if (from._internal_chunk_handle() != 0) {
    _internal_set_chunk_handle(from._internal_chunk_handle());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  location_.InternalSwap(&other->location_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, size_)
      + sizeof(Chunk::size_)
      - PROTOBUF_FIELD_OFFSET(Chunk, chunk_handle_)>(
          reinterpret_cast<char*>(&chunk_handle_),
          reinterpret_cast<char*>(&other->chunk_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[2]);
}

// ===================================================================

class ReportDataNodeRequest::_Internal {
 public:
  static const ::Rpc::DataNode& datanode(const ReportDataNodeRequest* msg);
};

const ::Rpc::DataNode&
ReportDataNodeRequest::_Internal::datanode(const ReportDataNodeRequest* msg) {
  return *msg->datanode_;
}
ReportDataNodeRequest::ReportDataNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.ReportDataNodeRequest)
}
ReportDataNodeRequest::ReportDataNodeRequest(const ReportDataNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datanode()) {
    datanode_ = new ::Rpc::DataNode(*from.datanode_);
  } else {
    datanode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeRequest)
}

inline void ReportDataNodeRequest::SharedCtor() {
datanode_ = nullptr;
}

ReportDataNodeRequest::~ReportDataNodeRequest() {
  // @@protoc_insertion_point(destructor:Rpc.ReportDataNodeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportDataNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete datanode_;
}

void ReportDataNodeRequest::ArenaDtor(void* object) {
  ReportDataNodeRequest* _this = reinterpret_cast< ReportDataNodeRequest* >(object);
  (void)_this;
}
void ReportDataNodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportDataNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportDataNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReportDataNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && datanode_ != nullptr) {
    delete datanode_;
  }
  datanode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportDataNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Rpc.DataNode datanode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_datanode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportDataNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReportDataNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rpc.DataNode datanode = 1;
  if (this->_internal_has_datanode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::datanode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReportDataNodeRequest)
  return target;
}

size_t ReportDataNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReportDataNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rpc.DataNode datanode = 1;
  if (this->_internal_has_datanode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datanode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDataNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportDataNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDataNodeRequest::GetClassData() const { return &_class_data_; }

void ReportDataNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportDataNodeRequest *>(to)->MergeFrom(
      static_cast<const ReportDataNodeRequest &>(from));
}


void ReportDataNodeRequest::MergeFrom(const ReportDataNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReportDataNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_datanode()) {
    _internal_mutable_datanode()->::Rpc::DataNode::MergeFrom(from._internal_datanode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportDataNodeRequest::CopyFrom(const ReportDataNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReportDataNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataNodeRequest::IsInitialized() const {
  return true;
}

void ReportDataNodeRequest::InternalSwap(ReportDataNodeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(datanode_, other->datanode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportDataNodeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[3]);
}

// ===================================================================

class ReportDataNodeReply::_Internal {
 public:
};

ReportDataNodeReply::ReportDataNodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.ReportDataNodeReply)
}
ReportDataNodeReply::ReportDataNodeReply(const ReportDataNodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDataNodeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDataNodeReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReportDataNodeReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[4]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[5]);
}

// ===================================================================

class HeartbeatReply::_Internal {
 public:
  static const ::Rpc::HeartbeatRequest& request(const HeartbeatReply* msg);
};

const ::Rpc::HeartbeatRequest&
HeartbeatReply::_Internal::request(const HeartbeatReply* msg) {
  return *msg->request_;
}
HeartbeatReply::HeartbeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.HeartbeatReply)
}
HeartbeatReply::HeartbeatReply(const HeartbeatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::Rpc::HeartbeatRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatReply)
}

inline void HeartbeatReply::SharedCtor() {
request_ = nullptr;
}

HeartbeatReply::~HeartbeatReply() {
  // @@protoc_insertion_point(destructor:Rpc.HeartbeatReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartbeatReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void HeartbeatReply::ArenaDtor(void* object) {
  HeartbeatReply* _this = reinterpret_cast< HeartbeatReply* >(object);
  (void)_this;
}
void HeartbeatReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Rpc.HeartbeatRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HeartbeatReply)
  return target;
}

size_t HeartbeatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HeartbeatReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatReply::GetClassData() const { return &_class_data_; }

void HeartbeatReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartbeatReply *>(to)->MergeFrom(
      static_cast<const HeartbeatReply &>(from));
}


void HeartbeatReply::MergeFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HeartbeatReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _internal_mutable_request()->::Rpc::HeartbeatRequest::MergeFrom(from._internal_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatReply::CopyFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReply::IsInitialized() const {
  return true;
}

void HeartbeatReply::InternalSwap(HeartbeatReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[6]);
}

// ===================================================================

class CopyChunkRequest::_Internal {
 public:
};

CopyChunkRequest::CopyChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkRequest)
}
CopyChunkRequest::CopyChunkRequest(const CopyChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  chunk_handle_ = from.chunk_handle_;
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkRequest)
}

inline void CopyChunkRequest::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chunk_handle_ = int64_t{0};
}

CopyChunkRequest::~CopyChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.CopyChunkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CopyChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CopyChunkRequest::ArenaDtor(void* object) {
  CopyChunkRequest* _this = reinterpret_cast< CopyChunkRequest* >(object);
  (void)_this;
}
void CopyChunkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CopyChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CopyChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.CopyChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmpty();
  chunk_handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Rpc.CopyChunkRequest.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 chunk_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chunk_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopyChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.CopyChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.CopyChunkRequest.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunk_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.CopyChunkRequest)
  return target;
}

size_t CopyChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.CopyChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CopyChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkRequest::GetClassData() const { return &_class_data_; }

void CopyChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CopyChunkRequest *>(to)->MergeFrom(
      static_cast<const CopyChunkRequest &>(from));
}


void CopyChunkRequest::MergeFrom(const CopyChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.CopyChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (from._internal_chunk_handle() != 0) {
    _internal_set_chunk_handle(from._internal_chunk_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopyChunkRequest::CopyFrom(const CopyChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.CopyChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyChunkRequest::IsInitialized() const {
  return true;
}

void CopyChunkRequest::InternalSwap(CopyChunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  swap(chunk_handle_, other->chunk_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[7]);
}

// ===================================================================

class CopyChunkReply::_Internal {
 public:
};

CopyChunkReply::CopyChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkReply)
}
CopyChunkReply::CopyChunkReply(const CopyChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_namenode_5fdatanode_5fservice_2eproto_getter, &descriptor_table_namenode_5fdatanode_5fservice_2eproto_once,
      file_level_metadata_namenode_5fdatanode_5fservice_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rpc::DataNodeLocation* Arena::CreateMaybeMessage< ::Rpc::DataNodeLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DataNodeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::DataNode* Arena::CreateMaybeMessage< ::Rpc::DataNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DataNode >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::Chunk* Arena::CreateMaybeMessage< ::Rpc::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReportDataNodeRequest* Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReportDataNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReportDataNodeReply* Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReportDataNodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HeartbeatRequest* Arena::CreateMaybeMessage< ::Rpc::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HeartbeatReply* Arena::CreateMaybeMessage< ::Rpc::HeartbeatReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HeartbeatReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkRequest* Arena::CreateMaybeMessage< ::Rpc::CopyChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkReply* Arena::CreateMaybeMessage< ::Rpc::CopyChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
