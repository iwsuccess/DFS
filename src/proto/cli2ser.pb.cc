// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cli2ser.proto

#include "cli2ser.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr FindAddrRequest::FindAddrRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FindAddrRequestDefaultTypeInternal {
  constexpr FindAddrRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAddrRequestDefaultTypeInternal() {}
  union {
    FindAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAddrRequestDefaultTypeInternal _FindAddrRequest_default_instance_;
constexpr FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_ports_(){}
struct FindAddrReply_ReplicaAddrsDefaultTypeInternal {
  constexpr FindAddrReply_ReplicaAddrsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAddrReply_ReplicaAddrsDefaultTypeInternal() {}
  union {
    FindAddrReply_ReplicaAddrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAddrReply_ReplicaAddrsDefaultTypeInternal _FindAddrReply_ReplicaAddrs_default_instance_;
constexpr FindAddrReply::FindAddrReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_handles_()
  , _chunk_handles_cached_byte_size_(0)
  , addrs_(){}
struct FindAddrReplyDefaultTypeInternal {
  constexpr FindAddrReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAddrReplyDefaultTypeInternal() {}
  union {
    FindAddrReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAddrReplyDefaultTypeInternal _FindAddrReply_default_instance_;
constexpr GetWriteAddrRequest::GetWriteAddrRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remote_file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , write_data_size_(int64_t{0}){}
struct GetWriteAddrRequestDefaultTypeInternal {
  constexpr GetWriteAddrRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWriteAddrRequestDefaultTypeInternal() {}
  union {
    GetWriteAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWriteAddrRequestDefaultTypeInternal _GetWriteAddrRequest_default_instance_;
constexpr GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_ports_(){}
struct GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal {
  constexpr GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal() {}
  union {
    GetWriteAddrReply_ReplicaAddrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal _GetWriteAddrReply_ReplicaAddrs_default_instance_;
constexpr GetWriteAddrReply::GetWriteAddrReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_handles_()
  , _chunk_handles_cached_byte_size_(0)
  , addrs_(){}
struct GetWriteAddrReplyDefaultTypeInternal {
  constexpr GetWriteAddrReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetWriteAddrReplyDefaultTypeInternal() {}
  union {
    GetWriteAddrReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetWriteAddrReplyDefaultTypeInternal _GetWriteAddrReply_default_instance_;
constexpr GetSubDirPathsRequest::GetSubDirPathsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSubDirPathsRequestDefaultTypeInternal {
  constexpr GetSubDirPathsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubDirPathsRequestDefaultTypeInternal() {}
  union {
    GetSubDirPathsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubDirPathsRequestDefaultTypeInternal _GetSubDirPathsRequest_default_instance_;
constexpr GetSubDirPathsReply::GetSubDirPathsReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subdir_file_paths_(){}
struct GetSubDirPathsReplyDefaultTypeInternal {
  constexpr GetSubDirPathsReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubDirPathsReplyDefaultTypeInternal() {}
  union {
    GetSubDirPathsReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubDirPathsReplyDefaultTypeInternal _GetSubDirPathsReply_default_instance_;
constexpr MkdirRequest::MkdirRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MkdirRequestDefaultTypeInternal {
  constexpr MkdirRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MkdirRequestDefaultTypeInternal() {}
  union {
    MkdirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MkdirRequestDefaultTypeInternal _MkdirRequest_default_instance_;
constexpr MkdirReply::MkdirReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MkdirReplyDefaultTypeInternal {
  constexpr MkdirReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MkdirReplyDefaultTypeInternal() {}
  union {
    MkdirReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MkdirReplyDefaultTypeInternal _MkdirReply_default_instance_;
constexpr RenameRequest::RenameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , des_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RenameRequestDefaultTypeInternal {
  constexpr RenameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenameRequestDefaultTypeInternal() {}
  union {
    RenameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
constexpr RenameReply::RenameReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RenameReplyDefaultTypeInternal {
  constexpr RenameReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenameReplyDefaultTypeInternal() {}
  union {
    RenameReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenameReplyDefaultTypeInternal _RenameReply_default_instance_;
constexpr DeleteRequest::DeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remote_file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRequestDefaultTypeInternal {
  constexpr DeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
constexpr DeleteReply::DeleteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeleteReplyDefaultTypeInternal {
  constexpr DeleteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteReplyDefaultTypeInternal() {}
  union {
    DeleteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteReplyDefaultTypeInternal _DeleteReply_default_instance_;
constexpr StatRequest::StatRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StatRequestDefaultTypeInternal {
  constexpr StatRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatRequestDefaultTypeInternal() {}
  union {
    StatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatRequestDefaultTypeInternal _StatRequest_default_instance_;
constexpr StatReply::StatReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_size_(uint64_t{0u})
  , existed_(false){}
struct StatReplyDefaultTypeInternal {
  constexpr StatReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatReplyDefaultTypeInternal() {}
  union {
    StatReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatReplyDefaultTypeInternal _StatReply_default_instance_;
constexpr WriteChunkRequest::WriteChunkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunkhandle_(int64_t{0})
  , offset_(int64_t{0})
  , length_(int64_t{0}){}
struct WriteChunkRequestDefaultTypeInternal {
  constexpr WriteChunkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteChunkRequestDefaultTypeInternal() {}
  union {
    WriteChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteChunkRequestDefaultTypeInternal _WriteChunkRequest_default_instance_;
constexpr WriteChunkReply::WriteChunkReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytes_write_(int64_t{0}){}
struct WriteChunkReplyDefaultTypeInternal {
  constexpr WriteChunkReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteChunkReplyDefaultTypeInternal() {}
  union {
    WriteChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteChunkReplyDefaultTypeInternal _WriteChunkReply_default_instance_;
constexpr ReadChunkRequest::ReadChunkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunkhandle_(int64_t{0})
  , offset_(int64_t{0})
  , length_(int64_t{0}){}
struct ReadChunkRequestDefaultTypeInternal {
  constexpr ReadChunkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadChunkRequestDefaultTypeInternal() {}
  union {
    ReadChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadChunkRequestDefaultTypeInternal _ReadChunkRequest_default_instance_;
constexpr ReadChunkReply::ReadChunkReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytes_read_(int64_t{0}){}
struct ReadChunkReplyDefaultTypeInternal {
  constexpr ReadChunkReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadChunkReplyDefaultTypeInternal() {}
  union {
    ReadChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadChunkReplyDefaultTypeInternal _ReadChunkReply_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cli2ser_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cli2ser_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cli2ser_2eproto = nullptr;

const uint32_t TableStruct_cli2ser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FindAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FindAddrRequest, file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FindAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FindAddrReply_ReplicaAddrs, ip_ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FindAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FindAddrReply, chunk_handles_),
  PROTOBUF_FIELD_OFFSET(::FindAddrReply, addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrRequest, remote_file_path_),
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrRequest, write_data_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrReply_ReplicaAddrs, ip_ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrReply, chunk_handles_),
  PROTOBUF_FIELD_OFFSET(::GetWriteAddrReply, addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSubDirPathsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSubDirPathsRequest, file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetSubDirPathsReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetSubDirPathsReply, subdir_file_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MkdirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MkdirRequest, new_file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MkdirReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RenameRequest, src_path_),
  PROTOBUF_FIELD_OFFSET(::RenameRequest, des_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenameReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeleteRequest, remote_file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeleteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatRequest, file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatReply, existed_),
  PROTOBUF_FIELD_OFFSET(::StatReply, file_path_),
  PROTOBUF_FIELD_OFFSET(::StatReply, file_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WriteChunkRequest, chunkhandle_),
  PROTOBUF_FIELD_OFFSET(::WriteChunkRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::WriteChunkRequest, length_),
  PROTOBUF_FIELD_OFFSET(::WriteChunkRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WriteChunkReply, bytes_write_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReadChunkRequest, chunkhandle_),
  PROTOBUF_FIELD_OFFSET(::ReadChunkRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::ReadChunkRequest, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReadChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ReadChunkReply, data_),
  PROTOBUF_FIELD_OFFSET(::ReadChunkReply, bytes_read_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FindAddrRequest)},
  { 7, -1, -1, sizeof(::FindAddrReply_ReplicaAddrs)},
  { 14, -1, -1, sizeof(::FindAddrReply)},
  { 22, -1, -1, sizeof(::GetWriteAddrRequest)},
  { 30, -1, -1, sizeof(::GetWriteAddrReply_ReplicaAddrs)},
  { 37, -1, -1, sizeof(::GetWriteAddrReply)},
  { 45, -1, -1, sizeof(::GetSubDirPathsRequest)},
  { 52, -1, -1, sizeof(::GetSubDirPathsReply)},
  { 59, -1, -1, sizeof(::MkdirRequest)},
  { 66, -1, -1, sizeof(::MkdirReply)},
  { 72, -1, -1, sizeof(::RenameRequest)},
  { 80, -1, -1, sizeof(::RenameReply)},
  { 86, -1, -1, sizeof(::DeleteRequest)},
  { 93, -1, -1, sizeof(::DeleteReply)},
  { 99, -1, -1, sizeof(::StatRequest)},
  { 106, -1, -1, sizeof(::StatReply)},
  { 115, -1, -1, sizeof(::WriteChunkRequest)},
  { 125, -1, -1, sizeof(::WriteChunkReply)},
  { 132, -1, -1, sizeof(::ReadChunkRequest)},
  { 141, -1, -1, sizeof(::ReadChunkReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FindAddrRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FindAddrReply_ReplicaAddrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FindAddrReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetWriteAddrRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetWriteAddrReply_ReplicaAddrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetWriteAddrReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetSubDirPathsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetSubDirPathsReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MkdirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MkdirReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RenameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RenameReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeleteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StatReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WriteChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WriteChunkReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadChunkReply_default_instance_),
};

const char descriptor_table_protodef_cli2ser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcli2ser.proto\"$\n\017FindAddrRequest\022\021\n\tfi"
  "le_path\030\001 \001(\t\"t\n\rFindAddrReply\022\025\n\rchunk_"
  "handles\030\001 \003(\003\022*\n\005addrs\030\002 \003(\0132\033.FindAddrR"
  "eply.ReplicaAddrs\032 \n\014ReplicaAddrs\022\020\n\010ip_"
  "ports\030\001 \003(\t\"H\n\023GetWriteAddrRequest\022\030\n\020re"
  "mote_file_path\030\001 \001(\t\022\027\n\017write_data_size\030"
  "\002 \001(\003\"|\n\021GetWriteAddrReply\022\025\n\rchunk_hand"
  "les\030\001 \003(\003\022.\n\005addrs\030\002 \003(\0132\037.GetWriteAddrR"
  "eply.ReplicaAddrs\032 \n\014ReplicaAddrs\022\020\n\010ip_"
  "ports\030\001 \003(\t\"*\n\025GetSubDirPathsRequest\022\021\n\t"
  "file_path\030\001 \001(\t\"0\n\023GetSubDirPathsReply\022\031"
  "\n\021subdir_file_paths\030\001 \003(\t\"%\n\014MkdirReques"
  "t\022\025\n\rnew_file_path\030\001 \001(\t\"\014\n\nMkdirReply\"3"
  "\n\rRenameRequest\022\020\n\010src_path\030\001 \001(\t\022\020\n\010des"
  "_path\030\002 \001(\t\"\r\n\013RenameReply\")\n\rDeleteRequ"
  "est\022\030\n\020remote_file_path\030\001 \001(\t\"\r\n\013DeleteR"
  "eply\" \n\013StatRequest\022\021\n\tfile_path\030\001 \001(\t\"B"
  "\n\tStatReply\022\017\n\007existed\030\001 \001(\010\022\021\n\tfile_pat"
  "h\030\002 \001(\t\022\021\n\tfile_size\030\003 \001(\004\"V\n\021WriteChunk"
  "Request\022\023\n\013chunkhandle\030\001 \001(\003\022\016\n\006offset\030\002"
  " \001(\003\022\016\n\006length\030\003 \001(\003\022\014\n\004data\030\004 \001(\t\"&\n\017Wr"
  "iteChunkReply\022\023\n\013bytes_write\030\001 \001(\003\"G\n\020Re"
  "adChunkRequest\022\023\n\013chunkhandle\030\001 \001(\003\022\016\n\006o"
  "ffset\030\002 \001(\003\022\016\n\006length\030\003 \001(\003\"2\n\016ReadChunk"
  "Reply\022\014\n\004data\030\001 \001(\t\022\022\n\nbytes_read\030\002 \001(\0032"
  "\331\002\n\nCli2Master\022.\n\010FindAddr\022\020.FindAddrReq"
  "uest\032\016.FindAddrReply\"\000\022:\n\014GetWriteAddr\022\024"
  ".GetWriteAddrRequest\032\022.GetWriteAddrReply"
  "\"\000\022\"\n\004Stat\022\014.StatRequest\032\n.StatReply\"\000\022("
  "\n\006Rename\022\016.RenameRequest\032\014.RenameReply\"\000"
  "\022(\n\006Delete\022\016.DeleteRequest\032\014.DeleteReply"
  "\"\000\022%\n\005Mkdir\022\r.MkdirRequest\032\013.MkdirReply\""
  "\000\022@\n\016GetSubDirPaths\022\026.GetSubDirPathsRequ"
  "est\032\024.GetSubDirPathsReply\"\0002z\n\017Cli2Chunk"
  "Server\0221\n\tReadChunk\022\021.ReadChunkRequest\032\017"
  ".ReadChunkReply\"\000\0224\n\nWriteChunk\022\022.WriteC"
  "hunkRequest\032\020.WriteChunkReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cli2ser_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cli2ser_2eproto = {
  false, false, 1479, descriptor_table_protodef_cli2ser_2eproto, "cli2ser.proto", 
  &descriptor_table_cli2ser_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_cli2ser_2eproto::offsets,
  file_level_metadata_cli2ser_2eproto, file_level_enum_descriptors_cli2ser_2eproto, file_level_service_descriptors_cli2ser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cli2ser_2eproto_getter() {
  return &descriptor_table_cli2ser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cli2ser_2eproto(&descriptor_table_cli2ser_2eproto);

// ===================================================================

class FindAddrRequest::_Internal {
 public:
};

FindAddrRequest::FindAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FindAddrRequest)
}
FindAddrRequest::FindAddrRequest(const FindAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FindAddrRequest)
}

inline void FindAddrRequest::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindAddrRequest::~FindAddrRequest() {
  // @@protoc_insertion_point(destructor:FindAddrRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindAddrRequest::ArenaDtor(void* object) {
  FindAddrRequest* _this = reinterpret_cast< FindAddrRequest* >(object);
  (void)_this;
}
void FindAddrRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FindAddrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FindAddrRequest.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FindAddrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FindAddrRequest.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindAddrRequest)
  return target;
}

size_t FindAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindAddrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrRequest::GetClassData() const { return &_class_data_; }

void FindAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAddrRequest *>(to)->MergeFrom(
      static_cast<const FindAddrRequest &>(from));
}


void FindAddrRequest::MergeFrom(const FindAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrRequest::CopyFrom(const FindAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrRequest::IsInitialized() const {
  return true;
}

void FindAddrRequest::InternalSwap(FindAddrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[0]);
}

// ===================================================================

class FindAddrReply_ReplicaAddrs::_Internal {
 public:
};

FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ip_ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FindAddrReply.ReplicaAddrs)
}
FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(const FindAddrReply_ReplicaAddrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_ports_(from.ip_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FindAddrReply.ReplicaAddrs)
}

inline void FindAddrReply_ReplicaAddrs::SharedCtor() {
}

FindAddrReply_ReplicaAddrs::~FindAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:FindAddrReply.ReplicaAddrs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAddrReply_ReplicaAddrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindAddrReply_ReplicaAddrs::ArenaDtor(void* object) {
  FindAddrReply_ReplicaAddrs* _this = reinterpret_cast< FindAddrReply_ReplicaAddrs* >(object);
  (void)_this;
}
void FindAddrReply_ReplicaAddrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:FindAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_ports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrReply_ReplicaAddrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ip_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_ports();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FindAddrReply.ReplicaAddrs.ip_ports"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrReply_ReplicaAddrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FindAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->_internal_ip_ports_size(); i < n; i++) {
    const auto& s = this->_internal_ip_ports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FindAddrReply.ReplicaAddrs.ip_ports");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindAddrReply.ReplicaAddrs)
  return target;
}

size_t FindAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_ports_.size());
  for (int i = 0, n = ip_ports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_ports_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrReply_ReplicaAddrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAddrReply_ReplicaAddrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrReply_ReplicaAddrs::GetClassData() const { return &_class_data_; }

void FindAddrReply_ReplicaAddrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAddrReply_ReplicaAddrs *>(to)->MergeFrom(
      static_cast<const FindAddrReply_ReplicaAddrs &>(from));
}


void FindAddrReply_ReplicaAddrs::MergeFrom(const FindAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_ports_.MergeFrom(from.ip_ports_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrReply_ReplicaAddrs::CopyFrom(const FindAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void FindAddrReply_ReplicaAddrs::InternalSwap(FindAddrReply_ReplicaAddrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ip_ports_.InternalSwap(&other->ip_ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrReply_ReplicaAddrs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[1]);
}

// ===================================================================

class FindAddrReply::_Internal {
 public:
};

FindAddrReply::FindAddrReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunk_handles_(arena),
  addrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FindAddrReply)
}
FindAddrReply::FindAddrReply(const FindAddrReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_handles_(from.chunk_handles_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FindAddrReply)
}

inline void FindAddrReply::SharedCtor() {
}

FindAddrReply::~FindAddrReply() {
  // @@protoc_insertion_point(destructor:FindAddrReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAddrReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindAddrReply::ArenaDtor(void* object) {
  FindAddrReply* _this = reinterpret_cast< FindAddrReply* >(object);
  (void)_this;
}
void FindAddrReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAddrReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:FindAddrReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_handles_.Clear();
  addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 chunk_handles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FindAddrReply.ReplicaAddrs addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FindAddrReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    int byte_size = _chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_chunk_handles(), byte_size, target);
    }
  }

  // repeated .FindAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_addrs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FindAddrReply)
  return target;
}

size_t FindAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FindAddrReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .FindAddrReply.ReplicaAddrs addrs = 2;
  total_size += 1UL * this->_internal_addrs_size();
  for (const auto& msg : this->addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAddrReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrReply::GetClassData() const { return &_class_data_; }

void FindAddrReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAddrReply *>(to)->MergeFrom(
      static_cast<const FindAddrReply &>(from));
}


void FindAddrReply::MergeFrom(const FindAddrReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FindAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_handles_.MergeFrom(from.chunk_handles_);
  addrs_.MergeFrom(from.addrs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrReply::CopyFrom(const FindAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FindAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply::IsInitialized() const {
  return true;
}

void FindAddrReply::InternalSwap(FindAddrReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunk_handles_.InternalSwap(&other->chunk_handles_);
  addrs_.InternalSwap(&other->addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[2]);
}

// ===================================================================

class GetWriteAddrRequest::_Internal {
 public:
};

GetWriteAddrRequest::GetWriteAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetWriteAddrRequest)
}
GetWriteAddrRequest::GetWriteAddrRequest(const GetWriteAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_file_path().empty()) {
    remote_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_file_path(), 
      GetArenaForAllocation());
  }
  write_data_size_ = from.write_data_size_;
  // @@protoc_insertion_point(copy_constructor:GetWriteAddrRequest)
}

inline void GetWriteAddrRequest::SharedCtor() {
remote_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
write_data_size_ = int64_t{0};
}

GetWriteAddrRequest::~GetWriteAddrRequest() {
  // @@protoc_insertion_point(destructor:GetWriteAddrRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetWriteAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  remote_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetWriteAddrRequest::ArenaDtor(void* object) {
  GetWriteAddrRequest* _this = reinterpret_cast< GetWriteAddrRequest* >(object);
  (void)_this;
}
void GetWriteAddrRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWriteAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetWriteAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetWriteAddrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_file_path_.ClearToEmpty();
  write_data_size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string remote_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remote_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetWriteAddrRequest.remote_file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 write_data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          write_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetWriteAddrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_file_path().data(), static_cast<int>(this->_internal_remote_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetWriteAddrRequest.remote_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_file_path(), target);
  }

  // int64 write_data_size = 2;
  if (this->_internal_write_data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_write_data_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetWriteAddrRequest)
  return target;
}

size_t GetWriteAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetWriteAddrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_file_path());
  }

  // int64 write_data_size = 2;
  if (this->_internal_write_data_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_write_data_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetWriteAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrRequest::GetClassData() const { return &_class_data_; }

void GetWriteAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetWriteAddrRequest *>(to)->MergeFrom(
      static_cast<const GetWriteAddrRequest &>(from));
}


void GetWriteAddrRequest::MergeFrom(const GetWriteAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetWriteAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_file_path().empty()) {
    _internal_set_remote_file_path(from._internal_remote_file_path());
  }
  if (from._internal_write_data_size() != 0) {
    _internal_set_write_data_size(from._internal_write_data_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrRequest::CopyFrom(const GetWriteAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetWriteAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrRequest::IsInitialized() const {
  return true;
}

void GetWriteAddrRequest::InternalSwap(GetWriteAddrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_file_path_, lhs_arena,
      &other->remote_file_path_, rhs_arena
  );
  swap(write_data_size_, other->write_data_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[3]);
}

// ===================================================================

class GetWriteAddrReply_ReplicaAddrs::_Internal {
 public:
};

GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ip_ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetWriteAddrReply.ReplicaAddrs)
}
GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(const GetWriteAddrReply_ReplicaAddrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_ports_(from.ip_ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetWriteAddrReply.ReplicaAddrs)
}

inline void GetWriteAddrReply_ReplicaAddrs::SharedCtor() {
}

GetWriteAddrReply_ReplicaAddrs::~GetWriteAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:GetWriteAddrReply.ReplicaAddrs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetWriteAddrReply_ReplicaAddrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWriteAddrReply_ReplicaAddrs::ArenaDtor(void* object) {
  GetWriteAddrReply_ReplicaAddrs* _this = reinterpret_cast< GetWriteAddrReply_ReplicaAddrs* >(object);
  (void)_this;
}
void GetWriteAddrReply_ReplicaAddrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWriteAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetWriteAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:GetWriteAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_ports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrReply_ReplicaAddrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ip_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_ports();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetWriteAddrReply.ReplicaAddrs.ip_ports"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrReply_ReplicaAddrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetWriteAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->_internal_ip_ports_size(); i < n; i++) {
    const auto& s = this->_internal_ip_ports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetWriteAddrReply.ReplicaAddrs.ip_ports");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetWriteAddrReply.ReplicaAddrs)
  return target;
}

size_t GetWriteAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetWriteAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_ports_.size());
  for (int i = 0, n = ip_ports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_ports_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrReply_ReplicaAddrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetWriteAddrReply_ReplicaAddrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrReply_ReplicaAddrs::GetClassData() const { return &_class_data_; }

void GetWriteAddrReply_ReplicaAddrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetWriteAddrReply_ReplicaAddrs *>(to)->MergeFrom(
      static_cast<const GetWriteAddrReply_ReplicaAddrs &>(from));
}


void GetWriteAddrReply_ReplicaAddrs::MergeFrom(const GetWriteAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetWriteAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ip_ports_.MergeFrom(from.ip_ports_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrReply_ReplicaAddrs::CopyFrom(const GetWriteAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetWriteAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void GetWriteAddrReply_ReplicaAddrs::InternalSwap(GetWriteAddrReply_ReplicaAddrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ip_ports_.InternalSwap(&other->ip_ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrReply_ReplicaAddrs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[4]);
}

// ===================================================================

class GetWriteAddrReply::_Internal {
 public:
};

GetWriteAddrReply::GetWriteAddrReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunk_handles_(arena),
  addrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetWriteAddrReply)
}
GetWriteAddrReply::GetWriteAddrReply(const GetWriteAddrReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_handles_(from.chunk_handles_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetWriteAddrReply)
}

inline void GetWriteAddrReply::SharedCtor() {
}

GetWriteAddrReply::~GetWriteAddrReply() {
  // @@protoc_insertion_point(destructor:GetWriteAddrReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetWriteAddrReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWriteAddrReply::ArenaDtor(void* object) {
  GetWriteAddrReply* _this = reinterpret_cast< GetWriteAddrReply* >(object);
  (void)_this;
}
void GetWriteAddrReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetWriteAddrReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetWriteAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetWriteAddrReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_handles_.Clear();
  addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 chunk_handles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .GetWriteAddrReply.ReplicaAddrs addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetWriteAddrReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    int byte_size = _chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_chunk_handles(), byte_size, target);
    }
  }

  // repeated .GetWriteAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_addrs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetWriteAddrReply)
  return target;
}

size_t GetWriteAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetWriteAddrReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .GetWriteAddrReply.ReplicaAddrs addrs = 2;
  total_size += 1UL * this->_internal_addrs_size();
  for (const auto& msg : this->addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetWriteAddrReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrReply::GetClassData() const { return &_class_data_; }

void GetWriteAddrReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetWriteAddrReply *>(to)->MergeFrom(
      static_cast<const GetWriteAddrReply &>(from));
}


void GetWriteAddrReply::MergeFrom(const GetWriteAddrReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetWriteAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_handles_.MergeFrom(from.chunk_handles_);
  addrs_.MergeFrom(from.addrs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrReply::CopyFrom(const GetWriteAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetWriteAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply::IsInitialized() const {
  return true;
}

void GetWriteAddrReply::InternalSwap(GetWriteAddrReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunk_handles_.InternalSwap(&other->chunk_handles_);
  addrs_.InternalSwap(&other->addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[5]);
}

// ===================================================================

class GetSubDirPathsRequest::_Internal {
 public:
};

GetSubDirPathsRequest::GetSubDirPathsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetSubDirPathsRequest)
}
GetSubDirPathsRequest::GetSubDirPathsRequest(const GetSubDirPathsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetSubDirPathsRequest)
}

inline void GetSubDirPathsRequest::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSubDirPathsRequest::~GetSubDirPathsRequest() {
  // @@protoc_insertion_point(destructor:GetSubDirPathsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubDirPathsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSubDirPathsRequest::ArenaDtor(void* object) {
  GetSubDirPathsRequest* _this = reinterpret_cast< GetSubDirPathsRequest* >(object);
  (void)_this;
}
void GetSubDirPathsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubDirPathsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubDirPathsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSubDirPathsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubDirPathsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetSubDirPathsRequest.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubDirPathsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSubDirPathsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSubDirPathsRequest.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSubDirPathsRequest)
  return target;
}

size_t GetSubDirPathsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSubDirPathsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubDirPathsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubDirPathsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubDirPathsRequest::GetClassData() const { return &_class_data_; }

void GetSubDirPathsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSubDirPathsRequest *>(to)->MergeFrom(
      static_cast<const GetSubDirPathsRequest &>(from));
}


void GetSubDirPathsRequest::MergeFrom(const GetSubDirPathsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetSubDirPathsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubDirPathsRequest::CopyFrom(const GetSubDirPathsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSubDirPathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirPathsRequest::IsInitialized() const {
  return true;
}

void GetSubDirPathsRequest::InternalSwap(GetSubDirPathsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubDirPathsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[6]);
}

// ===================================================================

class GetSubDirPathsReply::_Internal {
 public:
};

GetSubDirPathsReply::GetSubDirPathsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subdir_file_paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GetSubDirPathsReply)
}
GetSubDirPathsReply::GetSubDirPathsReply(const GetSubDirPathsReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subdir_file_paths_(from.subdir_file_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetSubDirPathsReply)
}

inline void GetSubDirPathsReply::SharedCtor() {
}

GetSubDirPathsReply::~GetSubDirPathsReply() {
  // @@protoc_insertion_point(destructor:GetSubDirPathsReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubDirPathsReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSubDirPathsReply::ArenaDtor(void* object) {
  GetSubDirPathsReply* _this = reinterpret_cast< GetSubDirPathsReply* >(object);
  (void)_this;
}
void GetSubDirPathsReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubDirPathsReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubDirPathsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetSubDirPathsReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subdir_file_paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubDirPathsReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string subdir_file_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subdir_file_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetSubDirPathsReply.subdir_file_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubDirPathsReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetSubDirPathsReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subdir_file_paths = 1;
  for (int i = 0, n = this->_internal_subdir_file_paths_size(); i < n; i++) {
    const auto& s = this->_internal_subdir_file_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetSubDirPathsReply.subdir_file_paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetSubDirPathsReply)
  return target;
}

size_t GetSubDirPathsReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetSubDirPathsReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subdir_file_paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subdir_file_paths_.size());
  for (int i = 0, n = subdir_file_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subdir_file_paths_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubDirPathsReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubDirPathsReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubDirPathsReply::GetClassData() const { return &_class_data_; }

void GetSubDirPathsReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSubDirPathsReply *>(to)->MergeFrom(
      static_cast<const GetSubDirPathsReply &>(from));
}


void GetSubDirPathsReply::MergeFrom(const GetSubDirPathsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetSubDirPathsReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subdir_file_paths_.MergeFrom(from.subdir_file_paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubDirPathsReply::CopyFrom(const GetSubDirPathsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetSubDirPathsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirPathsReply::IsInitialized() const {
  return true;
}

void GetSubDirPathsReply::InternalSwap(GetSubDirPathsReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subdir_file_paths_.InternalSwap(&other->subdir_file_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubDirPathsReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[7]);
}

// ===================================================================

class MkdirRequest::_Internal {
 public:
};

MkdirRequest::MkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MkdirRequest)
}
MkdirRequest::MkdirRequest(const MkdirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_file_path().empty()) {
    new_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MkdirRequest)
}

inline void MkdirRequest::SharedCtor() {
new_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MkdirRequest::~MkdirRequest() {
  // @@protoc_insertion_point(destructor:MkdirRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MkdirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  new_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MkdirRequest::ArenaDtor(void* object) {
  MkdirRequest* _this = reinterpret_cast< MkdirRequest* >(object);
  (void)_this;
}
void MkdirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MkdirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MkdirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string new_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_new_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MkdirRequest.new_file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MkdirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MkdirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (!this->_internal_new_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_file_path().data(), static_cast<int>(this->_internal_new_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MkdirRequest.new_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_new_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MkdirRequest)
  return target;
}

size_t MkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MkdirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (!this->_internal_new_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MkdirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirRequest::GetClassData() const { return &_class_data_; }

void MkdirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MkdirRequest *>(to)->MergeFrom(
      static_cast<const MkdirRequest &>(from));
}


void MkdirRequest::MergeFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MkdirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_file_path().empty()) {
    _internal_set_new_file_path(from._internal_new_file_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirRequest::CopyFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirRequest::IsInitialized() const {
  return true;
}

void MkdirRequest::InternalSwap(MkdirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_file_path_, lhs_arena,
      &other->new_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[8]);
}

// ===================================================================

class MkdirReply::_Internal {
 public:
};

MkdirReply::MkdirReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:MkdirReply)
}
MkdirReply::MkdirReply(const MkdirReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MkdirReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MkdirReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[9]);
}

// ===================================================================

class RenameRequest::_Internal {
 public:
};

RenameRequest::RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    src_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_path().empty()) {
    src_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_src_path(), 
      GetArenaForAllocation());
  }
  des_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    des_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_des_path().empty()) {
    des_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_des_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RenameRequest)
}

inline void RenameRequest::SharedCtor() {
src_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  src_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
des_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  des_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:RenameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  src_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  des_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::ArenaDtor(void* object) {
  RenameRequest* _this = reinterpret_cast< RenameRequest* >(object);
  (void)_this;
}
void RenameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RenameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_path_.ClearToEmpty();
  des_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RenameRequest.src_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string des_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_des_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RenameRequest.des_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_path().data(), static_cast<int>(this->_internal_src_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenameRequest.src_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_path(), target);
  }

  // string des_path = 2;
  if (!this->_internal_des_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_des_path().data(), static_cast<int>(this->_internal_des_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenameRequest.des_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_des_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenameRequest)
  return target;
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_path());
  }

  // string des_path = 2;
  if (!this->_internal_des_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_des_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameRequest::GetClassData() const { return &_class_data_; }

void RenameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenameRequest *>(to)->MergeFrom(
      static_cast<const RenameRequest &>(from));
}


void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src_path().empty()) {
    _internal_set_src_path(from._internal_src_path());
  }
  if (!from._internal_des_path().empty()) {
    _internal_set_des_path(from._internal_des_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_path_, lhs_arena,
      &other->src_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &des_path_, lhs_arena,
      &other->des_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[10]);
}

// ===================================================================

class RenameReply::_Internal {
 public:
};

RenameReply::RenameReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:RenameReply)
}
RenameReply::RenameReply(const RenameReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RenameReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RenameReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[11]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remote_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_file_path().empty()) {
    remote_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DeleteRequest)
}

inline void DeleteRequest::SharedCtor() {
remote_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remote_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:DeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  remote_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::ArenaDtor(void* object) {
  DeleteRequest* _this = reinterpret_cast< DeleteRequest* >(object);
  (void)_this;
}
void DeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string remote_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remote_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DeleteRequest.remote_file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_file_path().data(), static_cast<int>(this->_internal_remote_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeleteRequest.remote_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }

void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRequest *>(to)->MergeFrom(
      static_cast<const DeleteRequest &>(from));
}


void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_file_path().empty()) {
    _internal_set_remote_file_path(from._internal_remote_file_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_file_path_, lhs_arena,
      &other->remote_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[12]);
}

// ===================================================================

class DeleteReply::_Internal {
 public:
};

DeleteReply::DeleteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:DeleteReply)
}
DeleteReply::DeleteReply(const DeleteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeleteReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[13]);
}

// ===================================================================

class StatRequest::_Internal {
 public:
};

StatRequest::StatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatRequest)
}
StatRequest::StatRequest(const StatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StatRequest)
}

inline void StatRequest::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatRequest::~StatRequest() {
  // @@protoc_insertion_point(destructor:StatRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatRequest::ArenaDtor(void* object) {
  StatRequest* _this = reinterpret_cast< StatRequest* >(object);
  (void)_this;
}
void StatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StatRequest.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StatRequest.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatRequest)
  return target;
}

size_t StatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatRequest::GetClassData() const { return &_class_data_; }

void StatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatRequest *>(to)->MergeFrom(
      static_cast<const StatRequest &>(from));
}


void StatRequest::MergeFrom(const StatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatRequest::CopyFrom(const StatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatRequest::IsInitialized() const {
  return true;
}

void StatRequest::InternalSwap(StatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StatRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[14]);
}

// ===================================================================

class StatReply::_Internal {
 public:
};

StatReply::StatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StatReply)
}
StatReply::StatReply(const StatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&existed_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
  // @@protoc_insertion_point(copy_constructor:StatReply)
}

inline void StatReply::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&existed_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
}

StatReply::~StatReply() {
  // @@protoc_insertion_point(destructor:StatReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatReply::ArenaDtor(void* object) {
  StatReply* _this = reinterpret_cast< StatReply* >(object);
  (void)_this;
}
void StatReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:StatReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existed_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool existed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          existed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StatReply.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool existed = 1;
  if (this->_internal_existed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_existed(), target);
  }

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StatReply.file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_path(), target);
  }

  // uint64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatReply)
  return target;
}

size_t StatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // uint64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_file_size());
  }

  // bool existed = 1;
  if (this->_internal_existed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatReply::GetClassData() const { return &_class_data_; }

void StatReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatReply *>(to)->MergeFrom(
      static_cast<const StatReply &>(from));
}


void StatReply::MergeFrom(const StatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_existed() != 0) {
    _internal_set_existed(from._internal_existed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatReply::CopyFrom(const StatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReply::IsInitialized() const {
  return true;
}

void StatReply::InternalSwap(StatReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatReply, existed_)
      + sizeof(StatReply::existed_)
      - PROTOBUF_FIELD_OFFSET(StatReply, file_size_)>(
          reinterpret_cast<char*>(&file_size_),
          reinterpret_cast<char*>(&other->file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[15]);
}

// ===================================================================

class WriteChunkRequest::_Internal {
 public:
};

WriteChunkRequest::WriteChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WriteChunkRequest)
}
WriteChunkRequest::WriteChunkRequest(const WriteChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chunkhandle_, &from.chunkhandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:WriteChunkRequest)
}

inline void WriteChunkRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunkhandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
}

WriteChunkRequest::~WriteChunkRequest() {
  // @@protoc_insertion_point(destructor:WriteChunkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteChunkRequest::ArenaDtor(void* object) {
  WriteChunkRequest* _this = reinterpret_cast< WriteChunkRequest* >(object);
  (void)_this;
}
void WriteChunkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&chunkhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 chunkhandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chunkhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WriteChunkRequest.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_chunkhandle(), target);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  // string data = 4;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteChunkRequest.data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteChunkRequest)
  return target;
}

size_t WriteChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_chunkhandle());
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteChunkRequest::GetClassData() const { return &_class_data_; }

void WriteChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteChunkRequest *>(to)->MergeFrom(
      static_cast<const WriteChunkRequest &>(from));
}


void WriteChunkRequest::MergeFrom(const WriteChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_chunkhandle() != 0) {
    _internal_set_chunkhandle(from._internal_chunkhandle());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteChunkRequest::CopyFrom(const WriteChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkRequest::IsInitialized() const {
  return true;
}

void WriteChunkRequest::InternalSwap(WriteChunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteChunkRequest, length_)
      + sizeof(WriteChunkRequest::length_)
      - PROTOBUF_FIELD_OFFSET(WriteChunkRequest, chunkhandle_)>(
          reinterpret_cast<char*>(&chunkhandle_),
          reinterpret_cast<char*>(&other->chunkhandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteChunkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[16]);
}

// ===================================================================

class WriteChunkReply::_Internal {
 public:
};

WriteChunkReply::WriteChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WriteChunkReply)
}
WriteChunkReply::WriteChunkReply(const WriteChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes_write_ = from.bytes_write_;
  // @@protoc_insertion_point(copy_constructor:WriteChunkReply)
}

inline void WriteChunkReply::SharedCtor() {
bytes_write_ = int64_t{0};
}

WriteChunkReply::~WriteChunkReply() {
  // @@protoc_insertion_point(destructor:WriteChunkReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteChunkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteChunkReply::ArenaDtor(void* object) {
  WriteChunkReply* _this = reinterpret_cast< WriteChunkReply* >(object);
  (void)_this;
}
void WriteChunkReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteChunkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteChunkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_write_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteChunkReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bytes_write = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bytes_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteChunkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteChunkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_write = 1;
  if (this->_internal_bytes_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bytes_write(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteChunkReply)
  return target;
}

size_t WriteChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteChunkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bytes_write = 1;
  if (this->_internal_bytes_write() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_write());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteChunkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteChunkReply::GetClassData() const { return &_class_data_; }

void WriteChunkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteChunkReply *>(to)->MergeFrom(
      static_cast<const WriteChunkReply &>(from));
}


void WriteChunkReply::MergeFrom(const WriteChunkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bytes_write() != 0) {
    _internal_set_bytes_write(from._internal_bytes_write());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteChunkReply::CopyFrom(const WriteChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkReply::IsInitialized() const {
  return true;
}

void WriteChunkReply::InternalSwap(WriteChunkReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bytes_write_, other->bytes_write_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteChunkReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[17]);
}

// ===================================================================

class ReadChunkRequest::_Internal {
 public:
};

ReadChunkRequest::ReadChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ReadChunkRequest)
}
ReadChunkRequest::ReadChunkRequest(const ReadChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunkhandle_, &from.chunkhandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:ReadChunkRequest)
}

inline void ReadChunkRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunkhandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
}

ReadChunkRequest::~ReadChunkRequest() {
  // @@protoc_insertion_point(destructor:ReadChunkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadChunkRequest::ArenaDtor(void* object) {
  ReadChunkRequest* _this = reinterpret_cast< ReadChunkRequest* >(object);
  (void)_this;
}
void ReadChunkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunkhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 chunkhandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chunkhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_chunkhandle(), target);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadChunkRequest)
  return target;
}

size_t ReadChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_chunkhandle());
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadChunkRequest::GetClassData() const { return &_class_data_; }

void ReadChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadChunkRequest *>(to)->MergeFrom(
      static_cast<const ReadChunkRequest &>(from));
}


void ReadChunkRequest::MergeFrom(const ReadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chunkhandle() != 0) {
    _internal_set_chunkhandle(from._internal_chunkhandle());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadChunkRequest::CopyFrom(const ReadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkRequest::IsInitialized() const {
  return true;
}

void ReadChunkRequest::InternalSwap(ReadChunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadChunkRequest, length_)
      + sizeof(ReadChunkRequest::length_)
      - PROTOBUF_FIELD_OFFSET(ReadChunkRequest, chunkhandle_)>(
          reinterpret_cast<char*>(&chunkhandle_),
          reinterpret_cast<char*>(&other->chunkhandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadChunkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[18]);
}

// ===================================================================

class ReadChunkReply::_Internal {
 public:
};

ReadChunkReply::ReadChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ReadChunkReply)
}
ReadChunkReply::ReadChunkReply(const ReadChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  bytes_read_ = from.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:ReadChunkReply)
}

inline void ReadChunkReply::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bytes_read_ = int64_t{0};
}

ReadChunkReply::~ReadChunkReply() {
  // @@protoc_insertion_point(destructor:ReadChunkReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadChunkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadChunkReply::ArenaDtor(void* object) {
  ReadChunkReply* _this = reinterpret_cast< ReadChunkReply* >(object);
  (void)_this;
}
void ReadChunkReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadChunkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadChunkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  bytes_read_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadChunkReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ReadChunkReply.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadChunkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadChunkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ReadChunkReply.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadChunkReply)
  return target;
}

size_t ReadChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadChunkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_read());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadChunkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadChunkReply::GetClassData() const { return &_class_data_; }

void ReadChunkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadChunkReply *>(to)->MergeFrom(
      static_cast<const ReadChunkReply &>(from));
}


void ReadChunkReply::MergeFrom(const ReadChunkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_bytes_read() != 0) {
    _internal_set_bytes_read(from._internal_bytes_read());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadChunkReply::CopyFrom(const ReadChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkReply::IsInitialized() const {
  return true;
}

void ReadChunkReply::InternalSwap(ReadChunkReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(bytes_read_, other->bytes_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadChunkReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cli2ser_2eproto_getter, &descriptor_table_cli2ser_2eproto_once,
      file_level_metadata_cli2ser_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FindAddrRequest* Arena::CreateMaybeMessage< ::FindAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FindAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FindAddrReply_ReplicaAddrs* Arena::CreateMaybeMessage< ::FindAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FindAddrReply_ReplicaAddrs >(arena);
}
template<> PROTOBUF_NOINLINE ::FindAddrReply* Arena::CreateMaybeMessage< ::FindAddrReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FindAddrReply >(arena);
}
template<> PROTOBUF_NOINLINE ::GetWriteAddrRequest* Arena::CreateMaybeMessage< ::GetWriteAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetWriteAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetWriteAddrReply_ReplicaAddrs* Arena::CreateMaybeMessage< ::GetWriteAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetWriteAddrReply_ReplicaAddrs >(arena);
}
template<> PROTOBUF_NOINLINE ::GetWriteAddrReply* Arena::CreateMaybeMessage< ::GetWriteAddrReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetWriteAddrReply >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSubDirPathsRequest* Arena::CreateMaybeMessage< ::GetSubDirPathsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSubDirPathsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetSubDirPathsReply* Arena::CreateMaybeMessage< ::GetSubDirPathsReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetSubDirPathsReply >(arena);
}
template<> PROTOBUF_NOINLINE ::MkdirRequest* Arena::CreateMaybeMessage< ::MkdirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MkdirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MkdirReply* Arena::CreateMaybeMessage< ::MkdirReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MkdirReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RenameRequest* Arena::CreateMaybeMessage< ::RenameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RenameReply* Arena::CreateMaybeMessage< ::RenameReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenameReply >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteRequest* Arena::CreateMaybeMessage< ::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteReply* Arena::CreateMaybeMessage< ::DeleteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::StatRequest* Arena::CreateMaybeMessage< ::StatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StatReply* Arena::CreateMaybeMessage< ::StatReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatReply >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteChunkRequest* Arena::CreateMaybeMessage< ::WriteChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteChunkReply* Arena::CreateMaybeMessage< ::WriteChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WriteChunkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadChunkRequest* Arena::CreateMaybeMessage< ::ReadChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadChunkReply* Arena::CreateMaybeMessage< ::ReadChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReadChunkReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
