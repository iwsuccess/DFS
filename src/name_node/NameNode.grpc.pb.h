// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NameNode.proto
#ifndef GRPC_NameNode_2eproto__INCLUDED
#define GRPC_NameNode_2eproto__INCLUDED

#include "NameNode.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Rpc {

class Cli2Master final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.Cli2Master";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // client -> master rpcs
    // -------------------
    // FindAddr(): client send the filename, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::Rpc::FindAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    // for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::Rpc::GetWriteAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    // Stat(): client send the filename, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::Rpc::StatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    virtual ::grpc::Status Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::Rpc::RenameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::Rpc::DeleteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::Rpc::MkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::Rpc::GetSubDirNamesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>> AsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>>(AsyncGetSubDirNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>> PrepareAsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>>(PrepareAsyncGetSubDirNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::Rpc::RequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::Rpc::AppendEntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>* AsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>* PrepareAsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::Rpc::FindAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::Rpc::GetWriteAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    ::grpc::Status Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::Rpc::StatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    ::grpc::Status Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::Rpc::RenameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::Rpc::DeleteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::Rpc::MkdirReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    ::grpc::Status GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::Rpc::GetSubDirNamesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>> AsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>>(AsyncGetSubDirNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>> PrepareAsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>>(PrepareAsyncGetSubDirNamesRaw(context, request, cq));
    }
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::Rpc::RequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::Rpc::AppendEntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* AsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* PrepareAsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWriteAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_Stat_;
    const ::grpc::internal::RpcMethod rpcmethod_Rename_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubDirNames_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // client -> master rpcs
    // -------------------
    // FindAddr(): client send the filename, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response);
    // for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response);
    // Stat(): client send the filename, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response);
    virtual ::grpc::Status Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response);
    virtual ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response);
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response);
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response);
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FindAddr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAddr(::grpc::ServerContext* context, ::Rpc::FindAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::FindAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteAddr(::grpc::ServerContext* context, ::Rpc::GetWriteAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::GetWriteAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::Rpc::StatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::StatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rename() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::Rpc::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::RenameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::Rpc::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::DeleteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Mkdir() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::Rpc::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::MkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubDirNames(::grpc::ServerContext* context, ::Rpc::GetSubDirNamesRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::GetSubDirNamesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::Rpc::RequestVoteArgs* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::RequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::Rpc::AppendEntriesArgs* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::AppendEntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAddr<WithAsyncMethod_GetWriteAddr<WithAsyncMethod_Stat<WithAsyncMethod_Rename<WithAsyncMethod_Delete<WithAsyncMethod_Mkdir<WithAsyncMethod_GetSubDirNames<WithAsyncMethod_RequestVote<WithAsyncMethod_AppendEntries<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FindAddr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rename() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Mkdir() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FindAddr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>(std::bind(&WithStreamedUnaryMethod_FindAddr<BaseClass>::StreamedFindAddr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::FindAddrRequest,::Rpc::FindAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>(std::bind(&WithStreamedUnaryMethod_GetWriteAddr<BaseClass>::StreamedGetWriteAddr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWriteAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::GetWriteAddrRequest,::Rpc::GetWriteAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Stat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::StatRequest, ::Rpc::StatReply>(std::bind(&WithStreamedUnaryMethod_Stat<BaseClass>::StreamedStat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::StatRequest,::Rpc::StatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rename() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::RenameRequest, ::Rpc::RenameReply>(std::bind(&WithStreamedUnaryMethod_Rename<BaseClass>::StreamedRename, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::RenameRequest,::Rpc::RenameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::DeleteRequest, ::Rpc::DeleteReply>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::DeleteRequest,::Rpc::DeleteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Mkdir() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::MkdirRequest, ::Rpc::MkdirReply>(std::bind(&WithStreamedUnaryMethod_Mkdir<BaseClass>::StreamedMkdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::MkdirRequest,::Rpc::MkdirReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>(std::bind(&WithStreamedUnaryMethod_GetSubDirNames<BaseClass>::StreamedGetSubDirNames, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubDirNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::GetSubDirNamesRequest,::Rpc::GetSubDirNamesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>(std::bind(&WithStreamedUnaryMethod_RequestVote<BaseClass>::StreamedRequestVote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::RequestVoteArgs,::Rpc::RequestVoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>(std::bind(&WithStreamedUnaryMethod_AppendEntries<BaseClass>::StreamedAppendEntries, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::AppendEntriesArgs,::Rpc::AppendEntriesReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirNames<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirNames<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<Service > > > > > > > > > StreamedService;
};

class Cli2ChunkServer final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.Cli2ChunkServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::Rpc::ReadChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::Rpc::WriteChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::Rpc::ReadChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::Rpc::WriteChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response);
    virtual ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadChunk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadChunk(::grpc::ServerContext* context, ::Rpc::ReadChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::ReadChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WriteChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteChunk(::grpc::ServerContext* context, ::Rpc::WriteChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::WriteChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadChunk<WithAsyncMethod_WriteChunk<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadChunk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WriteChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadChunk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>(std::bind(&WithStreamedUnaryMethod_ReadChunk<BaseClass>::StreamedReadChunk, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::ReadChunkRequest,::Rpc::ReadChunkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WriteChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>(std::bind(&WithStreamedUnaryMethod_WriteChunk<BaseClass>::StreamedWriteChunk, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::WriteChunkRequest,::Rpc::WriteChunkReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<Service > > StreamedService;
};
// client -> chunk_server rpcs
// --------------------------

class DataNodeControlerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.DataNodeControlerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_CopyChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response);
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHeartbeat(::grpc::ServerContext* context, ::Rpc::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::HeartbeatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CopyChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunk(::grpc::ServerContext* context, ::Rpc::CopyChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::CopyChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckHeartbeat<WithAsyncMethod_CopyChunk<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CopyChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>(std::bind(&WithStreamedUnaryMethod_CheckHeartbeat<BaseClass>::StreamedCheckHeartbeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::HeartbeatRequest,::Rpc::HeartbeatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CopyChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>(std::bind(&WithStreamedUnaryMethod_CopyChunk<BaseClass>::StreamedCopyChunk, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopyChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::CopyChunkRequest,::Rpc::CopyChunkReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedService;
};

class ReportDataNodeSerivce final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.ReportDataNodeSerivce";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReportDataNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDataNode(::grpc::ServerContext* context, ::Rpc::ReportDataNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::ReportDataNodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportDataNode<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>(std::bind(&WithStreamedUnaryMethod_ReportDataNode<BaseClass>::StreamedReportDataNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportDataNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::ReportDataNodeRequest,::Rpc::ReportDataNodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedService;
};

}  // namespace Rpc


#endif  // GRPC_NameNode_2eproto__INCLUDED
