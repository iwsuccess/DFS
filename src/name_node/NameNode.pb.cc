// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameNode.proto

#include "NameNode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_NameNode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FindAddrReply_ReplicaAddrs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetWriteAddrReply_ReplicaAddrs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetWriteAddrRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeartbeatRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RenameRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NameNode_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LogEntry;
}  // namespace protobuf_NameNode_2eproto
namespace Rpc {
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry>
      _instance;
} _LogEntry_default_instance_;
class AppendEntriesArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesArgs>
      _instance;
} _AppendEntriesArgs_default_instance_;
class AppendEntriesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesReply>
      _instance;
} _AppendEntriesReply_default_instance_;
class RequestVoteArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteArgs>
      _instance;
} _RequestVoteArgs_default_instance_;
class RequestVoteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteReply>
      _instance;
} _RequestVoteReply_default_instance_;
class FindAddrRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindAddrRequest>
      _instance;
} _FindAddrRequest_default_instance_;
class FindAddrReply_ReplicaAddrsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindAddrReply_ReplicaAddrs>
      _instance;
} _FindAddrReply_ReplicaAddrs_default_instance_;
class FindAddrReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindAddrReply>
      _instance;
} _FindAddrReply_default_instance_;
class GetWriteAddrRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWriteAddrRequest>
      _instance;
} _GetWriteAddrRequest_default_instance_;
class GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWriteAddrReply_ReplicaAddrs>
      _instance;
} _GetWriteAddrReply_ReplicaAddrs_default_instance_;
class GetWriteAddrReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetWriteAddrReply>
      _instance;
} _GetWriteAddrReply_default_instance_;
class GetSubDirNamesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubDirNamesRequest>
      _instance;
} _GetSubDirNamesRequest_default_instance_;
class GetSubDirNamesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubDirNamesReply>
      _instance;
} _GetSubDirNamesReply_default_instance_;
class MkdirRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MkdirRequest>
      _instance;
} _MkdirRequest_default_instance_;
class MkdirReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MkdirReply>
      _instance;
} _MkdirReply_default_instance_;
class RenameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenameRequest>
      _instance;
} _RenameRequest_default_instance_;
class RenameReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenameReply>
      _instance;
} _RenameReply_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest>
      _instance;
} _DeleteRequest_default_instance_;
class DeleteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteReply>
      _instance;
} _DeleteReply_default_instance_;
class StatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatRequest>
      _instance;
} _StatRequest_default_instance_;
class StatReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatReply>
      _instance;
} _StatReply_default_instance_;
class WriteChunkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteChunkRequest>
      _instance;
} _WriteChunkRequest_default_instance_;
class WriteChunkReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteChunkReply>
      _instance;
} _WriteChunkReply_default_instance_;
class ReadChunkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadChunkRequest>
      _instance;
} _ReadChunkRequest_default_instance_;
class ReadChunkReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadChunkReply>
      _instance;
} _ReadChunkReply_default_instance_;
class DataNodeLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataNodeLocation>
      _instance;
} _DataNodeLocation_default_instance_;
class DataNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataNode>
      _instance;
} _DataNode_default_instance_;
class ChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chunk>
      _instance;
} _Chunk_default_instance_;
class ReportDataNodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportDataNodeRequest>
      _instance;
} _ReportDataNodeRequest_default_instance_;
class ReportDataNodeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportDataNodeReply>
      _instance;
} _ReportDataNodeReply_default_instance_;
class HeartbeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatRequest>
      _instance;
} _HeartbeatRequest_default_instance_;
class HeartbeatReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatReply>
      _instance;
} _HeartbeatReply_default_instance_;
class CopyChunkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CopyChunkRequest>
      _instance;
} _CopyChunkRequest_default_instance_;
class CopyChunkReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CopyChunkReply>
      _instance;
} _CopyChunkReply_default_instance_;
}  // namespace Rpc
namespace protobuf_NameNode_2eproto {
static void InitDefaultsLogEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_LogEntry_default_instance_;
    new (ptr) ::Rpc::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LogEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLogEntry}, {
      &protobuf_NameNode_2eproto::scc_info_GetWriteAddrRequest.base,
      &protobuf_NameNode_2eproto::scc_info_RenameRequest.base,
      &protobuf_NameNode_2eproto::scc_info_DeleteRequest.base,}};

static void InitDefaultsAppendEntriesArgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_AppendEntriesArgs_default_instance_;
    new (ptr) ::Rpc::AppendEntriesArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::AppendEntriesArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AppendEntriesArgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAppendEntriesArgs}, {
      &protobuf_NameNode_2eproto::scc_info_LogEntry.base,}};

static void InitDefaultsAppendEntriesReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_AppendEntriesReply_default_instance_;
    new (ptr) ::Rpc::AppendEntriesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::AppendEntriesReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesReply}, {}};

static void InitDefaultsRequestVoteArgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_RequestVoteArgs_default_instance_;
    new (ptr) ::Rpc::RequestVoteArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::RequestVoteArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteArgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteArgs}, {}};

static void InitDefaultsRequestVoteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_RequestVoteReply_default_instance_;
    new (ptr) ::Rpc::RequestVoteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::RequestVoteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteReply}, {}};

static void InitDefaultsFindAddrRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_FindAddrRequest_default_instance_;
    new (ptr) ::Rpc::FindAddrRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::FindAddrRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FindAddrRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFindAddrRequest}, {}};

static void InitDefaultsFindAddrReply_ReplicaAddrs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_FindAddrReply_ReplicaAddrs_default_instance_;
    new (ptr) ::Rpc::FindAddrReply_ReplicaAddrs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::FindAddrReply_ReplicaAddrs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FindAddrReply_ReplicaAddrs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFindAddrReply_ReplicaAddrs}, {}};

static void InitDefaultsFindAddrReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_FindAddrReply_default_instance_;
    new (ptr) ::Rpc::FindAddrReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::FindAddrReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FindAddrReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFindAddrReply}, {
      &protobuf_NameNode_2eproto::scc_info_FindAddrReply_ReplicaAddrs.base,}};

static void InitDefaultsGetWriteAddrRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_GetWriteAddrRequest_default_instance_;
    new (ptr) ::Rpc::GetWriteAddrRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::GetWriteAddrRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetWriteAddrRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetWriteAddrRequest}, {}};

static void InitDefaultsGetWriteAddrReply_ReplicaAddrs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_GetWriteAddrReply_ReplicaAddrs_default_instance_;
    new (ptr) ::Rpc::GetWriteAddrReply_ReplicaAddrs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::GetWriteAddrReply_ReplicaAddrs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetWriteAddrReply_ReplicaAddrs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetWriteAddrReply_ReplicaAddrs}, {}};

static void InitDefaultsGetWriteAddrReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_GetWriteAddrReply_default_instance_;
    new (ptr) ::Rpc::GetWriteAddrReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::GetWriteAddrReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetWriteAddrReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetWriteAddrReply}, {
      &protobuf_NameNode_2eproto::scc_info_GetWriteAddrReply_ReplicaAddrs.base,}};

static void InitDefaultsGetSubDirNamesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_GetSubDirNamesRequest_default_instance_;
    new (ptr) ::Rpc::GetSubDirNamesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::GetSubDirNamesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSubDirNamesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSubDirNamesRequest}, {}};

static void InitDefaultsGetSubDirNamesReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_GetSubDirNamesReply_default_instance_;
    new (ptr) ::Rpc::GetSubDirNamesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::GetSubDirNamesReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSubDirNamesReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSubDirNamesReply}, {}};

static void InitDefaultsMkdirRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_MkdirRequest_default_instance_;
    new (ptr) ::Rpc::MkdirRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::MkdirRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MkdirRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMkdirRequest}, {}};

static void InitDefaultsMkdirReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_MkdirReply_default_instance_;
    new (ptr) ::Rpc::MkdirReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::MkdirReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MkdirReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMkdirReply}, {}};

static void InitDefaultsRenameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_RenameRequest_default_instance_;
    new (ptr) ::Rpc::RenameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::RenameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RenameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRenameRequest}, {}};

static void InitDefaultsRenameReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_RenameReply_default_instance_;
    new (ptr) ::Rpc::RenameReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::RenameReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RenameReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRenameReply}, {}};

static void InitDefaultsDeleteRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_DeleteRequest_default_instance_;
    new (ptr) ::Rpc::DeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::DeleteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteRequest}, {}};

static void InitDefaultsDeleteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_DeleteReply_default_instance_;
    new (ptr) ::Rpc::DeleteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::DeleteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteReply}, {}};

static void InitDefaultsStatRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_StatRequest_default_instance_;
    new (ptr) ::Rpc::StatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::StatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatRequest}, {}};

static void InitDefaultsStatReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_StatReply_default_instance_;
    new (ptr) ::Rpc::StatReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::StatReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatReply}, {}};

static void InitDefaultsWriteChunkRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_WriteChunkRequest_default_instance_;
    new (ptr) ::Rpc::WriteChunkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::WriteChunkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteChunkRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteChunkRequest}, {}};

static void InitDefaultsWriteChunkReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_WriteChunkReply_default_instance_;
    new (ptr) ::Rpc::WriteChunkReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::WriteChunkReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteChunkReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteChunkReply}, {}};

static void InitDefaultsReadChunkRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_ReadChunkRequest_default_instance_;
    new (ptr) ::Rpc::ReadChunkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::ReadChunkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadChunkRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadChunkRequest}, {}};

static void InitDefaultsReadChunkReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_ReadChunkReply_default_instance_;
    new (ptr) ::Rpc::ReadChunkReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::ReadChunkReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadChunkReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadChunkReply}, {}};

static void InitDefaultsDataNodeLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_DataNodeLocation_default_instance_;
    new (ptr) ::Rpc::DataNodeLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::DataNodeLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataNodeLocation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataNodeLocation}, {}};

static void InitDefaultsDataNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_DataNode_default_instance_;
    new (ptr) ::Rpc::DataNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::DataNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataNode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataNode}, {}};

static void InitDefaultsChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_Chunk_default_instance_;
    new (ptr) ::Rpc::Chunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::Chunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Chunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunk}, {}};

static void InitDefaultsReportDataNodeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_ReportDataNodeRequest_default_instance_;
    new (ptr) ::Rpc::ReportDataNodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::ReportDataNodeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportDataNodeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportDataNodeRequest}, {}};

static void InitDefaultsReportDataNodeReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_ReportDataNodeReply_default_instance_;
    new (ptr) ::Rpc::ReportDataNodeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::ReportDataNodeReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportDataNodeReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportDataNodeReply}, {}};

static void InitDefaultsHeartbeatRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_HeartbeatRequest_default_instance_;
    new (ptr) ::Rpc::HeartbeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::HeartbeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartbeatRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartbeatRequest}, {}};

static void InitDefaultsHeartbeatReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_HeartbeatReply_default_instance_;
    new (ptr) ::Rpc::HeartbeatReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::HeartbeatReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartbeatReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartbeatReply}, {
      &protobuf_NameNode_2eproto::scc_info_HeartbeatRequest.base,}};

static void InitDefaultsCopyChunkRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_CopyChunkRequest_default_instance_;
    new (ptr) ::Rpc::CopyChunkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::CopyChunkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CopyChunkRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopyChunkRequest}, {}};

static void InitDefaultsCopyChunkReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rpc::_CopyChunkReply_default_instance_;
    new (ptr) ::Rpc::CopyChunkReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rpc::CopyChunkReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CopyChunkReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopyChunkReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesArgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteArgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindAddrRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindAddrReply_ReplicaAddrs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindAddrReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWriteAddrRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWriteAddrReply_ReplicaAddrs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetWriteAddrReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubDirNamesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubDirNamesReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MkdirRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MkdirReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenameReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteChunkRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteChunkReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadChunkRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadChunkReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataNodeLocation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataNode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportDataNodeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportDataNodeReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CopyChunkRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CopyChunkReply.base);
}

::google::protobuf::Metadata file_level_metadata[34];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, getw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, rename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, del_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, filepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, des_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::LogEntry, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, aterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, prevlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesArgs, leadercommit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesReply, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesReply, upnextindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::AppendEntriesReply, appendentriesstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteArgs, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteArgs, candidateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteArgs, lastlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteArgs, lastlogterm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RequestVoteReply, votegranted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrRequest, filepath_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrReply_ReplicaAddrs, ip_ports_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrReply, chunk_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::FindAddrReply, addrs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, remote_file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, write_data_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrReply_ReplicaAddrs, ip_ports_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrReply, chunk_handles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetWriteAddrReply, addrs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetSubDirNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetSubDirNamesRequest, file_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetSubDirNamesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::GetSubDirNamesReply, subdir_file_names_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::MkdirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::MkdirRequest, new_file_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::MkdirReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RenameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RenameRequest, src_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RenameRequest, des_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::RenameReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DeleteRequest, remote_file_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DeleteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatRequest, filepath_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatReply, existed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatReply, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::StatReply, file_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, chunkhandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, locations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::WriteChunkReply, bytes_read_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkRequest, chunkhandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkRequest, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkReply, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReadChunkReply, bytes_read_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNodeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNodeLocation, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNode, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNode, available_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::DataNode, stored_chunk_handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::Chunk, chunk_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::Chunk, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::Chunk, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, available_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, stored_chunk_handles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::ReportDataNodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::HeartbeatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::HeartbeatReply, request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::CopyChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::CopyChunkRequest, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::CopyChunkRequest, chunk_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rpc::CopyChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Rpc::LogEntry)},
  { 14, -1, sizeof(::Rpc::AppendEntriesArgs)},
  { 25, -1, sizeof(::Rpc::AppendEntriesReply)},
  { 34, -1, sizeof(::Rpc::RequestVoteArgs)},
  { 43, -1, sizeof(::Rpc::RequestVoteReply)},
  { 50, -1, sizeof(::Rpc::FindAddrRequest)},
  { 56, -1, sizeof(::Rpc::FindAddrReply_ReplicaAddrs)},
  { 62, -1, sizeof(::Rpc::FindAddrReply)},
  { 69, -1, sizeof(::Rpc::GetWriteAddrRequest)},
  { 76, -1, sizeof(::Rpc::GetWriteAddrReply_ReplicaAddrs)},
  { 82, -1, sizeof(::Rpc::GetWriteAddrReply)},
  { 89, -1, sizeof(::Rpc::GetSubDirNamesRequest)},
  { 95, -1, sizeof(::Rpc::GetSubDirNamesReply)},
  { 101, -1, sizeof(::Rpc::MkdirRequest)},
  { 107, -1, sizeof(::Rpc::MkdirReply)},
  { 112, -1, sizeof(::Rpc::RenameRequest)},
  { 119, -1, sizeof(::Rpc::RenameReply)},
  { 124, -1, sizeof(::Rpc::DeleteRequest)},
  { 130, -1, sizeof(::Rpc::DeleteReply)},
  { 135, -1, sizeof(::Rpc::StatRequest)},
  { 141, -1, sizeof(::Rpc::StatReply)},
  { 149, -1, sizeof(::Rpc::WriteChunkRequest)},
  { 160, -1, sizeof(::Rpc::WriteChunkReply)},
  { 166, -1, sizeof(::Rpc::ReadChunkRequest)},
  { 174, -1, sizeof(::Rpc::ReadChunkReply)},
  { 181, -1, sizeof(::Rpc::DataNodeLocation)},
  { 187, -1, sizeof(::Rpc::DataNode)},
  { 195, -1, sizeof(::Rpc::Chunk)},
  { 203, -1, sizeof(::Rpc::ReportDataNodeRequest)},
  { 211, -1, sizeof(::Rpc::ReportDataNodeReply)},
  { 216, -1, sizeof(::Rpc::HeartbeatRequest)},
  { 221, -1, sizeof(::Rpc::HeartbeatReply)},
  { 227, -1, sizeof(::Rpc::CopyChunkRequest)},
  { 234, -1, sizeof(::Rpc::CopyChunkReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_AppendEntriesArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_AppendEntriesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_RequestVoteArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_RequestVoteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_FindAddrRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_FindAddrReply_ReplicaAddrs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_FindAddrReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_GetWriteAddrRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_GetWriteAddrReply_ReplicaAddrs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_GetWriteAddrReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_GetSubDirNamesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_GetSubDirNamesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_MkdirRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_MkdirReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_RenameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_RenameReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_DeleteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_StatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_StatReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_WriteChunkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_WriteChunkReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_ReadChunkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_ReadChunkReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_DataNodeLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_DataNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_Chunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_ReportDataNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_ReportDataNodeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_HeartbeatReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_CopyChunkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Rpc::_CopyChunkReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NameNode.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 34);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016NameNode.proto\022\003Rpc\"\320\001\n\010LogEntry\022\014\n\004Te"
      "rm\030\001 \001(\005\022\017\n\007command\030\002 \001(\005\022&\n\004getw\030\003 \001(\0132"
      "\030.Rpc.GetWriteAddrRequest\022\"\n\006rename\030\004 \001("
      "\0132\022.Rpc.RenameRequest\022\037\n\003del\030\005 \001(\0132\022.Rpc"
      ".DeleteRequest\022\020\n\010filepath\030\006 \001(\t\022\013\n\003src\030"
      "\007 \001(\t\022\013\n\003des\030\010 \001(\t\022\014\n\004size\030\t \001(\003\"\225\001\n\021App"
      "endEntriesArgs\022\036\n\007Entries\030\001 \003(\0132\r.Rpc.Lo"
      "gEntry\022\r\n\005ATerm\030\002 \001(\005\022\020\n\010LeaderId\030\003 \001(\005\022"
      "\024\n\014PrevLogIndex\030\004 \001(\005\022\023\n\013PrevLogTerm\030\005 \001"
      "(\005\022\024\n\014LeaderCommit\030\006 \001(\005\"d\n\022AppendEntrie"
      "sReply\022\014\n\004Term\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\023\n"
      "\013UpNextIndex\030\003 \001(\005\022\032\n\022AppendEntriesState"
      "\030\004 \001(\005\"_\n\017RequestVoteArgs\022\014\n\004term\030\001 \001(\005\022"
      "\023\n\013candidateId\030\002 \001(\005\022\024\n\014lastLogindex\030\003 \001"
      "(\005\022\023\n\013lastLogterm\030\004 \001(\005\"5\n\020RequestVoteRe"
      "ply\022\014\n\004term\030\001 \001(\005\022\023\n\013votegranted\030\002 \001(\010\"#"
      "\n\017FindAddrRequest\022\020\n\010filepath\030\001 \001(\t\"x\n\rF"
      "indAddrReply\022\025\n\rchunk_handles\030\001 \003(\003\022.\n\005a"
      "ddrs\030\002 \003(\0132\037.Rpc.FindAddrReply.ReplicaAd"
      "drs\032 \n\014ReplicaAddrs\022\020\n\010ip_ports\030\001 \003(\t\"H\n"
      "\023GetWriteAddrRequest\022\030\n\020remote_file_path"
      "\030\001 \001(\t\022\027\n\017write_data_size\030\002 \001(\003\"\200\001\n\021GetW"
      "riteAddrReply\022\025\n\rchunk_handles\030\001 \003(\003\0222\n\005"
      "addrs\030\002 \003(\0132#.Rpc.GetWriteAddrReply.Repl"
      "icaAddrs\032 \n\014ReplicaAddrs\022\020\n\010ip_ports\030\001 \003"
      "(\t\"*\n\025GetSubDirNamesRequest\022\021\n\tfile_path"
      "\030\001 \001(\t\"0\n\023GetSubDirNamesReply\022\031\n\021subdir_"
      "file_names\030\001 \003(\t\"%\n\014MkdirRequest\022\025\n\rnew_"
      "file_path\030\001 \001(\t\"\014\n\nMkdirReply\"3\n\rRenameR"
      "equest\022\020\n\010src_path\030\001 \001(\t\022\020\n\010des_path\030\002 \001"
      "(\t\"\r\n\013RenameReply\")\n\rDeleteRequest\022\030\n\020re"
      "mote_file_path\030\001 \001(\t\"\r\n\013DeleteReply\"\037\n\013S"
      "tatRequest\022\020\n\010filepath\030\001 \001(\t\"B\n\tStatRepl"
      "y\022\017\n\007existed\030\001 \001(\010\022\021\n\tfile_name\030\002 \001(\t\022\021\n"
      "\tfile_size\030\003 \001(\004\"|\n\021WriteChunkRequest\022\021\n"
      "\tclient_id\030\001 \001(\003\022\023\n\013chunkhandle\030\002 \001(\003\022\016\n"
      "\006offset\030\003 \001(\003\022\016\n\006length\030\004 \001(\003\022\021\n\tlocatio"
      "ns\030\005 \003(\t\022\014\n\004data\030\006 \001(\t\"%\n\017WriteChunkRepl"
      "y\022\022\n\nbytes_read\030\002 \001(\003\"G\n\020ReadChunkReques"
      "t\022\023\n\013chunkhandle\030\001 \001(\003\022\016\n\006offset\030\002 \001(\003\022\016"
      "\n\006length\030\003 \001(\003\"2\n\016ReadChunkReply\022\014\n\004data"
      "\030\001 \001(\t\022\022\n\nbytes_read\030\002 \001(\003\"$\n\020DataNodeLo"
      "cation\022\020\n\010location\030\001 \001(\t\"R\n\010DataNode\022\020\n\010"
      "location\030\001 \001(\t\022\026\n\016available_size\030\002 \001(\r\022\034"
      "\n\024stored_chunk_handles\030\003 \003(\003\"=\n\005Chunk\022\024\n"
      "\014chunk_handle\030\001 \001(\003\022\020\n\010location\030\002 \003(\t\022\014\n"
      "\004size\030\003 \001(\003\"_\n\025ReportDataNodeRequest\022\020\n\010"
      "location\030\001 \001(\t\022\026\n\016available_size\030\002 \001(\r\022\034"
      "\n\024stored_chunk_handles\030\003 \003(\003\"\025\n\023ReportDa"
      "taNodeReply\"\022\n\020HeartbeatRequest\"8\n\016Heart"
      "beatReply\022&\n\007request\030\001 \001(\0132\025.Rpc.Heartbe"
      "atRequest\":\n\020CopyChunkRequest\022\020\n\010locatio"
      "n\030\001 \001(\t\022\024\n\014chunk_handle\030\002 \001(\003\"\020\n\016CopyChu"
      "nkReply2\223\004\n\nCli2Master\0226\n\010FindAddr\022\024.Rpc"
      ".FindAddrRequest\032\022.Rpc.FindAddrReply\"\000\022B"
      "\n\014GetWriteAddr\022\030.Rpc.GetWriteAddrRequest"
      "\032\026.Rpc.GetWriteAddrReply\"\000\022*\n\004Stat\022\020.Rpc"
      ".StatRequest\032\016.Rpc.StatReply\"\000\0220\n\006Rename"
      "\022\022.Rpc.RenameRequest\032\020.Rpc.RenameReply\"\000"
      "\0220\n\006Delete\022\022.Rpc.DeleteRequest\032\020.Rpc.Del"
      "eteReply\"\000\022-\n\005Mkdir\022\021.Rpc.MkdirRequest\032\017"
      ".Rpc.MkdirReply\"\000\022H\n\016GetSubDirNames\022\032.Rp"
      "c.GetSubDirNamesRequest\032\030.Rpc.GetSubDirN"
      "amesReply\"\000\022<\n\013RequestVote\022\024.Rpc.Request"
      "VoteArgs\032\025.Rpc.RequestVoteReply\"\000\022B\n\rApp"
      "endEntries\022\026.Rpc.AppendEntriesArgs\032\027.Rpc"
      ".AppendEntriesReply\"\0002\212\001\n\017Cli2ChunkServe"
      "r\0229\n\tReadChunk\022\025.Rpc.ReadChunkRequest\032\023."
      "Rpc.ReadChunkReply\"\000\022<\n\nWriteChunk\022\026.Rpc"
      ".WriteChunkRequest\032\024.Rpc.WriteChunkReply"
      "\"\0002\225\001\n\030DataNodeControlerService\022>\n\016Check"
      "Heartbeat\022\025.Rpc.HeartbeatRequest\032\023.Rpc.H"
      "eartbeatReply\"\000\0229\n\tCopyChunk\022\025.Rpc.CopyC"
      "hunkRequest\032\023.Rpc.CopyChunkReply\"\0002a\n\025Re"
      "portDataNodeSerivce\022H\n\016ReportDataNode\022\032."
      "Rpc.ReportDataNodeRequest\032\030.Rpc.ReportDa"
      "taNodeReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NameNode.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NameNode_2eproto
namespace Rpc {

// ===================================================================

void LogEntry::InitAsDefaultInstance() {
  ::Rpc::_LogEntry_default_instance_._instance.get_mutable()->getw_ = const_cast< ::Rpc::GetWriteAddrRequest*>(
      ::Rpc::GetWriteAddrRequest::internal_default_instance());
  ::Rpc::_LogEntry_default_instance_._instance.get_mutable()->rename_ = const_cast< ::Rpc::RenameRequest*>(
      ::Rpc::RenameRequest::internal_default_instance());
  ::Rpc::_LogEntry_default_instance_._instance.get_mutable()->del_ = const_cast< ::Rpc::DeleteRequest*>(
      ::Rpc::DeleteRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kTermFieldNumber;
const int LogEntry::kCommandFieldNumber;
const int LogEntry::kGetwFieldNumber;
const int LogEntry::kRenameFieldNumber;
const int LogEntry::kDelFieldNumber;
const int LogEntry::kFilepathFieldNumber;
const int LogEntry::kSrcFieldNumber;
const int LogEntry::kDesFieldNumber;
const int LogEntry::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_LogEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src().size() > 0) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  des_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.des().size() > 0) {
    des_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_);
  }
  if (from.has_getw()) {
    getw_ = new ::Rpc::GetWriteAddrRequest(*from.getw_);
  } else {
    getw_ = NULL;
  }
  if (from.has_rename()) {
    rename_ = new ::Rpc::RenameRequest(*from.rename_);
  } else {
    rename_ = NULL;
  }
  if (from.has_del()) {
    del_ = new ::Rpc::DeleteRequest(*from.del_);
  } else {
    del_ = NULL;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&term_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Rpc.LogEntry)
}

void LogEntry::SharedCtor() {
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&getw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&getw_)) + sizeof(size_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:Rpc.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete getw_;
  if (this != internal_default_instance()) delete rename_;
  if (this != internal_default_instance()) delete del_;
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_LogEntry.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && getw_ != NULL) {
    delete getw_;
  }
  getw_ = NULL;
  if (GetArenaNoVirtual() == NULL && rename_ != NULL) {
    delete rename_;
  }
  rename_ = NULL;
  if (GetArenaNoVirtual() == NULL && del_ != NULL) {
    delete del_;
  }
  del_ = NULL;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&term_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Rpc.GetWriteAddrRequest getw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_getw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Rpc.RenameRequest rename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Rpc.DeleteRequest del = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filepath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.LogEntry.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src().data(), static_cast<int>(this->src().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.LogEntry.src"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string des = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->des().data(), static_cast<int>(this->des().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.LogEntry.des"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // .Rpc.GetWriteAddrRequest getw = 3;
  if (this->has_getw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_getw(), output);
  }

  // .Rpc.RenameRequest rename = 4;
  if (this->has_rename()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rename(), output);
  }

  // .Rpc.DeleteRequest del = 5;
  if (this->has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_del(), output);
  }

  // string filepath = 6;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filepath(), output);
  }

  // string src = 7;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->src(), output);
  }

  // string des = 8;
  if (this->des().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des().data(), static_cast<int>(this->des().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.des");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->des(), output);
  }

  // int64 size = 9;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command(), target);
  }

  // .Rpc.GetWriteAddrRequest getw = 3;
  if (this->has_getw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_getw(), deterministic, target);
  }

  // .Rpc.RenameRequest rename = 4;
  if (this->has_rename()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rename(), deterministic, target);
  }

  // .Rpc.DeleteRequest del = 5;
  if (this->has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_del(), deterministic, target);
  }

  // string filepath = 6;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filepath(), target);
  }

  // string src = 7;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), static_cast<int>(this->src().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->src(), target);
  }

  // string des = 8;
  if (this->des().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des().data(), static_cast<int>(this->des().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.des");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->des(), target);
  }

  // int64 size = 9;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.LogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filepath = 6;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // string src = 7;
  if (this->src().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  // string des = 8;
  if (this->des().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->des());
  }

  // .Rpc.GetWriteAddrRequest getw = 3;
  if (this->has_getw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *getw_);
  }

  // .Rpc.RenameRequest rename = 4;
  if (this->has_rename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rename_);
  }

  // .Rpc.DeleteRequest del = 5;
  if (this->has_del()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *del_);
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  // int64 size = 9;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.src().size() > 0) {

    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  if (from.des().size() > 0) {

    des_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_);
  }
  if (from.has_getw()) {
    mutable_getw()->::Rpc::GetWriteAddrRequest::MergeFrom(from.getw());
  }
  if (from.has_rename()) {
    mutable_rename()->::Rpc::RenameRequest::MergeFrom(from.rename());
  }
  if (from.has_del()) {
    mutable_del()->::Rpc::DeleteRequest::MergeFrom(from.del());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  filepath_.Swap(&other->filepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_.Swap(&other->src_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_.Swap(&other->des_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(getw_, other->getw_);
  swap(rename_, other->rename_);
  swap(del_, other->del_);
  swap(term_, other->term_);
  swap(command_, other->command_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesArgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesArgs::kEntriesFieldNumber;
const int AppendEntriesArgs::kATermFieldNumber;
const int AppendEntriesArgs::kLeaderIdFieldNumber;
const int AppendEntriesArgs::kPrevLogIndexFieldNumber;
const int AppendEntriesArgs::kPrevLogTermFieldNumber;
const int AppendEntriesArgs::kLeaderCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesArgs::AppendEntriesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_AppendEntriesArgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&aterm_, &from.aterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&aterm_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:Rpc.AppendEntriesArgs)
}

void AppendEntriesArgs::SharedCtor() {
  ::memset(&aterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&aterm_)) + sizeof(leadercommit_));
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:Rpc.AppendEntriesArgs)
  SharedDtor();
}

void AppendEntriesArgs::SharedDtor() {
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesArgs::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesArgs& AppendEntriesArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_AppendEntriesArgs.base);
  return *internal_default_instance();
}


void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&aterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&aterm_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear();
}

bool AppendEntriesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.AppendEntriesArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Rpc.LogEntry Entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ATerm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogTerm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderCommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.AppendEntriesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.AppendEntriesArgs)
  return false;
#undef DO_
}

void AppendEntriesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Rpc.LogEntry Entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  // int32 ATerm = 2;
  if (this->aterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->aterm(), output);
  }

  // int32 LeaderId = 3;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderid(), output);
  }

  // int32 PrevLogIndex = 4;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevlogindex(), output);
  }

  // int32 PrevLogTerm = 5;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prevlogterm(), output);
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leadercommit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.AppendEntriesArgs)
}

::google::protobuf::uint8* AppendEntriesArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Rpc.LogEntry Entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // int32 ATerm = 2;
  if (this->aterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->aterm(), target);
  }

  // int32 LeaderId = 3;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leaderid(), target);
  }

  // int32 PrevLogIndex = 4;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevlogindex(), target);
  }

  // int32 PrevLogTerm = 5;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prevlogterm(), target);
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leadercommit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.AppendEntriesArgs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Rpc.LogEntry Entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // int32 ATerm = 2;
  if (this->aterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aterm());
  }

  // int32 LeaderId = 3;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 PrevLogIndex = 4;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogindex());
  }

  // int32 PrevLogTerm = 5;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leadercommit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.AppendEntriesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.AppendEntriesArgs)
    MergeFrom(*source);
  }
}

void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.aterm() != 0) {
    set_aterm(from.aterm());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
}

void AppendEntriesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::Swap(AppendEntriesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(aterm_, other->aterm_);
  swap(leaderid_, other->leaderid_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesArgs::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesReply::kTermFieldNumber;
const int AppendEntriesReply::kSuccessFieldNumber;
const int AppendEntriesReply::kUpNextIndexFieldNumber;
const int AppendEntriesReply::kAppendEntriesStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesReply::AppendEntriesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_AppendEntriesReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&appendentriesstate_) -
    reinterpret_cast<char*>(&term_)) + sizeof(appendentriesstate_));
  // @@protoc_insertion_point(copy_constructor:Rpc.AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appendentriesstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appendentriesstate_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:Rpc.AppendEntriesReply)
  SharedDtor();
}

void AppendEntriesReply::SharedDtor() {
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesReply& AppendEntriesReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_AppendEntriesReply.base);
  return *internal_default_instance();
}


void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&appendentriesstate_) -
      reinterpret_cast<char*>(&term_)) + sizeof(appendentriesstate_));
  _internal_metadata_.Clear();
}

bool AppendEntriesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.AppendEntriesReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UpNextIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upnextindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AppendEntriesState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appendentriesstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.AppendEntriesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.AppendEntriesReply)
  return false;
#undef DO_
}

void AppendEntriesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // int32 UpNextIndex = 3;
  if (this->upnextindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upnextindex(), output);
  }

  // int32 AppendEntriesState = 4;
  if (this->appendentriesstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->appendentriesstate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.AppendEntriesReply)
}

::google::protobuf::uint8* AppendEntriesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // int32 UpNextIndex = 3;
  if (this->upnextindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upnextindex(), target);
  }

  // int32 AppendEntriesState = 4;
  if (this->appendentriesstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->appendentriesstate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.AppendEntriesReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool Success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 UpNextIndex = 3;
  if (this->upnextindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upnextindex());
  }

  // int32 AppendEntriesState = 4;
  if (this->appendentriesstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->appendentriesstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.AppendEntriesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.upnextindex() != 0) {
    set_upnextindex(from.upnextindex());
  }
  if (from.appendentriesstate() != 0) {
    set_appendentriesstate(from.appendentriesstate());
  }
}

void AppendEntriesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::Swap(AppendEntriesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(upnextindex_, other->upnextindex_);
  swap(appendentriesstate_, other->appendentriesstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteArgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteArgs::kTermFieldNumber;
const int RequestVoteArgs::kCandidateIdFieldNumber;
const int RequestVoteArgs::kLastLogindexFieldNumber;
const int RequestVoteArgs::kLastLogtermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteArgs::RequestVoteArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_RequestVoteArgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:Rpc.RequestVoteArgs)
}

void RequestVoteArgs::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:Rpc.RequestVoteArgs)
  SharedDtor();
}

void RequestVoteArgs::SharedDtor() {
}

void RequestVoteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteArgs::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteArgs& RequestVoteArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_RequestVoteArgs.base);
  return *internal_default_instance();
}


void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

bool RequestVoteArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.RequestVoteArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 candidateId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastLogindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastLogterm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.RequestVoteArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.RequestVoteArgs)
  return false;
#undef DO_
}

void RequestVoteArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 candidateId = 2;
  if (this->candidateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidateid(), output);
  }

  // int32 lastLogindex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogindex(), output);
  }

  // int32 lastLogterm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastlogterm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.RequestVoteArgs)
}

::google::protobuf::uint8* RequestVoteArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 candidateId = 2;
  if (this->candidateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidateid(), target);
  }

  // int32 lastLogindex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogindex(), target);
  }

  // int32 lastLogterm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastlogterm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RequestVoteArgs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 candidateId = 2;
  if (this->candidateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidateid());
  }

  // int32 lastLogindex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogindex());
  }

  // int32 lastLogterm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.RequestVoteArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.RequestVoteArgs)
    MergeFrom(*source);
  }
}

void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidateid() != 0) {
    set_candidateid(from.candidateid());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::Swap(RequestVoteArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(candidateid_, other->candidateid_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteArgs::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteReply::kTermFieldNumber;
const int RequestVoteReply::kVotegrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteReply::RequestVoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_RequestVoteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:Rpc.RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:Rpc.RequestVoteReply)
  SharedDtor();
}

void RequestVoteReply::SharedDtor() {
}

void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteReply& RequestVoteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_RequestVoteReply.base);
  return *internal_default_instance();
}


void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear();
}

bool RequestVoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.RequestVoteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool votegranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.RequestVoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.RequestVoteReply)
  return false;
#undef DO_
}

void RequestVoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool votegranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.RequestVoteReply)
}

::google::protobuf::uint8* RequestVoteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool votegranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RequestVoteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool votegranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.RequestVoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
}

void RequestVoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::Swap(RequestVoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FindAddrRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindAddrRequest::kFilepathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindAddrRequest::FindAddrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_FindAddrRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.FindAddrRequest)
}
FindAddrRequest::FindAddrRequest(const FindAddrRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrRequest)
}

void FindAddrRequest::SharedCtor() {
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FindAddrRequest::~FindAddrRequest() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrRequest)
  SharedDtor();
}

void FindAddrRequest::SharedDtor() {
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FindAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FindAddrRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindAddrRequest& FindAddrRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_FindAddrRequest.base);
  return *internal_default_instance();
}


void FindAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FindAddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.FindAddrRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filepath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.FindAddrRequest.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.FindAddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.FindAddrRequest)
  return false;
#undef DO_
}

void FindAddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.FindAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrRequest.filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filepath(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.FindAddrRequest)
}

::google::protobuf::uint8* FindAddrRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrRequest.filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filepath(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrRequest)
  return target;
}

size_t FindAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filepath = 1;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindAddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.FindAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindAddrRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindAddrRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.FindAddrRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.FindAddrRequest)
    MergeFrom(*source);
  }
}

void FindAddrRequest::MergeFrom(const FindAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
}

void FindAddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.FindAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindAddrRequest::CopyFrom(const FindAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrRequest::IsInitialized() const {
  return true;
}

void FindAddrRequest::Swap(FindAddrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindAddrRequest::InternalSwap(FindAddrRequest* other) {
  using std::swap;
  filepath_.Swap(&other->filepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FindAddrRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FindAddrReply_ReplicaAddrs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindAddrReply_ReplicaAddrs::kIpPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_FindAddrReply_ReplicaAddrs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.FindAddrReply.ReplicaAddrs)
}
FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(const FindAddrReply_ReplicaAddrs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ip_ports_(from.ip_ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrReply.ReplicaAddrs)
}

void FindAddrReply_ReplicaAddrs::SharedCtor() {
}

FindAddrReply_ReplicaAddrs::~FindAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrReply.ReplicaAddrs)
  SharedDtor();
}

void FindAddrReply_ReplicaAddrs::SharedDtor() {
}

void FindAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FindAddrReply_ReplicaAddrs::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindAddrReply_ReplicaAddrs& FindAddrReply_ReplicaAddrs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_FindAddrReply_ReplicaAddrs.base);
  return *internal_default_instance();
}


void FindAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_ports_.Clear();
  _internal_metadata_.Clear();
}

bool FindAddrReply_ReplicaAddrs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.FindAddrReply.ReplicaAddrs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ip_ports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_ports()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_ports(this->ip_ports_size() - 1).data(),
            static_cast<int>(this->ip_ports(this->ip_ports_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.FindAddrReply.ReplicaAddrs.ip_ports"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.FindAddrReply.ReplicaAddrs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.FindAddrReply.ReplicaAddrs)
  return false;
#undef DO_
}

void FindAddrReply_ReplicaAddrs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.FindAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ports(i).data(), static_cast<int>(this->ip_ports(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrReply.ReplicaAddrs.ip_ports");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip_ports(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.FindAddrReply.ReplicaAddrs)
}

::google::protobuf::uint8* FindAddrReply_ReplicaAddrs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ports(i).data(), static_cast<int>(this->ip_ports(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrReply.ReplicaAddrs.ip_ports");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip_ports(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrReply.ReplicaAddrs)
  return target;
}

size_t FindAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ip_ports = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_ports_size());
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_ports(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindAddrReply_ReplicaAddrs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  const FindAddrReply_ReplicaAddrs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindAddrReply_ReplicaAddrs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.FindAddrReply.ReplicaAddrs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.FindAddrReply.ReplicaAddrs)
    MergeFrom(*source);
  }
}

void FindAddrReply_ReplicaAddrs::MergeFrom(const FindAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_ports_.MergeFrom(from.ip_ports_);
}

void FindAddrReply_ReplicaAddrs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindAddrReply_ReplicaAddrs::CopyFrom(const FindAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void FindAddrReply_ReplicaAddrs::Swap(FindAddrReply_ReplicaAddrs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindAddrReply_ReplicaAddrs::InternalSwap(FindAddrReply_ReplicaAddrs* other) {
  using std::swap;
  ip_ports_.InternalSwap(CastToBase(&other->ip_ports_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FindAddrReply_ReplicaAddrs::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FindAddrReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindAddrReply::kChunkHandlesFieldNumber;
const int FindAddrReply::kAddrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindAddrReply::FindAddrReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_FindAddrReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.FindAddrReply)
}
FindAddrReply::FindAddrReply(const FindAddrReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_handles_(from.chunk_handles_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrReply)
}

void FindAddrReply::SharedCtor() {
}

FindAddrReply::~FindAddrReply() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrReply)
  SharedDtor();
}

void FindAddrReply::SharedDtor() {
}

void FindAddrReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FindAddrReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindAddrReply& FindAddrReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_FindAddrReply.base);
  return *internal_default_instance();
}


void FindAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_handles_.Clear();
  addrs_.Clear();
  _internal_metadata_.Clear();
}

bool FindAddrReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.FindAddrReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 chunk_handles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_chunk_handles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_chunk_handles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.FindAddrReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.FindAddrReply)
  return false;
#undef DO_
}

void FindAddrReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.FindAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  if (this->chunk_handles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _chunk_handles_cached_byte_size_));
  }
  for (int i = 0, n = this->chunk_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->chunk_handles(i), output);
  }

  // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->addrs(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.FindAddrReply)
}

::google::protobuf::uint8* FindAddrReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  if (this->chunk_handles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _chunk_handles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->chunk_handles_, target);
  }

  // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addrs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrReply)
  return target;
}

size_t FindAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_handles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addrs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindAddrReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.FindAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  const FindAddrReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindAddrReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.FindAddrReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.FindAddrReply)
    MergeFrom(*source);
  }
}

void FindAddrReply::MergeFrom(const FindAddrReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_handles_.MergeFrom(from.chunk_handles_);
  addrs_.MergeFrom(from.addrs_);
}

void FindAddrReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.FindAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindAddrReply::CopyFrom(const FindAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply::IsInitialized() const {
  return true;
}

void FindAddrReply::Swap(FindAddrReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindAddrReply::InternalSwap(FindAddrReply* other) {
  using std::swap;
  chunk_handles_.InternalSwap(&other->chunk_handles_);
  CastToBase(&addrs_)->InternalSwap(CastToBase(&other->addrs_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FindAddrReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWriteAddrRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWriteAddrRequest::kRemoteFilePathFieldNumber;
const int GetWriteAddrRequest::kWriteDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWriteAddrRequest::GetWriteAddrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_GetWriteAddrRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.GetWriteAddrRequest)
}
GetWriteAddrRequest::GetWriteAddrRequest(const GetWriteAddrRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_file_path().size() > 0) {
    remote_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_file_path_);
  }
  write_data_size_ = from.write_data_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrRequest)
}

void GetWriteAddrRequest::SharedCtor() {
  remote_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_data_size_ = GOOGLE_LONGLONG(0);
}

GetWriteAddrRequest::~GetWriteAddrRequest() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrRequest)
  SharedDtor();
}

void GetWriteAddrRequest::SharedDtor() {
  remote_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetWriteAddrRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWriteAddrRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWriteAddrRequest& GetWriteAddrRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_GetWriteAddrRequest.base);
  return *internal_default_instance();
}


void GetWriteAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_data_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetWriteAddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.GetWriteAddrRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string remote_file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.GetWriteAddrRequest.remote_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 write_data_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &write_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.GetWriteAddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.GetWriteAddrRequest)
  return false;
#undef DO_
}

void GetWriteAddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.GetWriteAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrRequest.remote_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_file_path(), output);
  }

  // int64 write_data_size = 2;
  if (this->write_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->write_data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.GetWriteAddrRequest)
}

::google::protobuf::uint8* GetWriteAddrRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrRequest.remote_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_file_path(), target);
  }

  // int64 write_data_size = 2;
  if (this->write_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->write_data_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrRequest)
  return target;
}

size_t GetWriteAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_file_path());
  }

  // int64 write_data_size = 2;
  if (this->write_data_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->write_data_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWriteAddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.GetWriteAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWriteAddrRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWriteAddrRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.GetWriteAddrRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.GetWriteAddrRequest)
    MergeFrom(*source);
  }
}

void GetWriteAddrRequest::MergeFrom(const GetWriteAddrRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_file_path().size() > 0) {

    remote_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_file_path_);
  }
  if (from.write_data_size() != 0) {
    set_write_data_size(from.write_data_size());
  }
}

void GetWriteAddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.GetWriteAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteAddrRequest::CopyFrom(const GetWriteAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrRequest::IsInitialized() const {
  return true;
}

void GetWriteAddrRequest::Swap(GetWriteAddrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWriteAddrRequest::InternalSwap(GetWriteAddrRequest* other) {
  using std::swap;
  remote_file_path_.Swap(&other->remote_file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(write_data_size_, other->write_data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWriteAddrRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWriteAddrReply_ReplicaAddrs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWriteAddrReply_ReplicaAddrs::kIpPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_GetWriteAddrReply_ReplicaAddrs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
}
GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(const GetWriteAddrReply_ReplicaAddrs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ip_ports_(from.ip_ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
}

void GetWriteAddrReply_ReplicaAddrs::SharedCtor() {
}

GetWriteAddrReply_ReplicaAddrs::~GetWriteAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
  SharedDtor();
}

void GetWriteAddrReply_ReplicaAddrs::SharedDtor() {
}

void GetWriteAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWriteAddrReply_ReplicaAddrs::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWriteAddrReply_ReplicaAddrs& GetWriteAddrReply_ReplicaAddrs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_GetWriteAddrReply_ReplicaAddrs.base);
  return *internal_default_instance();
}


void GetWriteAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_ports_.Clear();
  _internal_metadata_.Clear();
}

bool GetWriteAddrReply_ReplicaAddrs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ip_ports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_ports()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_ports(this->ip_ports_size() - 1).data(),
            static_cast<int>(this->ip_ports(this->ip_ports_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.GetWriteAddrReply.ReplicaAddrs.ip_ports"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.GetWriteAddrReply.ReplicaAddrs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.GetWriteAddrReply.ReplicaAddrs)
  return false;
#undef DO_
}

void GetWriteAddrReply_ReplicaAddrs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ports(i).data(), static_cast<int>(this->ip_ports(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrReply.ReplicaAddrs.ip_ports");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip_ports(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.GetWriteAddrReply.ReplicaAddrs)
}

::google::protobuf::uint8* GetWriteAddrReply_ReplicaAddrs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ports(i).data(), static_cast<int>(this->ip_ports(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrReply.ReplicaAddrs.ip_ports");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip_ports(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrReply.ReplicaAddrs)
  return target;
}

size_t GetWriteAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ip_ports = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_ports_size());
  for (int i = 0, n = this->ip_ports_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_ports(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWriteAddrReply_ReplicaAddrs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWriteAddrReply_ReplicaAddrs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWriteAddrReply_ReplicaAddrs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.GetWriteAddrReply.ReplicaAddrs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.GetWriteAddrReply.ReplicaAddrs)
    MergeFrom(*source);
  }
}

void GetWriteAddrReply_ReplicaAddrs::MergeFrom(const GetWriteAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_ports_.MergeFrom(from.ip_ports_);
}

void GetWriteAddrReply_ReplicaAddrs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteAddrReply_ReplicaAddrs::CopyFrom(const GetWriteAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void GetWriteAddrReply_ReplicaAddrs::Swap(GetWriteAddrReply_ReplicaAddrs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWriteAddrReply_ReplicaAddrs::InternalSwap(GetWriteAddrReply_ReplicaAddrs* other) {
  using std::swap;
  ip_ports_.InternalSwap(CastToBase(&other->ip_ports_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWriteAddrReply_ReplicaAddrs::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetWriteAddrReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWriteAddrReply::kChunkHandlesFieldNumber;
const int GetWriteAddrReply::kAddrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWriteAddrReply::GetWriteAddrReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_GetWriteAddrReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.GetWriteAddrReply)
}
GetWriteAddrReply::GetWriteAddrReply(const GetWriteAddrReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_handles_(from.chunk_handles_),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrReply)
}

void GetWriteAddrReply::SharedCtor() {
}

GetWriteAddrReply::~GetWriteAddrReply() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrReply)
  SharedDtor();
}

void GetWriteAddrReply::SharedDtor() {
}

void GetWriteAddrReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetWriteAddrReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetWriteAddrReply& GetWriteAddrReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_GetWriteAddrReply.base);
  return *internal_default_instance();
}


void GetWriteAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_handles_.Clear();
  addrs_.Clear();
  _internal_metadata_.Clear();
}

bool GetWriteAddrReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.GetWriteAddrReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 chunk_handles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_chunk_handles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_chunk_handles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.GetWriteAddrReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.GetWriteAddrReply)
  return false;
#undef DO_
}

void GetWriteAddrReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.GetWriteAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  if (this->chunk_handles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _chunk_handles_cached_byte_size_));
  }
  for (int i = 0, n = this->chunk_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->chunk_handles(i), output);
  }

  // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->addrs(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.GetWriteAddrReply)
}

::google::protobuf::uint8* GetWriteAddrReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  if (this->chunk_handles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _chunk_handles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->chunk_handles_, target);
  }

  // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addrs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addrs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrReply)
  return target;
}

size_t GetWriteAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_handles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addrs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetWriteAddrReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.GetWriteAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetWriteAddrReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWriteAddrReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.GetWriteAddrReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.GetWriteAddrReply)
    MergeFrom(*source);
  }
}

void GetWriteAddrReply::MergeFrom(const GetWriteAddrReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_handles_.MergeFrom(from.chunk_handles_);
  addrs_.MergeFrom(from.addrs_);
}

void GetWriteAddrReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.GetWriteAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteAddrReply::CopyFrom(const GetWriteAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply::IsInitialized() const {
  return true;
}

void GetWriteAddrReply::Swap(GetWriteAddrReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWriteAddrReply::InternalSwap(GetWriteAddrReply* other) {
  using std::swap;
  chunk_handles_.InternalSwap(&other->chunk_handles_);
  CastToBase(&addrs_)->InternalSwap(CastToBase(&other->addrs_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetWriteAddrReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubDirNamesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubDirNamesRequest::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubDirNamesRequest::GetSubDirNamesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_GetSubDirNamesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.GetSubDirNamesRequest)
}
GetSubDirNamesRequest::GetSubDirNamesRequest(const GetSubDirNamesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.GetSubDirNamesRequest)
}

void GetSubDirNamesRequest::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetSubDirNamesRequest::~GetSubDirNamesRequest() {
  // @@protoc_insertion_point(destructor:Rpc.GetSubDirNamesRequest)
  SharedDtor();
}

void GetSubDirNamesRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSubDirNamesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubDirNamesRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubDirNamesRequest& GetSubDirNamesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_GetSubDirNamesRequest.base);
  return *internal_default_instance();
}


void GetSubDirNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetSubDirNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetSubDirNamesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.GetSubDirNamesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.GetSubDirNamesRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.GetSubDirNamesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.GetSubDirNamesRequest)
  return false;
#undef DO_
}

void GetSubDirNamesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.GetSubDirNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesRequest.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.GetSubDirNamesRequest)
}

::google::protobuf::uint8* GetSubDirNamesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetSubDirNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesRequest.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetSubDirNamesRequest)
  return target;
}

size_t GetSubDirNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetSubDirNamesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubDirNamesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.GetSubDirNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubDirNamesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubDirNamesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.GetSubDirNamesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.GetSubDirNamesRequest)
    MergeFrom(*source);
  }
}

void GetSubDirNamesRequest::MergeFrom(const GetSubDirNamesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetSubDirNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetSubDirNamesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.GetSubDirNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubDirNamesRequest::CopyFrom(const GetSubDirNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetSubDirNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirNamesRequest::IsInitialized() const {
  return true;
}

void GetSubDirNamesRequest::Swap(GetSubDirNamesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubDirNamesRequest::InternalSwap(GetSubDirNamesRequest* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubDirNamesRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubDirNamesReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubDirNamesReply::kSubdirFileNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubDirNamesReply::GetSubDirNamesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_GetSubDirNamesReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.GetSubDirNamesReply)
}
GetSubDirNamesReply::GetSubDirNamesReply(const GetSubDirNamesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subdir_file_names_(from.subdir_file_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetSubDirNamesReply)
}

void GetSubDirNamesReply::SharedCtor() {
}

GetSubDirNamesReply::~GetSubDirNamesReply() {
  // @@protoc_insertion_point(destructor:Rpc.GetSubDirNamesReply)
  SharedDtor();
}

void GetSubDirNamesReply::SharedDtor() {
}

void GetSubDirNamesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSubDirNamesReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubDirNamesReply& GetSubDirNamesReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_GetSubDirNamesReply.base);
  return *internal_default_instance();
}


void GetSubDirNamesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetSubDirNamesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subdir_file_names_.Clear();
  _internal_metadata_.Clear();
}

bool GetSubDirNamesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.GetSubDirNamesReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string subdir_file_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subdir_file_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subdir_file_names(this->subdir_file_names_size() - 1).data(),
            static_cast<int>(this->subdir_file_names(this->subdir_file_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.GetSubDirNamesReply.subdir_file_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.GetSubDirNamesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.GetSubDirNamesReply)
  return false;
#undef DO_
}

void GetSubDirNamesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.GetSubDirNamesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subdir_file_names = 1;
  for (int i = 0, n = this->subdir_file_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subdir_file_names(i).data(), static_cast<int>(this->subdir_file_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesReply.subdir_file_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subdir_file_names(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.GetSubDirNamesReply)
}

::google::protobuf::uint8* GetSubDirNamesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetSubDirNamesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subdir_file_names = 1;
  for (int i = 0, n = this->subdir_file_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subdir_file_names(i).data(), static_cast<int>(this->subdir_file_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesReply.subdir_file_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->subdir_file_names(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetSubDirNamesReply)
  return target;
}

size_t GetSubDirNamesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetSubDirNamesReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string subdir_file_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subdir_file_names_size());
  for (int i = 0, n = this->subdir_file_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subdir_file_names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubDirNamesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.GetSubDirNamesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubDirNamesReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubDirNamesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.GetSubDirNamesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.GetSubDirNamesReply)
    MergeFrom(*source);
  }
}

void GetSubDirNamesReply::MergeFrom(const GetSubDirNamesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetSubDirNamesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subdir_file_names_.MergeFrom(from.subdir_file_names_);
}

void GetSubDirNamesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.GetSubDirNamesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubDirNamesReply::CopyFrom(const GetSubDirNamesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetSubDirNamesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirNamesReply::IsInitialized() const {
  return true;
}

void GetSubDirNamesReply::Swap(GetSubDirNamesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSubDirNamesReply::InternalSwap(GetSubDirNamesReply* other) {
  using std::swap;
  subdir_file_names_.InternalSwap(CastToBase(&other->subdir_file_names_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSubDirNamesReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MkdirRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MkdirRequest::kNewFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MkdirRequest::MkdirRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_MkdirRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.MkdirRequest)
}
MkdirRequest::MkdirRequest(const MkdirRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_file_path().size() > 0) {
    new_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_file_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.MkdirRequest)
}

void MkdirRequest::SharedCtor() {
  new_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MkdirRequest::~MkdirRequest() {
  // @@protoc_insertion_point(destructor:Rpc.MkdirRequest)
  SharedDtor();
}

void MkdirRequest::SharedDtor() {
  new_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MkdirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MkdirRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MkdirRequest& MkdirRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_MkdirRequest.base);
  return *internal_default_instance();
}


void MkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.MkdirRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MkdirRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.MkdirRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string new_file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_file_path().data(), static_cast<int>(this->new_file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.MkdirRequest.new_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.MkdirRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.MkdirRequest)
  return false;
#undef DO_
}

void MkdirRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.MkdirRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (this->new_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_file_path().data(), static_cast<int>(this->new_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.MkdirRequest.new_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->new_file_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.MkdirRequest)
}

::google::protobuf::uint8* MkdirRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.MkdirRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (this->new_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_file_path().data(), static_cast<int>(this->new_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.MkdirRequest.new_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_file_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.MkdirRequest)
  return target;
}

size_t MkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.MkdirRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string new_file_path = 1;
  if (this->new_file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_file_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MkdirRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.MkdirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MkdirRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MkdirRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.MkdirRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.MkdirRequest)
    MergeFrom(*source);
  }
}

void MkdirRequest::MergeFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.MkdirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_file_path().size() > 0) {

    new_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_file_path_);
  }
}

void MkdirRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirRequest::CopyFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirRequest::IsInitialized() const {
  return true;
}

void MkdirRequest::Swap(MkdirRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MkdirRequest::InternalSwap(MkdirRequest* other) {
  using std::swap;
  new_file_path_.Swap(&other->new_file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MkdirRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MkdirReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MkdirReply::MkdirReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_MkdirReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.MkdirReply)
}
MkdirReply::MkdirReply(const MkdirReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.MkdirReply)
}

void MkdirReply::SharedCtor() {
}

MkdirReply::~MkdirReply() {
  // @@protoc_insertion_point(destructor:Rpc.MkdirReply)
  SharedDtor();
}

void MkdirReply::SharedDtor() {
}

void MkdirReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MkdirReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MkdirReply& MkdirReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_MkdirReply.base);
  return *internal_default_instance();
}


void MkdirReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.MkdirReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool MkdirReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.MkdirReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.MkdirReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.MkdirReply)
  return false;
#undef DO_
}

void MkdirReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.MkdirReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.MkdirReply)
}

::google::protobuf::uint8* MkdirReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.MkdirReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.MkdirReply)
  return target;
}

size_t MkdirReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.MkdirReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MkdirReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.MkdirReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MkdirReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MkdirReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.MkdirReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.MkdirReply)
    MergeFrom(*source);
  }
}

void MkdirReply::MergeFrom(const MkdirReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.MkdirReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MkdirReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.MkdirReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirReply::CopyFrom(const MkdirReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.MkdirReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirReply::IsInitialized() const {
  return true;
}

void MkdirReply::Swap(MkdirReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MkdirReply::InternalSwap(MkdirReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MkdirReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RenameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kSrcPathFieldNumber;
const int RenameRequest::kDesPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_RenameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_path().size() > 0) {
    src_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_path_);
  }
  des_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.des_path().size() > 0) {
    des_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.RenameRequest)
}

void RenameRequest::SharedCtor() {
  src_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:Rpc.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  src_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RenameRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RenameRequest& RenameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_RenameRequest.base);
  return *internal_default_instance();
}


void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.RenameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string src_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_path().data(), static_cast<int>(this->src_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.RenameRequest.src_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string des_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->des_path().data(), static_cast<int>(this->des_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.RenameRequest.des_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_path = 1;
  if (this->src_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_path().data(), static_cast<int>(this->src_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.src_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_path(), output);
  }

  // string des_path = 2;
  if (this->des_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des_path().data(), static_cast<int>(this->des_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.des_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->des_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.RenameRequest)
}

::google::protobuf::uint8* RenameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RenameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_path = 1;
  if (this->src_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_path().data(), static_cast<int>(this->src_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.src_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_path(), target);
  }

  // string des_path = 2;
  if (this->des_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des_path().data(), static_cast<int>(this->des_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.des_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->des_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RenameRequest)
  return target;
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RenameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string src_path = 1;
  if (this->src_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_path());
  }

  // string des_path = 2;
  if (this->des_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->des_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RenameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.RenameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.RenameRequest)
    MergeFrom(*source);
  }
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_path().size() > 0) {

    src_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_path_);
  }
  if (from.des_path().size() > 0) {

    des_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_path_);
  }
}

void RenameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  src_path_.Swap(&other->src_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_path_.Swap(&other->des_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RenameRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RenameReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameReply::RenameReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_RenameReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.RenameReply)
}
RenameReply::RenameReply(const RenameReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.RenameReply)
}

void RenameReply::SharedCtor() {
}

RenameReply::~RenameReply() {
  // @@protoc_insertion_point(destructor:Rpc.RenameReply)
  SharedDtor();
}

void RenameReply::SharedDtor() {
}

void RenameReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RenameReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RenameReply& RenameReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_RenameReply.base);
  return *internal_default_instance();
}


void RenameReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RenameReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RenameReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.RenameReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.RenameReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.RenameReply)
  return false;
#undef DO_
}

void RenameReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.RenameReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.RenameReply)
}

::google::protobuf::uint8* RenameReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RenameReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RenameReply)
  return target;
}

size_t RenameReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RenameReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.RenameReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RenameReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.RenameReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.RenameReply)
    MergeFrom(*source);
  }
}

void RenameReply::MergeFrom(const RenameReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RenameReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RenameReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.RenameReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameReply::CopyFrom(const RenameReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RenameReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameReply::IsInitialized() const {
  return true;
}

void RenameReply::Swap(RenameReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameReply::InternalSwap(RenameReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RenameReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kRemoteFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_DeleteRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_file_path().size() > 0) {
    remote_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_file_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  remote_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:Rpc.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  remote_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRequest& DeleteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_DeleteRequest.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.DeleteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string remote_file_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.DeleteRequest.remote_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DeleteRequest.remote_file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_file_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_file_path().data(), static_cast<int>(this->remote_file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DeleteRequest.remote_file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_file_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DeleteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string remote_file_path = 1;
  if (this->remote_file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_file_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_file_path().size() > 0) {

    remote_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_file_path_);
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  remote_file_path_.Swap(&other->remote_file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteReply::DeleteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_DeleteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.DeleteReply)
}
DeleteReply::DeleteReply(const DeleteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.DeleteReply)
}

void DeleteReply::SharedCtor() {
}

DeleteReply::~DeleteReply() {
  // @@protoc_insertion_point(destructor:Rpc.DeleteReply)
  SharedDtor();
}

void DeleteReply::SharedDtor() {
}

void DeleteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeleteReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteReply& DeleteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_DeleteReply.base);
  return *internal_default_instance();
}


void DeleteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DeleteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DeleteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.DeleteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.DeleteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.DeleteReply)
  return false;
#undef DO_
}

void DeleteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.DeleteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.DeleteReply)
}

::google::protobuf::uint8* DeleteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DeleteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DeleteReply)
  return target;
}

size_t DeleteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DeleteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.DeleteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.DeleteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.DeleteReply)
    MergeFrom(*source);
  }
}

void DeleteReply::MergeFrom(const DeleteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DeleteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.DeleteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteReply::CopyFrom(const DeleteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DeleteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteReply::IsInitialized() const {
  return true;
}

void DeleteReply::Swap(DeleteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteReply::InternalSwap(DeleteReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatRequest::kFilepathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatRequest::StatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_StatRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.StatRequest)
}
StatRequest::StatRequest(const StatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.StatRequest)
}

void StatRequest::SharedCtor() {
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StatRequest::~StatRequest() {
  // @@protoc_insertion_point(destructor:Rpc.StatRequest)
  SharedDtor();
}

void StatRequest::SharedDtor() {
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatRequest& StatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_StatRequest.base);
  return *internal_default_instance();
}


void StatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.StatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.StatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filepath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.StatRequest.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.StatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.StatRequest)
  return false;
#undef DO_
}

void StatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.StatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatRequest.filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filepath(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.StatRequest)
}

::google::protobuf::uint8* StatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.StatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatRequest.filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filepath(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.StatRequest)
  return target;
}

size_t StatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.StatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filepath = 1;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.StatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.StatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.StatRequest)
    MergeFrom(*source);
  }
}

void StatRequest::MergeFrom(const StatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.StatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
}

void StatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.StatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatRequest::CopyFrom(const StatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.StatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatRequest::IsInitialized() const {
  return true;
}

void StatRequest::Swap(StatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatRequest::InternalSwap(StatRequest* other) {
  using std::swap;
  filepath_.Swap(&other->filepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatReply::kExistedFieldNumber;
const int StatReply::kFileNameFieldNumber;
const int StatReply::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatReply::StatReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_StatReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.StatReply)
}
StatReply::StatReply(const StatReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&existed_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
  // @@protoc_insertion_point(copy_constructor:Rpc.StatReply)
}

void StatReply::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existed_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
}

StatReply::~StatReply() {
  // @@protoc_insertion_point(destructor:Rpc.StatReply)
  SharedDtor();
}

void StatReply::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatReply& StatReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_StatReply.base);
  return *internal_default_instance();
}


void StatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.StatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existed_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(existed_));
  _internal_metadata_.Clear();
}

bool StatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.StatReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool existed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.StatReply.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.StatReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.StatReply)
  return false;
#undef DO_
}

void StatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.StatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool existed = 1;
  if (this->existed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->existed(), output);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatReply.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.StatReply)
}

::google::protobuf::uint8* StatReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.StatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool existed = 1;
  if (this->existed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->existed(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatReply.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.StatReply)
  return target;
}

size_t StatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.StatReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // uint64 file_size = 3;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // bool existed = 1;
  if (this->existed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.StatReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StatReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.StatReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.StatReply)
    MergeFrom(*source);
  }
}

void StatReply::MergeFrom(const StatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.StatReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.existed() != 0) {
    set_existed(from.existed());
  }
}

void StatReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.StatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatReply::CopyFrom(const StatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.StatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReply::IsInitialized() const {
  return true;
}

void StatReply::Swap(StatReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatReply::InternalSwap(StatReply* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(existed_, other->existed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteChunkRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteChunkRequest::kClientIdFieldNumber;
const int WriteChunkRequest::kChunkhandleFieldNumber;
const int WriteChunkRequest::kOffsetFieldNumber;
const int WriteChunkRequest::kLengthFieldNumber;
const int WriteChunkRequest::kLocationsFieldNumber;
const int WriteChunkRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteChunkRequest::WriteChunkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_WriteChunkRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.WriteChunkRequest)
}
WriteChunkRequest::WriteChunkRequest(const WriteChunkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:Rpc.WriteChunkRequest)
}

void WriteChunkRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(length_));
}

WriteChunkRequest::~WriteChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.WriteChunkRequest)
  SharedDtor();
}

void WriteChunkRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteChunkRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteChunkRequest& WriteChunkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_WriteChunkRequest.base);
  return *internal_default_instance();
}


void WriteChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.WriteChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool WriteChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.WriteChunkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chunkhandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkhandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string locations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locations(this->locations_size() - 1).data(),
            static_cast<int>(this->locations(this->locations_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.WriteChunkRequest.locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.WriteChunkRequest.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.WriteChunkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.WriteChunkRequest)
  return false;
#undef DO_
}

void WriteChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.WriteChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->client_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->client_id(), output);
  }

  // int64 chunkhandle = 2;
  if (this->chunkhandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunkhandle(), output);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  // int64 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->length(), output);
  }

  // repeated string locations = 5;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.WriteChunkRequest.locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->locations(i), output);
  }

  // string data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.WriteChunkRequest.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.WriteChunkRequest)
}

::google::protobuf::uint8* WriteChunkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.WriteChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->client_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->client_id(), target);
  }

  // int64 chunkhandle = 2;
  if (this->chunkhandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunkhandle(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  // int64 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->length(), target);
  }

  // repeated string locations = 5;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), static_cast<int>(this->locations(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.WriteChunkRequest.locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->locations(i), target);
  }

  // string data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.WriteChunkRequest.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.WriteChunkRequest)
  return target;
}

size_t WriteChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.WriteChunkRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string locations = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->locations_size());
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locations(i));
  }

  // string data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int64 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_id());
  }

  // int64 chunkhandle = 2;
  if (this->chunkhandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunkhandle());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int64 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.WriteChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteChunkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteChunkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.WriteChunkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.WriteChunkRequest)
    MergeFrom(*source);
  }
}

void WriteChunkRequest::MergeFrom(const WriteChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.WriteChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.client_id() != 0) {
    set_client_id(from.client_id());
  }
  if (from.chunkhandle() != 0) {
    set_chunkhandle(from.chunkhandle());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void WriteChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.WriteChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteChunkRequest::CopyFrom(const WriteChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.WriteChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkRequest::IsInitialized() const {
  return true;
}

void WriteChunkRequest::Swap(WriteChunkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteChunkRequest::InternalSwap(WriteChunkRequest* other) {
  using std::swap;
  locations_.InternalSwap(CastToBase(&other->locations_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_id_, other->client_id_);
  swap(chunkhandle_, other->chunkhandle_);
  swap(offset_, other->offset_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteChunkRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteChunkReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteChunkReply::kBytesReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteChunkReply::WriteChunkReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_WriteChunkReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.WriteChunkReply)
}
WriteChunkReply::WriteChunkReply(const WriteChunkReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_read_ = from.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:Rpc.WriteChunkReply)
}

void WriteChunkReply::SharedCtor() {
  bytes_read_ = GOOGLE_LONGLONG(0);
}

WriteChunkReply::~WriteChunkReply() {
  // @@protoc_insertion_point(destructor:Rpc.WriteChunkReply)
  SharedDtor();
}

void WriteChunkReply::SharedDtor() {
}

void WriteChunkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteChunkReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteChunkReply& WriteChunkReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_WriteChunkReply.base);
  return *internal_default_instance();
}


void WriteChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.WriteChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_read_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool WriteChunkReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.WriteChunkReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bytes_read = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.WriteChunkReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.WriteChunkReply)
  return false;
#undef DO_
}

void WriteChunkReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.WriteChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_read(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.WriteChunkReply)
}

::google::protobuf::uint8* WriteChunkReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.WriteChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_read(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.WriteChunkReply)
  return target;
}

size_t WriteChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.WriteChunkReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes_read());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteChunkReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.WriteChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteChunkReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteChunkReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.WriteChunkReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.WriteChunkReply)
    MergeFrom(*source);
  }
}

void WriteChunkReply::MergeFrom(const WriteChunkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.WriteChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
}

void WriteChunkReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.WriteChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteChunkReply::CopyFrom(const WriteChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.WriteChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkReply::IsInitialized() const {
  return true;
}

void WriteChunkReply::Swap(WriteChunkReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteChunkReply::InternalSwap(WriteChunkReply* other) {
  using std::swap;
  swap(bytes_read_, other->bytes_read_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteChunkReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadChunkRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadChunkRequest::kChunkhandleFieldNumber;
const int ReadChunkRequest::kOffsetFieldNumber;
const int ReadChunkRequest::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadChunkRequest::ReadChunkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_ReadChunkRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.ReadChunkRequest)
}
ReadChunkRequest::ReadChunkRequest(const ReadChunkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunkhandle_, &from.chunkhandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:Rpc.ReadChunkRequest)
}

void ReadChunkRequest::SharedCtor() {
  ::memset(&chunkhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
}

ReadChunkRequest::~ReadChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.ReadChunkRequest)
  SharedDtor();
}

void ReadChunkRequest::SharedDtor() {
}

void ReadChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadChunkRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadChunkRequest& ReadChunkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_ReadChunkRequest.base);
  return *internal_default_instance();
}


void ReadChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReadChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunkhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&chunkhandle_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool ReadChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.ReadChunkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 chunkhandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkhandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.ReadChunkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.ReadChunkRequest)
  return false;
#undef DO_
}

void ReadChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.ReadChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->chunkhandle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunkhandle(), output);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  // int64 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.ReadChunkRequest)
}

::google::protobuf::uint8* ReadChunkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReadChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->chunkhandle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunkhandle(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  // int64 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReadChunkRequest)
  return target;
}

size_t ReadChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReadChunkRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 chunkhandle = 1;
  if (this->chunkhandle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunkhandle());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int64 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.ReadChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadChunkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadChunkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.ReadChunkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.ReadChunkRequest)
    MergeFrom(*source);
  }
}

void ReadChunkRequest::MergeFrom(const ReadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReadChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunkhandle() != 0) {
    set_chunkhandle(from.chunkhandle());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void ReadChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.ReadChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadChunkRequest::CopyFrom(const ReadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReadChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkRequest::IsInitialized() const {
  return true;
}

void ReadChunkRequest::Swap(ReadChunkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadChunkRequest::InternalSwap(ReadChunkRequest* other) {
  using std::swap;
  swap(chunkhandle_, other->chunkhandle_);
  swap(offset_, other->offset_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadChunkRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadChunkReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadChunkReply::kDataFieldNumber;
const int ReadChunkReply::kBytesReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadChunkReply::ReadChunkReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_ReadChunkReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.ReadChunkReply)
}
ReadChunkReply::ReadChunkReply(const ReadChunkReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  bytes_read_ = from.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:Rpc.ReadChunkReply)
}

void ReadChunkReply::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_read_ = GOOGLE_LONGLONG(0);
}

ReadChunkReply::~ReadChunkReply() {
  // @@protoc_insertion_point(destructor:Rpc.ReadChunkReply)
  SharedDtor();
}

void ReadChunkReply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadChunkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadChunkReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadChunkReply& ReadChunkReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_ReadChunkReply.base);
  return *internal_default_instance();
}


void ReadChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReadChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_read_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReadChunkReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.ReadChunkReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.ReadChunkReply.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bytes_read = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.ReadChunkReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.ReadChunkReply)
  return false;
#undef DO_
}

void ReadChunkReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.ReadChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReadChunkReply.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_read(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.ReadChunkReply)
}

::google::protobuf::uint8* ReadChunkReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReadChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReadChunkReply.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_read(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReadChunkReply)
  return target;
}

size_t ReadChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReadChunkReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int64 bytes_read = 2;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes_read());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadChunkReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.ReadChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadChunkReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadChunkReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.ReadChunkReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.ReadChunkReply)
    MergeFrom(*source);
  }
}

void ReadChunkReply::MergeFrom(const ReadChunkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReadChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
}

void ReadChunkReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.ReadChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadChunkReply::CopyFrom(const ReadChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReadChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkReply::IsInitialized() const {
  return true;
}

void ReadChunkReply::Swap(ReadChunkReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadChunkReply::InternalSwap(ReadChunkReply* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bytes_read_, other->bytes_read_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadChunkReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataNodeLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataNodeLocation::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataNodeLocation::DataNodeLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_DataNodeLocation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.DataNodeLocation)
}
DataNodeLocation::DataNodeLocation(const DataNodeLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNodeLocation)
}

void DataNodeLocation::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataNodeLocation::~DataNodeLocation() {
  // @@protoc_insertion_point(destructor:Rpc.DataNodeLocation)
  SharedDtor();
}

void DataNodeLocation::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataNodeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataNodeLocation::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataNodeLocation& DataNodeLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_DataNodeLocation.base);
  return *internal_default_instance();
}


void DataNodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNodeLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DataNodeLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.DataNodeLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.DataNodeLocation.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.DataNodeLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.DataNodeLocation)
  return false;
#undef DO_
}

void DataNodeLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.DataNodeLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNodeLocation.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.DataNodeLocation)
}

::google::protobuf::uint8* DataNodeLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNodeLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNodeLocation.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNodeLocation)
  return target;
}

size_t DataNodeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNodeLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataNodeLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.DataNodeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const DataNodeLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataNodeLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.DataNodeLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.DataNodeLocation)
    MergeFrom(*source);
  }
}

void DataNodeLocation::MergeFrom(const DataNodeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNodeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
}

void DataNodeLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.DataNodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataNodeLocation::CopyFrom(const DataNodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeLocation::IsInitialized() const {
  return true;
}

void DataNodeLocation::Swap(DataNodeLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataNodeLocation::InternalSwap(DataNodeLocation* other) {
  using std::swap;
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataNodeLocation::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataNode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataNode::kLocationFieldNumber;
const int DataNode::kAvailableSizeFieldNumber;
const int DataNode::kStoredChunkHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataNode::DataNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_DataNode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.DataNode)
}
DataNode::DataNode(const DataNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stored_chunk_handles_(from.stored_chunk_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  available_size_ = from.available_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNode)
}

void DataNode::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_size_ = 0u;
}

DataNode::~DataNode() {
  // @@protoc_insertion_point(destructor:Rpc.DataNode)
  SharedDtor();
}

void DataNode::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataNode::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataNode& DataNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_DataNode.base);
  return *internal_default_instance();
}


void DataNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stored_chunk_handles_.Clear();
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_size_ = 0u;
  _internal_metadata_.Clear();
}

bool DataNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.DataNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.DataNode.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 available_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 stored_chunk_handles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_stored_chunk_handles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_stored_chunk_handles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.DataNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.DataNode)
  return false;
#undef DO_
}

void DataNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.DataNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNode.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available_size(), output);
  }

  // repeated int64 stored_chunk_handles = 3;
  if (this->stored_chunk_handles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stored_chunk_handles_cached_byte_size_));
  }
  for (int i = 0, n = this->stored_chunk_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->stored_chunk_handles(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.DataNode)
}

::google::protobuf::uint8* DataNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNode.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available_size(), target);
  }

  // repeated int64 stored_chunk_handles = 3;
  if (this->stored_chunk_handles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stored_chunk_handles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->stored_chunk_handles_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNode)
  return target;
}

size_t DataNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 stored_chunk_handles = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->stored_chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stored_chunk_handles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.DataNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DataNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.DataNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.DataNode)
    MergeFrom(*source);
  }
}

void DataNode::MergeFrom(const DataNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stored_chunk_handles_.MergeFrom(from.stored_chunk_handles_);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.available_size() != 0) {
    set_available_size(from.available_size());
  }
}

void DataNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.DataNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataNode::CopyFrom(const DataNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNode::IsInitialized() const {
  return true;
}

void DataNode::Swap(DataNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataNode::InternalSwap(DataNode* other) {
  using std::swap;
  stored_chunk_handles_.InternalSwap(&other->stored_chunk_handles_);
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(available_size_, other->available_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataNode::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Chunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chunk::kChunkHandleFieldNumber;
const int Chunk::kLocationFieldNumber;
const int Chunk::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chunk::Chunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_Chunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      location_(from.location_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_handle_, &from.chunk_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Rpc.Chunk)
}

void Chunk::SharedCtor() {
  ::memset(&chunk_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:Rpc.Chunk)
  SharedDtor();
}

void Chunk::SharedDtor() {
}

void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chunk& Chunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_Chunk.base);
  return *internal_default_instance();
}


void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  ::memset(&chunk_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&chunk_handle_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.Chunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 chunk_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location(this->location_size() - 1).data(),
            static_cast<int>(this->location(this->location_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.Chunk.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.Chunk)
  return false;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunk_handle = 1;
  if (this->chunk_handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunk_handle(), output);
  }

  // repeated string location = 2;
  for (int i = 0, n = this->location_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location(i).data(), static_cast<int>(this->location(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.Chunk.location");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->location(i), output);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.Chunk)
}

::google::protobuf::uint8* Chunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunk_handle = 1;
  if (this->chunk_handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunk_handle(), target);
  }

  // repeated string location = 2;
  for (int i = 0, n = this->location_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location(i).data(), static_cast<int>(this->location(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.Chunk.location");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->location(i), target);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.Chunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string location = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->location_size());
  for (int i = 0, n = this->location_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->location(i));
  }

  // int64 chunk_handle = 1;
  if (this->chunk_handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_handle());
  }

  // int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const Chunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.Chunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.Chunk)
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  if (from.chunk_handle() != 0) {
    set_chunk_handle(from.chunk_handle());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  location_.InternalSwap(CastToBase(&other->location_));
  swap(chunk_handle_, other->chunk_handle_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportDataNodeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportDataNodeRequest::kLocationFieldNumber;
const int ReportDataNodeRequest::kAvailableSizeFieldNumber;
const int ReportDataNodeRequest::kStoredChunkHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportDataNodeRequest::ReportDataNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_ReportDataNodeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.ReportDataNodeRequest)
}
ReportDataNodeRequest::ReportDataNodeRequest(const ReportDataNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stored_chunk_handles_(from.stored_chunk_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  available_size_ = from.available_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeRequest)
}

void ReportDataNodeRequest::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_size_ = 0u;
}

ReportDataNodeRequest::~ReportDataNodeRequest() {
  // @@protoc_insertion_point(destructor:Rpc.ReportDataNodeRequest)
  SharedDtor();
}

void ReportDataNodeRequest::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReportDataNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportDataNodeRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportDataNodeRequest& ReportDataNodeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_ReportDataNodeRequest.base);
  return *internal_default_instance();
}


void ReportDataNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReportDataNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stored_chunk_handles_.Clear();
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_size_ = 0u;
  _internal_metadata_.Clear();
}

bool ReportDataNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.ReportDataNodeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.ReportDataNodeRequest.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 available_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 stored_chunk_handles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_stored_chunk_handles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_stored_chunk_handles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.ReportDataNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.ReportDataNodeRequest)
  return false;
#undef DO_
}

void ReportDataNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.ReportDataNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReportDataNodeRequest.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available_size(), output);
  }

  // repeated int64 stored_chunk_handles = 3;
  if (this->stored_chunk_handles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stored_chunk_handles_cached_byte_size_));
  }
  for (int i = 0, n = this->stored_chunk_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->stored_chunk_handles(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.ReportDataNodeRequest)
}

::google::protobuf::uint8* ReportDataNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReportDataNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReportDataNodeRequest.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available_size(), target);
  }

  // repeated int64 stored_chunk_handles = 3;
  if (this->stored_chunk_handles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stored_chunk_handles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->stored_chunk_handles_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReportDataNodeRequest)
  return target;
}

size_t ReportDataNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReportDataNodeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 stored_chunk_handles = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->stored_chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stored_chunk_handles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // uint32 available_size = 2;
  if (this->available_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportDataNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.ReportDataNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportDataNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportDataNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.ReportDataNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.ReportDataNodeRequest)
    MergeFrom(*source);
  }
}

void ReportDataNodeRequest::MergeFrom(const ReportDataNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReportDataNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stored_chunk_handles_.MergeFrom(from.stored_chunk_handles_);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.available_size() != 0) {
    set_available_size(from.available_size());
  }
}

void ReportDataNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.ReportDataNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDataNodeRequest::CopyFrom(const ReportDataNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReportDataNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataNodeRequest::IsInitialized() const {
  return true;
}

void ReportDataNodeRequest::Swap(ReportDataNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportDataNodeRequest::InternalSwap(ReportDataNodeRequest* other) {
  using std::swap;
  stored_chunk_handles_.InternalSwap(&other->stored_chunk_handles_);
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(available_size_, other->available_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportDataNodeRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportDataNodeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportDataNodeReply::ReportDataNodeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_ReportDataNodeReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.ReportDataNodeReply)
}
ReportDataNodeReply::ReportDataNodeReply(const ReportDataNodeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeReply)
}

void ReportDataNodeReply::SharedCtor() {
}

ReportDataNodeReply::~ReportDataNodeReply() {
  // @@protoc_insertion_point(destructor:Rpc.ReportDataNodeReply)
  SharedDtor();
}

void ReportDataNodeReply::SharedDtor() {
}

void ReportDataNodeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportDataNodeReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportDataNodeReply& ReportDataNodeReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_ReportDataNodeReply.base);
  return *internal_default_instance();
}


void ReportDataNodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReportDataNodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportDataNodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.ReportDataNodeReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.ReportDataNodeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.ReportDataNodeReply)
  return false;
#undef DO_
}

void ReportDataNodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.ReportDataNodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.ReportDataNodeReply)
}

::google::protobuf::uint8* ReportDataNodeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReportDataNodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReportDataNodeReply)
  return target;
}

size_t ReportDataNodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReportDataNodeReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportDataNodeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.ReportDataNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportDataNodeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportDataNodeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.ReportDataNodeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.ReportDataNodeReply)
    MergeFrom(*source);
  }
}

void ReportDataNodeReply::MergeFrom(const ReportDataNodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReportDataNodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportDataNodeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.ReportDataNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportDataNodeReply::CopyFrom(const ReportDataNodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReportDataNodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataNodeReply::IsInitialized() const {
  return true;
}

void ReportDataNodeReply::Swap(ReportDataNodeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportDataNodeReply::InternalSwap(ReportDataNodeReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportDataNodeReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartbeatRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_HeartbeatRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:Rpc.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_HeartbeatRequest.base);
  return *internal_default_instance();
}


void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.HeartbeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HeartbeatRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.HeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartbeatReply::InitAsDefaultInstance() {
  ::Rpc::_HeartbeatReply_default_instance_._instance.get_mutable()->request_ = const_cast< ::Rpc::HeartbeatRequest*>(
      ::Rpc::HeartbeatRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatReply::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatReply::HeartbeatReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_HeartbeatReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.HeartbeatReply)
}
HeartbeatReply::HeartbeatReply(const HeartbeatReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::Rpc::HeartbeatRequest(*from.request_);
  } else {
    request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatReply)
}

void HeartbeatReply::SharedCtor() {
  request_ = NULL;
}

HeartbeatReply::~HeartbeatReply() {
  // @@protoc_insertion_point(destructor:Rpc.HeartbeatReply)
  SharedDtor();
}

void HeartbeatReply::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
}

void HeartbeatReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartbeatReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartbeatReply& HeartbeatReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_HeartbeatReply.base);
  return *internal_default_instance();
}


void HeartbeatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  _internal_metadata_.Clear();
}

bool HeartbeatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.HeartbeatReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Rpc.HeartbeatRequest request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.HeartbeatReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.HeartbeatReply)
  return false;
#undef DO_
}

void HeartbeatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.HeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_request(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.HeartbeatReply)
}

::google::protobuf::uint8* HeartbeatReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HeartbeatReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_request(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HeartbeatReply)
  return target;
}

size_t HeartbeatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HeartbeatReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Rpc.HeartbeatRequest request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.HeartbeatReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.HeartbeatReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.HeartbeatReply)
    MergeFrom(*source);
  }
}

void HeartbeatReply::MergeFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HeartbeatReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    mutable_request()->::Rpc::HeartbeatRequest::MergeFrom(from.request());
  }
}

void HeartbeatReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.HeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatReply::CopyFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReply::IsInitialized() const {
  return true;
}

void HeartbeatReply::Swap(HeartbeatReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatReply::InternalSwap(HeartbeatReply* other) {
  using std::swap;
  swap(request_, other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartbeatReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CopyChunkRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopyChunkRequest::kLocationFieldNumber;
const int CopyChunkRequest::kChunkHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopyChunkRequest::CopyChunkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_CopyChunkRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.CopyChunkRequest)
}
CopyChunkRequest::CopyChunkRequest(const CopyChunkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  chunk_handle_ = from.chunk_handle_;
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkRequest)
}

void CopyChunkRequest::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_handle_ = GOOGLE_LONGLONG(0);
}

CopyChunkRequest::~CopyChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.CopyChunkRequest)
  SharedDtor();
}

void CopyChunkRequest::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CopyChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CopyChunkRequest::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CopyChunkRequest& CopyChunkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_CopyChunkRequest.base);
  return *internal_default_instance();
}


void CopyChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.CopyChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_handle_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool CopyChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.CopyChunkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Rpc.CopyChunkRequest.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 chunk_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.CopyChunkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.CopyChunkRequest)
  return false;
#undef DO_
}

void CopyChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.CopyChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.CopyChunkRequest.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // int64 chunk_handle = 2;
  if (this->chunk_handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunk_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.CopyChunkRequest)
}

::google::protobuf::uint8* CopyChunkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.CopyChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Rpc.CopyChunkRequest.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // int64 chunk_handle = 2;
  if (this->chunk_handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunk_handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.CopyChunkRequest)
  return target;
}

size_t CopyChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.CopyChunkRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string location = 1;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // int64 chunk_handle = 2;
  if (this->chunk_handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chunk_handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopyChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.CopyChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyChunkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CopyChunkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.CopyChunkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.CopyChunkRequest)
    MergeFrom(*source);
  }
}

void CopyChunkRequest::MergeFrom(const CopyChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.CopyChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.chunk_handle() != 0) {
    set_chunk_handle(from.chunk_handle());
  }
}

void CopyChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.CopyChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyChunkRequest::CopyFrom(const CopyChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.CopyChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyChunkRequest::IsInitialized() const {
  return true;
}

void CopyChunkRequest::Swap(CopyChunkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopyChunkRequest::InternalSwap(CopyChunkRequest* other) {
  using std::swap;
  location_.Swap(&other->location_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunk_handle_, other->chunk_handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CopyChunkRequest::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CopyChunkReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopyChunkReply::CopyChunkReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NameNode_2eproto::scc_info_CopyChunkReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rpc.CopyChunkReply)
}
CopyChunkReply::CopyChunkReply(const CopyChunkReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkReply)
}

void CopyChunkReply::SharedCtor() {
}

CopyChunkReply::~CopyChunkReply() {
  // @@protoc_insertion_point(destructor:Rpc.CopyChunkReply)
  SharedDtor();
}

void CopyChunkReply::SharedDtor() {
}

void CopyChunkReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CopyChunkReply::descriptor() {
  ::protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CopyChunkReply& CopyChunkReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NameNode_2eproto::scc_info_CopyChunkReply.base);
  return *internal_default_instance();
}


void CopyChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.CopyChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CopyChunkReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rpc.CopyChunkReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Rpc.CopyChunkReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rpc.CopyChunkReply)
  return false;
#undef DO_
}

void CopyChunkReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rpc.CopyChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rpc.CopyChunkReply)
}

::google::protobuf::uint8* CopyChunkReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.CopyChunkReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.CopyChunkReply)
  return target;
}

size_t CopyChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.CopyChunkReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopyChunkReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rpc.CopyChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyChunkReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CopyChunkReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rpc.CopyChunkReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rpc.CopyChunkReply)
    MergeFrom(*source);
  }
}

void CopyChunkReply::MergeFrom(const CopyChunkReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rpc.CopyChunkReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CopyChunkReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rpc.CopyChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyChunkReply::CopyFrom(const CopyChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.CopyChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyChunkReply::IsInitialized() const {
  return true;
}

void CopyChunkReply::Swap(CopyChunkReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopyChunkReply::InternalSwap(CopyChunkReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CopyChunkReply::GetMetadata() const {
  protobuf_NameNode_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameNode_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Rpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::LogEntry* Arena::CreateMaybeMessage< ::Rpc::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::LogEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::AppendEntriesArgs* Arena::CreateMaybeMessage< ::Rpc::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::AppendEntriesArgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::AppendEntriesReply* Arena::CreateMaybeMessage< ::Rpc::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::AppendEntriesReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::RequestVoteArgs* Arena::CreateMaybeMessage< ::Rpc::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::RequestVoteArgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::RequestVoteReply* Arena::CreateMaybeMessage< ::Rpc::RequestVoteReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::RequestVoteReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::FindAddrRequest* Arena::CreateMaybeMessage< ::Rpc::FindAddrRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::FindAddrRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::FindAddrReply_ReplicaAddrs* Arena::CreateMaybeMessage< ::Rpc::FindAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::FindAddrReply_ReplicaAddrs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::FindAddrReply* Arena::CreateMaybeMessage< ::Rpc::FindAddrReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::FindAddrReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::GetWriteAddrRequest* Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::GetWriteAddrRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::GetWriteAddrReply_ReplicaAddrs* Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::GetWriteAddrReply_ReplicaAddrs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::GetWriteAddrReply* Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::GetWriteAddrReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::GetSubDirNamesRequest* Arena::CreateMaybeMessage< ::Rpc::GetSubDirNamesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::GetSubDirNamesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::GetSubDirNamesReply* Arena::CreateMaybeMessage< ::Rpc::GetSubDirNamesReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::GetSubDirNamesReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::MkdirRequest* Arena::CreateMaybeMessage< ::Rpc::MkdirRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::MkdirRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::MkdirReply* Arena::CreateMaybeMessage< ::Rpc::MkdirReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::MkdirReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::RenameRequest* Arena::CreateMaybeMessage< ::Rpc::RenameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::RenameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::RenameReply* Arena::CreateMaybeMessage< ::Rpc::RenameReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::RenameReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::DeleteRequest* Arena::CreateMaybeMessage< ::Rpc::DeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::DeleteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::DeleteReply* Arena::CreateMaybeMessage< ::Rpc::DeleteReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::DeleteReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::StatRequest* Arena::CreateMaybeMessage< ::Rpc::StatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::StatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::StatReply* Arena::CreateMaybeMessage< ::Rpc::StatReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::StatReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::WriteChunkRequest* Arena::CreateMaybeMessage< ::Rpc::WriteChunkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::WriteChunkRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::WriteChunkReply* Arena::CreateMaybeMessage< ::Rpc::WriteChunkReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::WriteChunkReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::ReadChunkRequest* Arena::CreateMaybeMessage< ::Rpc::ReadChunkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::ReadChunkRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::ReadChunkReply* Arena::CreateMaybeMessage< ::Rpc::ReadChunkReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::ReadChunkReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::DataNodeLocation* Arena::CreateMaybeMessage< ::Rpc::DataNodeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::DataNodeLocation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::DataNode* Arena::CreateMaybeMessage< ::Rpc::DataNode >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::DataNode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::Chunk* Arena::CreateMaybeMessage< ::Rpc::Chunk >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::Chunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::ReportDataNodeRequest* Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::ReportDataNodeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::ReportDataNodeReply* Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::ReportDataNodeReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::HeartbeatRequest* Arena::CreateMaybeMessage< ::Rpc::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::HeartbeatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::HeartbeatReply* Arena::CreateMaybeMessage< ::Rpc::HeartbeatReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::HeartbeatReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::CopyChunkRequest* Arena::CreateMaybeMessage< ::Rpc::CopyChunkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::CopyChunkRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rpc::CopyChunkReply* Arena::CreateMaybeMessage< ::Rpc::CopyChunkReply >(Arena* arena) {
  return Arena::CreateInternal< ::Rpc::CopyChunkReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
