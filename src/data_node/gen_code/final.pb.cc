// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: final.proto

#include "final.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Rpc {
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.des_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.getw_)*/nullptr
  , /*decltype(_impl_.rename_)*/nullptr
  , /*decltype(_impl_.del_)*/nullptr
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesArgs::AppendEntriesArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.aterm_)*/0
  , /*decltype(_impl_.leaderid_)*/0
  , /*decltype(_impl_.prevlogindex_)*/0
  , /*decltype(_impl_.prevlogterm_)*/0
  , /*decltype(_impl_.leadercommit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesArgsDefaultTypeInternal() {}
  union {
    AppendEntriesArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesArgsDefaultTypeInternal _AppendEntriesArgs_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesReply::AppendEntriesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.upnextindex_)*/0
  , /*decltype(_impl_.appendentriesstate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesReplyDefaultTypeInternal() {}
  union {
    AppendEntriesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
PROTOBUF_CONSTEXPR RequestVoteArgs::RequestVoteArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.candidateid_)*/0
  , /*decltype(_impl_.lastlogindex_)*/0
  , /*decltype(_impl_.lastlogterm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteArgsDefaultTypeInternal() {}
  union {
    RequestVoteArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
PROTOBUF_CONSTEXPR RequestVoteReply::RequestVoteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.votegranted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteReplyDefaultTypeInternal() {}
  union {
    RequestVoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
PROTOBUF_CONSTEXPR FindAddrRequest::FindAddrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindAddrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindAddrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindAddrRequestDefaultTypeInternal() {}
  union {
    FindAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindAddrRequestDefaultTypeInternal _FindAddrRequest_default_instance_;
PROTOBUF_CONSTEXPR FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_ports_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindAddrReply_ReplicaAddrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindAddrReply_ReplicaAddrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindAddrReply_ReplicaAddrsDefaultTypeInternal() {}
  union {
    FindAddrReply_ReplicaAddrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindAddrReply_ReplicaAddrsDefaultTypeInternal _FindAddrReply_ReplicaAddrs_default_instance_;
PROTOBUF_CONSTEXPR FindAddrReply::FindAddrReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_handles_)*/{}
  , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
  , /*decltype(_impl_.addrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindAddrReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindAddrReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindAddrReplyDefaultTypeInternal() {}
  union {
    FindAddrReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindAddrReplyDefaultTypeInternal _FindAddrReply_default_instance_;
PROTOBUF_CONSTEXPR GetWriteAddrRequest::GetWriteAddrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.write_data_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWriteAddrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWriteAddrRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWriteAddrRequestDefaultTypeInternal() {}
  union {
    GetWriteAddrRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWriteAddrRequestDefaultTypeInternal _GetWriteAddrRequest_default_instance_;
PROTOBUF_CONSTEXPR GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_ports_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal() {}
  union {
    GetWriteAddrReply_ReplicaAddrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWriteAddrReply_ReplicaAddrsDefaultTypeInternal _GetWriteAddrReply_ReplicaAddrs_default_instance_;
PROTOBUF_CONSTEXPR GetWriteAddrReply::GetWriteAddrReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_handles_)*/{}
  , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
  , /*decltype(_impl_.addrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWriteAddrReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWriteAddrReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWriteAddrReplyDefaultTypeInternal() {}
  union {
    GetWriteAddrReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWriteAddrReplyDefaultTypeInternal _GetWriteAddrReply_default_instance_;
PROTOBUF_CONSTEXPR GetSubDirNamesRequest::GetSubDirNamesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSubDirNamesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSubDirNamesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSubDirNamesRequestDefaultTypeInternal() {}
  union {
    GetSubDirNamesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSubDirNamesRequestDefaultTypeInternal _GetSubDirNamesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSubDirNamesReply::GetSubDirNamesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subdir_file_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSubDirNamesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSubDirNamesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSubDirNamesReplyDefaultTypeInternal() {}
  union {
    GetSubDirNamesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSubDirNamesReplyDefaultTypeInternal _GetSubDirNamesReply_default_instance_;
PROTOBUF_CONSTEXPR MkdirRequest::MkdirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MkdirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MkdirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MkdirRequestDefaultTypeInternal() {}
  union {
    MkdirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MkdirRequestDefaultTypeInternal _MkdirRequest_default_instance_;
PROTOBUF_CONSTEXPR MkdirReply::MkdirReply(
    ::_pbi::ConstantInitialized) {}
struct MkdirReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MkdirReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MkdirReplyDefaultTypeInternal() {}
  union {
    MkdirReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MkdirReplyDefaultTypeInternal _MkdirReply_default_instance_;
PROTOBUF_CONSTEXPR RenameRequest::RenameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.des_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameRequestDefaultTypeInternal() {}
  union {
    RenameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
PROTOBUF_CONSTEXPR RenameReply::RenameReply(
    ::_pbi::ConstantInitialized) {}
struct RenameReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameReplyDefaultTypeInternal() {}
  union {
    RenameReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameReplyDefaultTypeInternal _RenameReply_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteReply::DeleteReply(
    ::_pbi::ConstantInitialized) {}
struct DeleteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteReplyDefaultTypeInternal() {}
  union {
    DeleteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteReplyDefaultTypeInternal _DeleteReply_default_instance_;
PROTOBUF_CONSTEXPR StatRequest::StatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filepath_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatRequestDefaultTypeInternal() {}
  union {
    StatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatRequestDefaultTypeInternal _StatRequest_default_instance_;
PROTOBUF_CONSTEXPR StatReply::StatReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_size_)*/uint64_t{0u}
  , /*decltype(_impl_.existed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatReplyDefaultTypeInternal() {}
  union {
    StatReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatReplyDefaultTypeInternal _StatReply_default_instance_;
PROTOBUF_CONSTEXPR HelloRequest::HelloRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloRequestDefaultTypeInternal() {}
  union {
    HelloRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
PROTOBUF_CONSTEXPR HelloReply::HelloReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloReplyDefaultTypeInternal() {}
  union {
    HelloReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
PROTOBUF_CONSTEXPR WriteChunkRequest::WriteChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locations_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/int64_t{0}
  , /*decltype(_impl_.chunkhandle_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.length_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WriteChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteChunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteChunkRequestDefaultTypeInternal() {}
  union {
    WriteChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteChunkRequestDefaultTypeInternal _WriteChunkRequest_default_instance_;
PROTOBUF_CONSTEXPR WriteChunkReply::WriteChunkReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bytes_read_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WriteChunkReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteChunkReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteChunkReplyDefaultTypeInternal() {}
  union {
    WriteChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteChunkReplyDefaultTypeInternal _WriteChunkReply_default_instance_;
PROTOBUF_CONSTEXPR ReadChunkRequest::ReadChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunkhandle_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.length_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadChunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadChunkRequestDefaultTypeInternal() {}
  union {
    ReadChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadChunkRequestDefaultTypeInternal _ReadChunkRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadChunkReply::ReadChunkReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytes_read_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadChunkReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadChunkReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadChunkReplyDefaultTypeInternal() {}
  union {
    ReadChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadChunkReplyDefaultTypeInternal _ReadChunkReply_default_instance_;
PROTOBUF_CONSTEXPR DataNodeLocation::DataNodeLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataNodeLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataNodeLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataNodeLocationDefaultTypeInternal() {}
  union {
    DataNodeLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataNodeLocationDefaultTypeInternal _DataNodeLocation_default_instance_;
PROTOBUF_CONSTEXPR DataNode::DataNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stored_chunk_handles_)*/{}
  , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.available_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataNodeDefaultTypeInternal() {}
  union {
    DataNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataNodeDefaultTypeInternal _DataNode_default_instance_;
PROTOBUF_CONSTEXPR Chunk::Chunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{}
  , /*decltype(_impl_.chunk_handle_)*/int64_t{0}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkDefaultTypeInternal _Chunk_default_instance_;
PROTOBUF_CONSTEXPR ReportDataNodeRequest::ReportDataNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stored_chunk_handles_)*/{}
  , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.available_size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportDataNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportDataNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportDataNodeRequestDefaultTypeInternal() {}
  union {
    ReportDataNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportDataNodeRequestDefaultTypeInternal _ReportDataNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportDataNodeReply::ReportDataNodeReply(
    ::_pbi::ConstantInitialized) {}
struct ReportDataNodeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportDataNodeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportDataNodeReplyDefaultTypeInternal() {}
  union {
    ReportDataNodeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportDataNodeReplyDefaultTypeInternal _ReportDataNodeReply_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized) {}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatReply::HeartbeatReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatReplyDefaultTypeInternal() {}
  union {
    HeartbeatReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatReplyDefaultTypeInternal _HeartbeatReply_default_instance_;
PROTOBUF_CONSTEXPR CopyChunkRequest::CopyChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CopyChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyChunkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyChunkRequestDefaultTypeInternal() {}
  union {
    CopyChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyChunkRequestDefaultTypeInternal _CopyChunkRequest_default_instance_;
PROTOBUF_CONSTEXPR CopyChunkReply::CopyChunkReply(
    ::_pbi::ConstantInitialized) {}
struct CopyChunkReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyChunkReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyChunkReplyDefaultTypeInternal() {}
  union {
    CopyChunkReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyChunkReplyDefaultTypeInternal _CopyChunkReply_default_instance_;
PROTOBUF_CONSTEXPR MultiWriteRequest::MultiWriteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_id_)*/int64_t{0}
  , /*decltype(_impl_.chunkhandle_)*/int64_t{0}
  , /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.padded_chunk_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiWriteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiWriteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiWriteRequestDefaultTypeInternal() {}
  union {
    MultiWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiWriteRequestDefaultTypeInternal _MultiWriteRequest_default_instance_;
PROTOBUF_CONSTEXPR MultiWriteReply::MultiWriteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bytes_written_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiWriteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiWriteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiWriteReplyDefaultTypeInternal() {}
  union {
    MultiWriteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiWriteReplyDefaultTypeInternal _MultiWriteReply_default_instance_;
PROTOBUF_CONSTEXPR CopyChunkWriteRequest::CopyChunkWriteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunk_handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CopyChunkWriteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyChunkWriteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyChunkWriteRequestDefaultTypeInternal() {}
  union {
    CopyChunkWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyChunkWriteRequestDefaultTypeInternal _CopyChunkWriteRequest_default_instance_;
PROTOBUF_CONSTEXPR CopyChunkWriteReply::CopyChunkWriteReply(
    ::_pbi::ConstantInitialized) {}
struct CopyChunkWriteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyChunkWriteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyChunkWriteReplyDefaultTypeInternal() {}
  union {
    CopyChunkWriteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyChunkWriteReplyDefaultTypeInternal _CopyChunkWriteReply_default_instance_;
}  // namespace Rpc
static ::_pb::Metadata file_level_metadata_final_2eproto[40];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_final_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_final_2eproto = nullptr;

const uint32_t TableStruct_final_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.getw_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.rename_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.del_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.filepath_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.des_),
  PROTOBUF_FIELD_OFFSET(::Rpc::LogEntry, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.aterm_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.leaderid_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesArgs, _impl_.leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesReply, _impl_.upnextindex_),
  PROTOBUF_FIELD_OFFSET(::Rpc::AppendEntriesReply, _impl_.appendentriesstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteArgs, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteArgs, _impl_.candidateid_),
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteArgs, _impl_.lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteArgs, _impl_.lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::Rpc::RequestVoteReply, _impl_.votegranted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrRequest, _impl_.filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrReply_ReplicaAddrs, _impl_.ip_ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrReply, _impl_.chunk_handles_),
  PROTOBUF_FIELD_OFFSET(::Rpc::FindAddrReply, _impl_.addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, _impl_.remote_file_path_),
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrRequest, _impl_.write_data_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrReply_ReplicaAddrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrReply_ReplicaAddrs, _impl_.ip_ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrReply, _impl_.chunk_handles_),
  PROTOBUF_FIELD_OFFSET(::Rpc::GetWriteAddrReply, _impl_.addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetSubDirNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetSubDirNamesRequest, _impl_.file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetSubDirNamesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::GetSubDirNamesReply, _impl_.subdir_file_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::MkdirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::MkdirRequest, _impl_.new_file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::MkdirReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::RenameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::RenameRequest, _impl_.src_path_),
  PROTOBUF_FIELD_OFFSET(::Rpc::RenameRequest, _impl_.des_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::RenameReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::DeleteRequest, _impl_.remote_file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DeleteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::StatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::StatRequest, _impl_.filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::StatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::StatReply, _impl_.existed_),
  PROTOBUF_FIELD_OFFSET(::Rpc::StatReply, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::Rpc::StatReply, _impl_.file_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::HelloRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HelloReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::HelloReply, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.chunkhandle_),
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.locations_),
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::WriteChunkReply, _impl_.bytes_read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkRequest, _impl_.chunkhandle_),
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkRequest, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkReply, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Rpc::ReadChunkReply, _impl_.bytes_read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNodeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNodeLocation, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, _impl_.available_size_),
  PROTOBUF_FIELD_OFFSET(::Rpc::DataNode, _impl_.stored_chunk_handles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, _impl_.chunk_handle_),
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::Chunk, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _impl_.available_size_),
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeRequest, _impl_.stored_chunk_handles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::ReportDataNodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::HeartbeatReply, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkRequest, _impl_.chunk_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _impl_.chunkhandle_),
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _impl_.padded_chunk_),
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::MultiWriteReply, _impl_.bytes_written_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkWriteRequest, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkWriteRequest, _impl_.chunk_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rpc::CopyChunkWriteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Rpc::LogEntry)},
  { 15, -1, -1, sizeof(::Rpc::AppendEntriesArgs)},
  { 27, -1, -1, sizeof(::Rpc::AppendEntriesReply)},
  { 37, -1, -1, sizeof(::Rpc::RequestVoteArgs)},
  { 47, -1, -1, sizeof(::Rpc::RequestVoteReply)},
  { 55, -1, -1, sizeof(::Rpc::FindAddrRequest)},
  { 62, -1, -1, sizeof(::Rpc::FindAddrReply_ReplicaAddrs)},
  { 69, -1, -1, sizeof(::Rpc::FindAddrReply)},
  { 77, -1, -1, sizeof(::Rpc::GetWriteAddrRequest)},
  { 85, -1, -1, sizeof(::Rpc::GetWriteAddrReply_ReplicaAddrs)},
  { 92, -1, -1, sizeof(::Rpc::GetWriteAddrReply)},
  { 100, -1, -1, sizeof(::Rpc::GetSubDirNamesRequest)},
  { 107, -1, -1, sizeof(::Rpc::GetSubDirNamesReply)},
  { 114, -1, -1, sizeof(::Rpc::MkdirRequest)},
  { 121, -1, -1, sizeof(::Rpc::MkdirReply)},
  { 127, -1, -1, sizeof(::Rpc::RenameRequest)},
  { 135, -1, -1, sizeof(::Rpc::RenameReply)},
  { 141, -1, -1, sizeof(::Rpc::DeleteRequest)},
  { 148, -1, -1, sizeof(::Rpc::DeleteReply)},
  { 154, -1, -1, sizeof(::Rpc::StatRequest)},
  { 161, -1, -1, sizeof(::Rpc::StatReply)},
  { 170, -1, -1, sizeof(::Rpc::HelloRequest)},
  { 177, -1, -1, sizeof(::Rpc::HelloReply)},
  { 184, -1, -1, sizeof(::Rpc::WriteChunkRequest)},
  { 196, -1, -1, sizeof(::Rpc::WriteChunkReply)},
  { 203, -1, -1, sizeof(::Rpc::ReadChunkRequest)},
  { 212, -1, -1, sizeof(::Rpc::ReadChunkReply)},
  { 220, -1, -1, sizeof(::Rpc::DataNodeLocation)},
  { 227, -1, -1, sizeof(::Rpc::DataNode)},
  { 236, -1, -1, sizeof(::Rpc::Chunk)},
  { 245, -1, -1, sizeof(::Rpc::ReportDataNodeRequest)},
  { 254, -1, -1, sizeof(::Rpc::ReportDataNodeReply)},
  { 260, -1, -1, sizeof(::Rpc::HeartbeatRequest)},
  { 266, -1, -1, sizeof(::Rpc::HeartbeatReply)},
  { 273, -1, -1, sizeof(::Rpc::CopyChunkRequest)},
  { 281, -1, -1, sizeof(::Rpc::CopyChunkReply)},
  { 287, -1, -1, sizeof(::Rpc::MultiWriteRequest)},
  { 298, -1, -1, sizeof(::Rpc::MultiWriteReply)},
  { 305, -1, -1, sizeof(::Rpc::CopyChunkWriteRequest)},
  { 313, -1, -1, sizeof(::Rpc::CopyChunkWriteReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Rpc::_LogEntry_default_instance_._instance,
  &::Rpc::_AppendEntriesArgs_default_instance_._instance,
  &::Rpc::_AppendEntriesReply_default_instance_._instance,
  &::Rpc::_RequestVoteArgs_default_instance_._instance,
  &::Rpc::_RequestVoteReply_default_instance_._instance,
  &::Rpc::_FindAddrRequest_default_instance_._instance,
  &::Rpc::_FindAddrReply_ReplicaAddrs_default_instance_._instance,
  &::Rpc::_FindAddrReply_default_instance_._instance,
  &::Rpc::_GetWriteAddrRequest_default_instance_._instance,
  &::Rpc::_GetWriteAddrReply_ReplicaAddrs_default_instance_._instance,
  &::Rpc::_GetWriteAddrReply_default_instance_._instance,
  &::Rpc::_GetSubDirNamesRequest_default_instance_._instance,
  &::Rpc::_GetSubDirNamesReply_default_instance_._instance,
  &::Rpc::_MkdirRequest_default_instance_._instance,
  &::Rpc::_MkdirReply_default_instance_._instance,
  &::Rpc::_RenameRequest_default_instance_._instance,
  &::Rpc::_RenameReply_default_instance_._instance,
  &::Rpc::_DeleteRequest_default_instance_._instance,
  &::Rpc::_DeleteReply_default_instance_._instance,
  &::Rpc::_StatRequest_default_instance_._instance,
  &::Rpc::_StatReply_default_instance_._instance,
  &::Rpc::_HelloRequest_default_instance_._instance,
  &::Rpc::_HelloReply_default_instance_._instance,
  &::Rpc::_WriteChunkRequest_default_instance_._instance,
  &::Rpc::_WriteChunkReply_default_instance_._instance,
  &::Rpc::_ReadChunkRequest_default_instance_._instance,
  &::Rpc::_ReadChunkReply_default_instance_._instance,
  &::Rpc::_DataNodeLocation_default_instance_._instance,
  &::Rpc::_DataNode_default_instance_._instance,
  &::Rpc::_Chunk_default_instance_._instance,
  &::Rpc::_ReportDataNodeRequest_default_instance_._instance,
  &::Rpc::_ReportDataNodeReply_default_instance_._instance,
  &::Rpc::_HeartbeatRequest_default_instance_._instance,
  &::Rpc::_HeartbeatReply_default_instance_._instance,
  &::Rpc::_CopyChunkRequest_default_instance_._instance,
  &::Rpc::_CopyChunkReply_default_instance_._instance,
  &::Rpc::_MultiWriteRequest_default_instance_._instance,
  &::Rpc::_MultiWriteReply_default_instance_._instance,
  &::Rpc::_CopyChunkWriteRequest_default_instance_._instance,
  &::Rpc::_CopyChunkWriteReply_default_instance_._instance,
};

const char descriptor_table_protodef_final_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013final.proto\022\003Rpc\"\320\001\n\010LogEntry\022\014\n\004Term\030"
  "\001 \001(\005\022\017\n\007command\030\002 \001(\005\022&\n\004getw\030\003 \001(\0132\030.R"
  "pc.GetWriteAddrRequest\022\"\n\006rename\030\004 \001(\0132\022"
  ".Rpc.RenameRequest\022\037\n\003del\030\005 \001(\0132\022.Rpc.De"
  "leteRequest\022\020\n\010filepath\030\006 \001(\t\022\013\n\003src\030\007 \001"
  "(\t\022\013\n\003des\030\010 \001(\t\022\014\n\004size\030\t \001(\003\"\225\001\n\021Append"
  "EntriesArgs\022\036\n\007Entries\030\001 \003(\0132\r.Rpc.LogEn"
  "try\022\r\n\005ATerm\030\002 \001(\005\022\020\n\010LeaderId\030\003 \001(\005\022\024\n\014"
  "PrevLogIndex\030\004 \001(\005\022\023\n\013PrevLogTerm\030\005 \001(\005\022"
  "\024\n\014LeaderCommit\030\006 \001(\005\"d\n\022AppendEntriesRe"
  "ply\022\014\n\004Term\030\001 \001(\005\022\017\n\007Success\030\002 \001(\010\022\023\n\013Up"
  "NextIndex\030\003 \001(\005\022\032\n\022AppendEntriesState\030\004 "
  "\001(\005\"_\n\017RequestVoteArgs\022\014\n\004term\030\001 \001(\005\022\023\n\013"
  "candidateId\030\002 \001(\005\022\024\n\014lastLogindex\030\003 \001(\005\022"
  "\023\n\013lastLogterm\030\004 \001(\005\"5\n\020RequestVoteReply"
  "\022\014\n\004term\030\001 \001(\005\022\023\n\013votegranted\030\002 \001(\010\"#\n\017F"
  "indAddrRequest\022\020\n\010filepath\030\001 \001(\t\"x\n\rFind"
  "AddrReply\022\025\n\rchunk_handles\030\001 \003(\003\022.\n\005addr"
  "s\030\002 \003(\0132\037.Rpc.FindAddrReply.ReplicaAddrs"
  "\032 \n\014ReplicaAddrs\022\020\n\010ip_ports\030\001 \003(\t\"H\n\023Ge"
  "tWriteAddrRequest\022\030\n\020remote_file_path\030\001 "
  "\001(\t\022\027\n\017write_data_size\030\002 \001(\003\"\200\001\n\021GetWrit"
  "eAddrReply\022\025\n\rchunk_handles\030\001 \003(\003\0222\n\005add"
  "rs\030\002 \003(\0132#.Rpc.GetWriteAddrReply.Replica"
  "Addrs\032 \n\014ReplicaAddrs\022\020\n\010ip_ports\030\001 \003(\t\""
  "*\n\025GetSubDirNamesRequest\022\021\n\tfile_path\030\001 "
  "\001(\t\"0\n\023GetSubDirNamesReply\022\031\n\021subdir_fil"
  "e_names\030\001 \003(\t\"%\n\014MkdirRequest\022\025\n\rnew_fil"
  "e_path\030\001 \001(\t\"\014\n\nMkdirReply\"3\n\rRenameRequ"
  "est\022\020\n\010src_path\030\001 \001(\t\022\020\n\010des_path\030\002 \001(\t\""
  "\r\n\013RenameReply\")\n\rDeleteRequest\022\030\n\020remot"
  "e_file_path\030\001 \001(\t\"\r\n\013DeleteReply\"\037\n\013Stat"
  "Request\022\020\n\010filepath\030\001 \001(\t\"B\n\tStatReply\022\017"
  "\n\007existed\030\001 \001(\010\022\021\n\tfile_name\030\002 \001(\t\022\021\n\tfi"
  "le_size\030\003 \001(\004\"\034\n\014HelloRequest\022\014\n\004name\030\001 "
  "\001(\t\"\035\n\nHelloReply\022\017\n\007message\030\001 \001(\t\"|\n\021Wr"
  "iteChunkRequest\022\021\n\tclient_id\030\001 \001(\003\022\023\n\013ch"
  "unkhandle\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\022\016\n\006lengt"
  "h\030\004 \001(\003\022\021\n\tlocations\030\005 \003(\t\022\014\n\004data\030\006 \001(\014"
  "\"%\n\017WriteChunkReply\022\022\n\nbytes_read\030\002 \001(\003\""
  "G\n\020ReadChunkRequest\022\023\n\013chunkhandle\030\001 \001(\003"
  "\022\016\n\006offset\030\002 \001(\003\022\016\n\006length\030\003 \001(\003\"2\n\016Read"
  "ChunkReply\022\014\n\004data\030\001 \001(\t\022\022\n\nbytes_read\030\002"
  " \001(\003\"$\n\020DataNodeLocation\022\020\n\010location\030\001 \001"
  "(\t\"R\n\010DataNode\022\020\n\010location\030\001 \001(\t\022\026\n\016avai"
  "lable_size\030\002 \001(\r\022\034\n\024stored_chunk_handles"
  "\030\003 \003(\003\"=\n\005Chunk\022\024\n\014chunk_handle\030\001 \001(\003\022\020\n"
  "\010location\030\002 \003(\t\022\014\n\004size\030\003 \001(\003\"_\n\025ReportD"
  "ataNodeRequest\022\020\n\010location\030\001 \001(\t\022\026\n\016avai"
  "lable_size\030\002 \001(\r\022\034\n\024stored_chunk_handles"
  "\030\003 \003(\003\"\025\n\023ReportDataNodeReply\"\022\n\020Heartbe"
  "atRequest\"8\n\016HeartbeatReply\022&\n\007request\030\001"
  " \001(\0132\025.Rpc.HeartbeatRequest\":\n\020CopyChunk"
  "Request\022\020\n\010location\030\001 \001(\t\022\024\n\014chunk_handl"
  "e\030\002 \001(\003\"\020\n\016CopyChunkReply\"o\n\021MultiWriteR"
  "equest\022\021\n\tclient_id\030\001 \001(\003\022\023\n\013chunkhandle"
  "\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\022\024\n\014padded_chunk\030\004"
  " \001(\010\022\014\n\004data\030\005 \001(\014\"(\n\017MultiWriteReply\022\025\n"
  "\rbytes_written\030\001 \001(\003\";\n\025CopyChunkWriteRe"
  "quest\022\014\n\004data\030\001 \001(\014\022\024\n\014chunk_handle\030\002 \001("
  "\003\"\025\n\023CopyChunkWriteReply2\223\004\n\nCli2Master\022"
  "6\n\010FindAddr\022\024.Rpc.FindAddrRequest\032\022.Rpc."
  "FindAddrReply\"\000\022B\n\014GetWriteAddr\022\030.Rpc.Ge"
  "tWriteAddrRequest\032\026.Rpc.GetWriteAddrRepl"
  "y\"\000\022*\n\004Stat\022\020.Rpc.StatRequest\032\016.Rpc.Stat"
  "Reply\"\000\0220\n\006Rename\022\022.Rpc.RenameRequest\032\020."
  "Rpc.RenameReply\"\000\0220\n\006Delete\022\022.Rpc.Delete"
  "Request\032\020.Rpc.DeleteReply\"\000\022-\n\005Mkdir\022\021.R"
  "pc.MkdirRequest\032\017.Rpc.MkdirReply\"\000\022H\n\016Ge"
  "tSubDirNames\022\032.Rpc.GetSubDirNamesRequest"
  "\032\030.Rpc.GetSubDirNamesReply\"\000\022<\n\013RequestV"
  "ote\022\024.Rpc.RequestVoteArgs\032\025.Rpc.RequestV"
  "oteReply\"\000\022B\n\rAppendEntries\022\026.Rpc.Append"
  "EntriesArgs\032\027.Rpc.AppendEntriesReply\"\0002\274"
  "\001\n\017Cli2ChunkServer\0229\n\tReadChunk\022\025.Rpc.Re"
  "adChunkRequest\032\023.Rpc.ReadChunkReply\"\000\022<\n"
  "\nWriteChunk\022\026.Rpc.WriteChunkRequest\032\024.Rp"
  "c.WriteChunkReply\"\000\0220\n\010SayHello\022\021.Rpc.He"
  "lloRequest\032\017.Rpc.HelloReply\"\0002\225\001\n\030DataNo"
  "deControlerService\022>\n\016CheckHeartbeat\022\025.R"
  "pc.HeartbeatRequest\032\023.Rpc.HeartbeatReply"
  "\"\000\0229\n\tCopyChunk\022\025.Rpc.CopyChunkRequest\032\023"
  ".Rpc.CopyChunkReply\"\0002a\n\025ReportDataNodeS"
  "erivce\022H\n\016ReportDataNode\022\032.Rpc.ReportDat"
  "aNodeRequest\032\030.Rpc.ReportDataNodeReply\"\000"
  "2\241\001\n\027ChunkServer2Chunkserver\022<\n\nMultiWri"
  "te\022\026.Rpc.MultiWriteRequest\032\024.Rpc.MultiWr"
  "iteReply\"\000\022H\n\016CopyChunkWrite\022\032.Rpc.CopyC"
  "hunkWriteRequest\032\030.Rpc.CopyChunkWriteRep"
  "ly\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_final_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_final_2eproto = {
    false, false, 3572, descriptor_table_protodef_final_2eproto,
    "final.proto",
    &descriptor_table_final_2eproto_once, nullptr, 0, 40,
    schemas, file_default_instances, TableStruct_final_2eproto::offsets,
    file_level_metadata_final_2eproto, file_level_enum_descriptors_final_2eproto,
    file_level_service_descriptors_final_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_final_2eproto_getter() {
  return &descriptor_table_final_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_final_2eproto(&descriptor_table_final_2eproto);
namespace Rpc {

// ===================================================================

class LogEntry::_Internal {
 public:
  static const ::Rpc::GetWriteAddrRequest& getw(const LogEntry* msg);
  static const ::Rpc::RenameRequest& rename(const LogEntry* msg);
  static const ::Rpc::DeleteRequest& del(const LogEntry* msg);
};

const ::Rpc::GetWriteAddrRequest&
LogEntry::_Internal::getw(const LogEntry* msg) {
  return *msg->_impl_.getw_;
}
const ::Rpc::RenameRequest&
LogEntry::_Internal::rename(const LogEntry* msg) {
  return *msg->_impl_.rename_;
}
const ::Rpc::DeleteRequest&
LogEntry::_Internal::del(const LogEntry* msg) {
  return *msg->_impl_.del_;
}
LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.src_){}
    , decltype(_impl_.des_){}
    , decltype(_impl_.getw_){nullptr}
    , decltype(_impl_.rename_){nullptr}
    , decltype(_impl_.del_){nullptr}
    , decltype(_impl_.term_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  _impl_.des_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_des().empty()) {
    _this->_impl_.des_.Set(from._internal_des(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_getw()) {
    _this->_impl_.getw_ = new ::Rpc::GetWriteAddrRequest(*from._impl_.getw_);
  }
  if (from._internal_has_rename()) {
    _this->_impl_.rename_ = new ::Rpc::RenameRequest(*from._impl_.rename_);
  }
  if (from._internal_has_del()) {
    _this->_impl_.del_ = new ::Rpc::DeleteRequest(*from._impl_.del_);
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:Rpc.LogEntry)
}

inline void LogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , decltype(_impl_.src_){}
    , decltype(_impl_.des_){}
    , decltype(_impl_.getw_){nullptr}
    , decltype(_impl_.rename_){nullptr}
    , decltype(_impl_.del_){nullptr}
    , decltype(_impl_.term_){0}
    , decltype(_impl_.command_){0}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.des_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:Rpc.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
  _impl_.src_.Destroy();
  _impl_.des_.Destroy();
  if (this != internal_default_instance()) delete _impl_.getw_;
  if (this != internal_default_instance()) delete _impl_.rename_;
  if (this != internal_default_instance()) delete _impl_.del_;
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _impl_.src_.ClearToEmpty();
  _impl_.des_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.getw_ != nullptr) {
    delete _impl_.getw_;
  }
  _impl_.getw_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rename_ != nullptr) {
    delete _impl_.rename_;
  }
  _impl_.rename_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.del_ != nullptr) {
    delete _impl_.del_;
  }
  _impl_.del_ = nullptr;
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rpc.GetWriteAddrRequest getw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rpc.RenameRequest rename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Rpc.DeleteRequest del = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_del(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filepath = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.LogEntry.filepath"));
        } else
          goto handle_unusual;
        continue;
      // string src = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.LogEntry.src"));
        } else
          goto handle_unusual;
        continue;
      // string des = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_des();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.LogEntry.des"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_command(), target);
  }

  // .Rpc.GetWriteAddrRequest getw = 3;
  if (this->_internal_has_getw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::getw(this),
        _Internal::getw(this).GetCachedSize(), target, stream);
  }

  // .Rpc.RenameRequest rename = 4;
  if (this->_internal_has_rename()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rename(this),
        _Internal::rename(this).GetCachedSize(), target, stream);
  }

  // .Rpc.DeleteRequest del = 5;
  if (this->_internal_has_del()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::del(this),
        _Internal::del(this).GetCachedSize(), target, stream);
  }

  // string filepath = 6;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.filepath");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_filepath(), target);
  }

  // string src = 7;
  if (!this->_internal_src().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src().data(), static_cast<int>(this->_internal_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.src");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_src(), target);
  }

  // string des = 8;
  if (!this->_internal_des().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_des().data(), static_cast<int>(this->_internal_des().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.LogEntry.des");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_des(), target);
  }

  // int64 size = 9;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 6;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // string src = 7;
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src());
  }

  // string des = 8;
  if (!this->_internal_des().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_des());
  }

  // .Rpc.GetWriteAddrRequest getw = 3;
  if (this->_internal_has_getw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.getw_);
  }

  // .Rpc.RenameRequest rename = 4;
  if (this->_internal_has_rename()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rename_);
  }

  // .Rpc.DeleteRequest del = 5;
  if (this->_internal_has_del()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.del_);
  }

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 command = 2;
  if (this->_internal_command() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_command());
  }

  // int64 size = 9;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.LogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_des().empty()) {
    _this->_internal_set_des(from._internal_des());
  }
  if (from._internal_has_getw()) {
    _this->_internal_mutable_getw()->::Rpc::GetWriteAddrRequest::MergeFrom(
        from._internal_getw());
  }
  if (from._internal_has_rename()) {
    _this->_internal_mutable_rename()->::Rpc::RenameRequest::MergeFrom(
        from._internal_rename());
  }
  if (from._internal_has_del()) {
    _this->_internal_mutable_del()->::Rpc::DeleteRequest::MergeFrom(
        from._internal_del());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.des_, lhs_arena,
      &other->_impl_.des_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.size_)
      + sizeof(LogEntry::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.getw_)>(
          reinterpret_cast<char*>(&_impl_.getw_),
          reinterpret_cast<char*>(&other->_impl_.getw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[0]);
}

// ===================================================================

class AppendEntriesArgs::_Internal {
 public:
};

AppendEntriesArgs::AppendEntriesArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.aterm_){}
    , decltype(_impl_.leaderid_){}
    , decltype(_impl_.prevlogindex_){}
    , decltype(_impl_.prevlogterm_){}
    , decltype(_impl_.leadercommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aterm_, &from._impl_.aterm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leadercommit_) -
    reinterpret_cast<char*>(&_impl_.aterm_)) + sizeof(_impl_.leadercommit_));
  // @@protoc_insertion_point(copy_constructor:Rpc.AppendEntriesArgs)
}

inline void AppendEntriesArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.aterm_){0}
    , decltype(_impl_.leaderid_){0}
    , decltype(_impl_.prevlogindex_){0}
    , decltype(_impl_.prevlogterm_){0}
    , decltype(_impl_.leadercommit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:Rpc.AppendEntriesArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  ::memset(&_impl_.aterm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leadercommit_) -
      reinterpret_cast<char*>(&_impl_.aterm_)) + sizeof(_impl_.leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Rpc.LogEntry Entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ATerm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.aterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PrevLogTerm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LeaderCommit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.AppendEntriesArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Rpc.LogEntry Entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 ATerm = 2;
  if (this->_internal_aterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_aterm(), target);
  }

  // int32 LeaderId = 3;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_leaderid(), target);
  }

  // int32 PrevLogIndex = 4;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prevlogindex(), target);
  }

  // int32 PrevLogTerm = 5;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_prevlogterm(), target);
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.AppendEntriesArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rpc.LogEntry Entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ATerm = 2;
  if (this->_internal_aterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aterm());
  }

  // int32 LeaderId = 3;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leaderid());
  }

  // int32 PrevLogIndex = 4;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogindex());
  }

  // int32 PrevLogTerm = 5;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogterm());
  }

  // int32 LeaderCommit = 6;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesArgs::GetClassData() const { return &_class_data_; }


void AppendEntriesArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesArgs*>(&to_msg);
  auto& from = static_cast<const AppendEntriesArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_aterm() != 0) {
    _this->_internal_set_aterm(from._internal_aterm());
  }
  if (from._internal_leaderid() != 0) {
    _this->_internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_prevlogindex() != 0) {
    _this->_internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _this->_internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _this->_internal_set_leadercommit(from._internal_leadercommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.leadercommit_)
      + sizeof(AppendEntriesArgs::_impl_.leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesArgs, _impl_.aterm_)>(
          reinterpret_cast<char*>(&_impl_.aterm_),
          reinterpret_cast<char*>(&other->_impl_.aterm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[1]);
}

// ===================================================================

class AppendEntriesReply::_Internal {
 public:
};

AppendEntriesReply::AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.upnextindex_){}
    , decltype(_impl_.appendentriesstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appendentriesstate_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.appendentriesstate_));
  // @@protoc_insertion_point(copy_constructor:Rpc.AppendEntriesReply)
}

inline void AppendEntriesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.upnextindex_){0}
    , decltype(_impl_.appendentriesstate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:Rpc.AppendEntriesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.appendentriesstate_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.appendentriesstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 UpNextIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.upnextindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AppendEntriesState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.appendentriesstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 UpNextIndex = 3;
  if (this->_internal_upnextindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_upnextindex(), target);
  }

  // int32 AppendEntriesState = 4;
  if (this->_internal_appendentriesstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_appendentriesstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.AppendEntriesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool Success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 UpNextIndex = 3;
  if (this->_internal_upnextindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_upnextindex());
  }

  // int32 AppendEntriesState = 4;
  if (this->_internal_appendentriesstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_appendentriesstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesReply::GetClassData() const { return &_class_data_; }


void AppendEntriesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesReply*>(&to_msg);
  auto& from = static_cast<const AppendEntriesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_upnextindex() != 0) {
    _this->_internal_set_upnextindex(from._internal_upnextindex());
  }
  if (from._internal_appendentriesstate() != 0) {
    _this->_internal_set_appendentriesstate(from._internal_appendentriesstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.appendentriesstate_)
      + sizeof(AppendEntriesReply::_impl_.appendentriesstate_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[2]);
}

// ===================================================================

class RequestVoteArgs::_Internal {
 public:
};

RequestVoteArgs::RequestVoteArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.candidateid_){}
    , decltype(_impl_.lastlogindex_){}
    , decltype(_impl_.lastlogterm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastlogterm_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:Rpc.RequestVoteArgs)
}

inline void RequestVoteArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.candidateid_){0}
    , decltype(_impl_.lastlogindex_){0}
    , decltype(_impl_.lastlogterm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:Rpc.RequestVoteArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastlogterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 candidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastLogindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastLogterm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RequestVoteArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 lastLogindex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 lastLogterm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RequestVoteArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_candidateid());
  }

  // int32 lastLogindex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogindex());
  }

  // int32 lastLogterm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteArgs::GetClassData() const { return &_class_data_; }


void RequestVoteArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteArgs*>(&to_msg);
  auto& from = static_cast<const RequestVoteArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_candidateid() != 0) {
    _this->_internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_lastlogindex() != 0) {
    _this->_internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _this->_internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteArgs, _impl_.lastlogterm_)
      + sizeof(RequestVoteArgs::_impl_.lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteArgs, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[3]);
}

// ===================================================================

class RequestVoteReply::_Internal {
 public:
};

RequestVoteReply::RequestVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.votegranted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.votegranted_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  // @@protoc_insertion_point(copy_constructor:Rpc.RequestVoteReply)
}

inline void RequestVoteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.votegranted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:Rpc.RequestVoteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RequestVoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.votegranted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool votegranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RequestVoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool votegranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RequestVoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool votegranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteReply::GetClassData() const { return &_class_data_; }


void RequestVoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteReply*>(&to_msg);
  auto& from = static_cast<const RequestVoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _this->_internal_set_votegranted(from._internal_votegranted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteReply, _impl_.votegranted_)
      + sizeof(RequestVoteReply::_impl_.votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[4]);
}

// ===================================================================

class FindAddrRequest::_Internal {
 public:
};

FindAddrRequest::FindAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.FindAddrRequest)
}
FindAddrRequest::FindAddrRequest(const FindAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindAddrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrRequest)
}

inline void FindAddrRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindAddrRequest::~FindAddrRequest() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
}

void FindAddrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filepath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.FindAddrRequest.filepath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrRequest.filepath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrRequest)
  return target;
}

size_t FindAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrRequest::GetClassData() const { return &_class_data_; }


void FindAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindAddrRequest*>(&to_msg);
  auto& from = static_cast<const FindAddrRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrRequest::CopyFrom(const FindAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrRequest::IsInitialized() const {
  return true;
}

void FindAddrRequest::InternalSwap(FindAddrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[5]);
}

// ===================================================================

class FindAddrReply_ReplicaAddrs::_Internal {
 public:
};

FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.FindAddrReply.ReplicaAddrs)
}
FindAddrReply_ReplicaAddrs::FindAddrReply_ReplicaAddrs(const FindAddrReply_ReplicaAddrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindAddrReply_ReplicaAddrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_ports_){from._impl_.ip_ports_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrReply.ReplicaAddrs)
}

inline void FindAddrReply_ReplicaAddrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_ports_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FindAddrReply_ReplicaAddrs::~FindAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrReply.ReplicaAddrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindAddrReply_ReplicaAddrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_ports_.~RepeatedPtrField();
}

void FindAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_ports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrReply_ReplicaAddrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ip_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_ports();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Rpc.FindAddrReply.ReplicaAddrs.ip_ports"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrReply_ReplicaAddrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->_internal_ip_ports_size(); i < n; i++) {
    const auto& s = this->_internal_ip_ports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.FindAddrReply.ReplicaAddrs.ip_ports");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrReply.ReplicaAddrs)
  return target;
}

size_t FindAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ip_ports_.size());
  for (int i = 0, n = _impl_.ip_ports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ip_ports_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrReply_ReplicaAddrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindAddrReply_ReplicaAddrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrReply_ReplicaAddrs::GetClassData() const { return &_class_data_; }


void FindAddrReply_ReplicaAddrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindAddrReply_ReplicaAddrs*>(&to_msg);
  auto& from = static_cast<const FindAddrReply_ReplicaAddrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_ports_.MergeFrom(from._impl_.ip_ports_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrReply_ReplicaAddrs::CopyFrom(const FindAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void FindAddrReply_ReplicaAddrs::InternalSwap(FindAddrReply_ReplicaAddrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_ports_.InternalSwap(&other->_impl_.ip_ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrReply_ReplicaAddrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[6]);
}

// ===================================================================

class FindAddrReply::_Internal {
 public:
};

FindAddrReply::FindAddrReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.FindAddrReply)
}
FindAddrReply::FindAddrReply(const FindAddrReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindAddrReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_handles_){from._impl_.chunk_handles_}
    , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.addrs_){from._impl_.addrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.FindAddrReply)
}

inline void FindAddrReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_handles_){arena}
    , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.addrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FindAddrReply::~FindAddrReply() {
  // @@protoc_insertion_point(destructor:Rpc.FindAddrReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindAddrReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_handles_.~RepeatedField();
  _impl_.addrs_.~RepeatedPtrField();
}

void FindAddrReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.FindAddrReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_handles_.Clear();
  _impl_.addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAddrReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 chunk_handles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAddrReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.FindAddrReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    int byte_size = _impl_._chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_chunk_handles(), byte_size, target);
    }
  }

  // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.FindAddrReply)
  return target;
}

size_t FindAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.FindAddrReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Rpc.FindAddrReply.ReplicaAddrs addrs = 2;
  total_size += 1UL * this->_internal_addrs_size();
  for (const auto& msg : this->_impl_.addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAddrReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindAddrReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAddrReply::GetClassData() const { return &_class_data_; }


void FindAddrReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindAddrReply*>(&to_msg);
  auto& from = static_cast<const FindAddrReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.FindAddrReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunk_handles_.MergeFrom(from._impl_.chunk_handles_);
  _this->_impl_.addrs_.MergeFrom(from._impl_.addrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAddrReply::CopyFrom(const FindAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.FindAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAddrReply::IsInitialized() const {
  return true;
}

void FindAddrReply::InternalSwap(FindAddrReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunk_handles_.InternalSwap(&other->_impl_.chunk_handles_);
  _impl_.addrs_.InternalSwap(&other->_impl_.addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAddrReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[7]);
}

// ===================================================================

class GetWriteAddrRequest::_Internal {
 public:
};

GetWriteAddrRequest::GetWriteAddrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.GetWriteAddrRequest)
}
GetWriteAddrRequest::GetWriteAddrRequest(const GetWriteAddrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWriteAddrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_file_path_){}
    , decltype(_impl_.write_data_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_file_path().empty()) {
    _this->_impl_.remote_file_path_.Set(from._internal_remote_file_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.write_data_size_ = from._impl_.write_data_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrRequest)
}

inline void GetWriteAddrRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_file_path_){}
    , decltype(_impl_.write_data_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.remote_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWriteAddrRequest::~GetWriteAddrRequest() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWriteAddrRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_file_path_.Destroy();
}

void GetWriteAddrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWriteAddrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remote_file_path_.ClearToEmpty();
  _impl_.write_data_size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string remote_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remote_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.GetWriteAddrRequest.remote_file_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 write_data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.write_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_file_path().data(), static_cast<int>(this->_internal_remote_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrRequest.remote_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_file_path(), target);
  }

  // int64 write_data_size = 2;
  if (this->_internal_write_data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_write_data_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrRequest)
  return target;
}

size_t GetWriteAddrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_file_path());
  }

  // int64 write_data_size = 2;
  if (this->_internal_write_data_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_write_data_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWriteAddrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrRequest::GetClassData() const { return &_class_data_; }


void GetWriteAddrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWriteAddrRequest*>(&to_msg);
  auto& from = static_cast<const GetWriteAddrRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_file_path().empty()) {
    _this->_internal_set_remote_file_path(from._internal_remote_file_path());
  }
  if (from._internal_write_data_size() != 0) {
    _this->_internal_set_write_data_size(from._internal_write_data_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrRequest::CopyFrom(const GetWriteAddrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrRequest::IsInitialized() const {
  return true;
}

void GetWriteAddrRequest::InternalSwap(GetWriteAddrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_file_path_, lhs_arena,
      &other->_impl_.remote_file_path_, rhs_arena
  );
  swap(_impl_.write_data_size_, other->_impl_.write_data_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[8]);
}

// ===================================================================

class GetWriteAddrReply_ReplicaAddrs::_Internal {
 public:
};

GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
}
GetWriteAddrReply_ReplicaAddrs::GetWriteAddrReply_ReplicaAddrs(const GetWriteAddrReply_ReplicaAddrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWriteAddrReply_ReplicaAddrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_ports_){from._impl_.ip_ports_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
}

inline void GetWriteAddrReply_ReplicaAddrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_ports_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWriteAddrReply_ReplicaAddrs::~GetWriteAddrReply_ReplicaAddrs() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrReply.ReplicaAddrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWriteAddrReply_ReplicaAddrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_ports_.~RepeatedPtrField();
}

void GetWriteAddrReply_ReplicaAddrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWriteAddrReply_ReplicaAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_ports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrReply_ReplicaAddrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ip_ports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_ports();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Rpc.GetWriteAddrReply.ReplicaAddrs.ip_ports"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrReply_ReplicaAddrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  for (int i = 0, n = this->_internal_ip_ports_size(); i < n; i++) {
    const auto& s = this->_internal_ip_ports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetWriteAddrReply.ReplicaAddrs.ip_ports");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrReply.ReplicaAddrs)
  return target;
}

size_t GetWriteAddrReply_ReplicaAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_ports = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ip_ports_.size());
  for (int i = 0, n = _impl_.ip_ports_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ip_ports_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrReply_ReplicaAddrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWriteAddrReply_ReplicaAddrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrReply_ReplicaAddrs::GetClassData() const { return &_class_data_; }


void GetWriteAddrReply_ReplicaAddrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWriteAddrReply_ReplicaAddrs*>(&to_msg);
  auto& from = static_cast<const GetWriteAddrReply_ReplicaAddrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_ports_.MergeFrom(from._impl_.ip_ports_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrReply_ReplicaAddrs::CopyFrom(const GetWriteAddrReply_ReplicaAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrReply.ReplicaAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply_ReplicaAddrs::IsInitialized() const {
  return true;
}

void GetWriteAddrReply_ReplicaAddrs::InternalSwap(GetWriteAddrReply_ReplicaAddrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_ports_.InternalSwap(&other->_impl_.ip_ports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrReply_ReplicaAddrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[9]);
}

// ===================================================================

class GetWriteAddrReply::_Internal {
 public:
};

GetWriteAddrReply::GetWriteAddrReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.GetWriteAddrReply)
}
GetWriteAddrReply::GetWriteAddrReply(const GetWriteAddrReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWriteAddrReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_handles_){from._impl_.chunk_handles_}
    , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.addrs_){from._impl_.addrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetWriteAddrReply)
}

inline void GetWriteAddrReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_handles_){arena}
    , /*decltype(_impl_._chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.addrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWriteAddrReply::~GetWriteAddrReply() {
  // @@protoc_insertion_point(destructor:Rpc.GetWriteAddrReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWriteAddrReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_handles_.~RepeatedField();
  _impl_.addrs_.~RepeatedPtrField();
}

void GetWriteAddrReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWriteAddrReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetWriteAddrReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_handles_.Clear();
  _impl_.addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWriteAddrReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 chunk_handles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetWriteAddrReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetWriteAddrReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    int byte_size = _impl_._chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_chunk_handles(), byte_size, target);
    }
  }

  // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetWriteAddrReply)
  return target;
}

size_t GetWriteAddrReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetWriteAddrReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chunk_handles = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Rpc.GetWriteAddrReply.ReplicaAddrs addrs = 2;
  total_size += 1UL * this->_internal_addrs_size();
  for (const auto& msg : this->_impl_.addrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWriteAddrReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWriteAddrReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWriteAddrReply::GetClassData() const { return &_class_data_; }


void GetWriteAddrReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWriteAddrReply*>(&to_msg);
  auto& from = static_cast<const GetWriteAddrReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetWriteAddrReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunk_handles_.MergeFrom(from._impl_.chunk_handles_);
  _this->_impl_.addrs_.MergeFrom(from._impl_.addrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWriteAddrReply::CopyFrom(const GetWriteAddrReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetWriteAddrReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteAddrReply::IsInitialized() const {
  return true;
}

void GetWriteAddrReply::InternalSwap(GetWriteAddrReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunk_handles_.InternalSwap(&other->_impl_.chunk_handles_);
  _impl_.addrs_.InternalSwap(&other->_impl_.addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWriteAddrReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[10]);
}

// ===================================================================

class GetSubDirNamesRequest::_Internal {
 public:
};

GetSubDirNamesRequest::GetSubDirNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.GetSubDirNamesRequest)
}
GetSubDirNamesRequest::GetSubDirNamesRequest(const GetSubDirNamesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSubDirNamesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    _this->_impl_.file_path_.Set(from._internal_file_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.GetSubDirNamesRequest)
}

inline void GetSubDirNamesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSubDirNamesRequest::~GetSubDirNamesRequest() {
  // @@protoc_insertion_point(destructor:Rpc.GetSubDirNamesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSubDirNamesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_path_.Destroy();
}

void GetSubDirNamesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSubDirNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetSubDirNamesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubDirNamesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.GetSubDirNamesRequest.file_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubDirNamesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetSubDirNamesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesRequest.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetSubDirNamesRequest)
  return target;
}

size_t GetSubDirNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetSubDirNamesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubDirNamesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSubDirNamesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubDirNamesRequest::GetClassData() const { return &_class_data_; }


void GetSubDirNamesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSubDirNamesRequest*>(&to_msg);
  auto& from = static_cast<const GetSubDirNamesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetSubDirNamesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _this->_internal_set_file_path(from._internal_file_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubDirNamesRequest::CopyFrom(const GetSubDirNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetSubDirNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirNamesRequest::IsInitialized() const {
  return true;
}

void GetSubDirNamesRequest::InternalSwap(GetSubDirNamesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_path_, lhs_arena,
      &other->_impl_.file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubDirNamesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[11]);
}

// ===================================================================

class GetSubDirNamesReply::_Internal {
 public:
};

GetSubDirNamesReply::GetSubDirNamesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.GetSubDirNamesReply)
}
GetSubDirNamesReply::GetSubDirNamesReply(const GetSubDirNamesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSubDirNamesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subdir_file_names_){from._impl_.subdir_file_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.GetSubDirNamesReply)
}

inline void GetSubDirNamesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subdir_file_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSubDirNamesReply::~GetSubDirNamesReply() {
  // @@protoc_insertion_point(destructor:Rpc.GetSubDirNamesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSubDirNamesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subdir_file_names_.~RepeatedPtrField();
}

void GetSubDirNamesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSubDirNamesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.GetSubDirNamesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subdir_file_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubDirNamesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string subdir_file_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subdir_file_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Rpc.GetSubDirNamesReply.subdir_file_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubDirNamesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.GetSubDirNamesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subdir_file_names = 1;
  for (int i = 0, n = this->_internal_subdir_file_names_size(); i < n; i++) {
    const auto& s = this->_internal_subdir_file_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.GetSubDirNamesReply.subdir_file_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.GetSubDirNamesReply)
  return target;
}

size_t GetSubDirNamesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.GetSubDirNamesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subdir_file_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.subdir_file_names_.size());
  for (int i = 0, n = _impl_.subdir_file_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.subdir_file_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubDirNamesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSubDirNamesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubDirNamesReply::GetClassData() const { return &_class_data_; }


void GetSubDirNamesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSubDirNamesReply*>(&to_msg);
  auto& from = static_cast<const GetSubDirNamesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.GetSubDirNamesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subdir_file_names_.MergeFrom(from._impl_.subdir_file_names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubDirNamesReply::CopyFrom(const GetSubDirNamesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.GetSubDirNamesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubDirNamesReply::IsInitialized() const {
  return true;
}

void GetSubDirNamesReply::InternalSwap(GetSubDirNamesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subdir_file_names_.InternalSwap(&other->_impl_.subdir_file_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubDirNamesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[12]);
}

// ===================================================================

class MkdirRequest::_Internal {
 public:
};

MkdirRequest::MkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.MkdirRequest)
}
MkdirRequest::MkdirRequest(const MkdirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MkdirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_file_path().empty()) {
    _this->_impl_.new_file_path_.Set(from._internal_new_file_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.MkdirRequest)
}

inline void MkdirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MkdirRequest::~MkdirRequest() {
  // @@protoc_insertion_point(destructor:Rpc.MkdirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MkdirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_file_path_.Destroy();
}

void MkdirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.MkdirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string new_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_new_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.MkdirRequest.new_file_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MkdirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.MkdirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (!this->_internal_new_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_file_path().data(), static_cast<int>(this->_internal_new_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.MkdirRequest.new_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_new_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.MkdirRequest)
  return target;
}

size_t MkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.MkdirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_file_path = 1;
  if (!this->_internal_new_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MkdirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirRequest::GetClassData() const { return &_class_data_; }


void MkdirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MkdirRequest*>(&to_msg);
  auto& from = static_cast<const MkdirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.MkdirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_file_path().empty()) {
    _this->_internal_set_new_file_path(from._internal_new_file_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirRequest::CopyFrom(const MkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.MkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirRequest::IsInitialized() const {
  return true;
}

void MkdirRequest::InternalSwap(MkdirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_file_path_, lhs_arena,
      &other->_impl_.new_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[13]);
}

// ===================================================================

class MkdirReply::_Internal {
 public:
};

MkdirReply::MkdirReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.MkdirReply)
}
MkdirReply::MkdirReply(const MkdirReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MkdirReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.MkdirReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MkdirReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[14]);
}

// ===================================================================

class RenameRequest::_Internal {
 public:
};

RenameRequest::RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_path_){}
    , decltype(_impl_.des_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_path().empty()) {
    _this->_impl_.src_path_.Set(from._internal_src_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.des_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_des_path().empty()) {
    _this->_impl_.des_path_.Set(from._internal_des_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.RenameRequest)
}

inline void RenameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_path_){}
    , decltype(_impl_.des_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.des_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.des_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:Rpc.RenameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_path_.Destroy();
  _impl_.des_path_.Destroy();
}

void RenameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.RenameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_path_.ClearToEmpty();
  _impl_.des_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.RenameRequest.src_path"));
        } else
          goto handle_unusual;
        continue;
      // string des_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_des_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.RenameRequest.des_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.RenameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_path().data(), static_cast<int>(this->_internal_src_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.src_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_path(), target);
  }

  // string des_path = 2;
  if (!this->_internal_des_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_des_path().data(), static_cast<int>(this->_internal_des_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.RenameRequest.des_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_des_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.RenameRequest)
  return target;
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.RenameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_path());
  }

  // string des_path = 2;
  if (!this->_internal_des_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_des_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameRequest::GetClassData() const { return &_class_data_; }


void RenameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameRequest*>(&to_msg);
  auto& from = static_cast<const RenameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.RenameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src_path().empty()) {
    _this->_internal_set_src_path(from._internal_src_path());
  }
  if (!from._internal_des_path().empty()) {
    _this->_internal_set_des_path(from._internal_des_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_path_, lhs_arena,
      &other->_impl_.src_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.des_path_, lhs_arena,
      &other->_impl_.des_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[15]);
}

// ===================================================================

class RenameReply::_Internal {
 public:
};

RenameReply::RenameReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.RenameReply)
}
RenameReply::RenameReply(const RenameReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RenameReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.RenameReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RenameReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[16]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.remote_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remote_file_path().empty()) {
    _this->_impl_.remote_file_path_.Set(from._internal_remote_file_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_file_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.remote_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remote_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:Rpc.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.remote_file_path_.Destroy();
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remote_file_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string remote_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remote_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.DeleteRequest.remote_file_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_file_path().data(), static_cast<int>(this->_internal_remote_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.DeleteRequest.remote_file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_file_path = 1;
  if (!this->_internal_remote_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_file_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_file_path().empty()) {
    _this->_internal_set_remote_file_path(from._internal_remote_file_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remote_file_path_, lhs_arena,
      &other->_impl_.remote_file_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[17]);
}

// ===================================================================

class DeleteReply::_Internal {
 public:
};

DeleteReply::DeleteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.DeleteReply)
}
DeleteReply::DeleteReply(const DeleteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.DeleteReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[18]);
}

// ===================================================================

class StatRequest::_Internal {
 public:
};

StatRequest::StatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.StatRequest)
}
StatRequest::StatRequest(const StatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    _this->_impl_.filepath_.Set(from._internal_filepath(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.StatRequest)
}

inline void StatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filepath_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filepath_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatRequest::~StatRequest() {
  // @@protoc_insertion_point(destructor:Rpc.StatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filepath_.Destroy();
}

void StatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.StatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filepath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.StatRequest.filepath"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.StatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatRequest.filepath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.StatRequest)
  return target;
}

size_t StatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.StatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatRequest::GetClassData() const { return &_class_data_; }


void StatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatRequest*>(&to_msg);
  auto& from = static_cast<const StatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.StatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _this->_internal_set_filepath(from._internal_filepath());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatRequest::CopyFrom(const StatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.StatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatRequest::IsInitialized() const {
  return true;
}

void StatRequest::InternalSwap(StatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filepath_, lhs_arena,
      &other->_impl_.filepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[19]);
}

// ===================================================================

class StatReply::_Internal {
 public:
};

StatReply::StatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.StatReply)
}
StatReply::StatReply(const StatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_size_){}
    , decltype(_impl_.existed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_size_, &from._impl_.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.existed_) -
    reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.existed_));
  // @@protoc_insertion_point(copy_constructor:Rpc.StatReply)
}

inline void StatReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.file_size_){uint64_t{0u}}
    , decltype(_impl_.existed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatReply::~StatReply() {
  // @@protoc_insertion_point(destructor:Rpc.StatReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void StatReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.StatReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.existed_) -
      reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.existed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool existed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.existed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.StatReply.file_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.StatReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool existed = 1;
  if (this->_internal_existed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_existed(), target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.StatReply.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // uint64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.StatReply)
  return target;
}

size_t StatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.StatReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint64 file_size = 3;
  if (this->_internal_file_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_file_size());
  }

  // bool existed = 1;
  if (this->_internal_existed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatReply::GetClassData() const { return &_class_data_; }


void StatReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatReply*>(&to_msg);
  auto& from = static_cast<const StatReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.StatReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_file_size() != 0) {
    _this->_internal_set_file_size(from._internal_file_size());
  }
  if (from._internal_existed() != 0) {
    _this->_internal_set_existed(from._internal_existed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatReply::CopyFrom(const StatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.StatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReply::IsInitialized() const {
  return true;
}

void StatReply::InternalSwap(StatReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatReply, _impl_.existed_)
      + sizeof(StatReply::_impl_.existed_)
      - PROTOBUF_FIELD_OFFSET(StatReply, _impl_.file_size_)>(
          reinterpret_cast<char*>(&_impl_.file_size_),
          reinterpret_cast<char*>(&other->_impl_.file_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[20]);
}

// ===================================================================

class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.HelloRequest)
}

inline void HelloRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:Rpc.HelloRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void HelloRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HelloRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.HelloRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HelloRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.HelloRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HelloRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloRequest::GetClassData() const { return &_class_data_; }


void HelloRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloRequest*>(&to_msg);
  auto& from = static_cast<const HelloRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HelloRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[21]);
}

// ===================================================================

class HelloReply::_Internal {
 public:
};

HelloReply::HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.HelloReply)
}

inline void HelloReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:Rpc.HelloReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void HelloReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HelloReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.HelloReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HelloReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.HelloReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HelloReply)
  return target;
}

size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HelloReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloReply::GetClassData() const { return &_class_data_; }


void HelloReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloReply*>(&to_msg);
  auto& from = static_cast<const HelloReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HelloReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[22]);
}

// ===================================================================

class WriteChunkRequest::_Internal {
 public:
};

WriteChunkRequest::WriteChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.WriteChunkRequest)
}
WriteChunkRequest::WriteChunkRequest(const WriteChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteChunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){from._impl_.locations_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.chunkhandle_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:Rpc.WriteChunkRequest)
}

inline void WriteChunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locations_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.client_id_){int64_t{0}}
    , decltype(_impl_.chunkhandle_){int64_t{0}}
    , decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.length_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WriteChunkRequest::~WriteChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.WriteChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locations_.~RepeatedPtrField();
  _impl_.data_.Destroy();
}

void WriteChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.WriteChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locations_.Clear();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 chunkhandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunkhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string locations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_locations();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Rpc.WriteChunkRequest.locations"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.WriteChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // int64 chunkhandle = 2;
  if (this->_internal_chunkhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunkhandle(), target);
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // int64 length = 4;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_length(), target);
  }

  // repeated string locations = 5;
  for (int i = 0, n = this->_internal_locations_size(); i < n; i++) {
    const auto& s = this->_internal_locations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.WriteChunkRequest.locations");
    target = stream->WriteString(5, s, target);
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.WriteChunkRequest)
  return target;
}

size_t WriteChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.WriteChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locations = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.locations_.size());
  for (int i = 0, n = _impl_.locations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.locations_.Get(i));
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // int64 chunkhandle = 2;
  if (this->_internal_chunkhandle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunkhandle());
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 4;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteChunkRequest::GetClassData() const { return &_class_data_; }


void WriteChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteChunkRequest*>(&to_msg);
  auto& from = static_cast<const WriteChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.WriteChunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locations_.MergeFrom(from._impl_.locations_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_chunkhandle() != 0) {
    _this->_internal_set_chunkhandle(from._internal_chunkhandle());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteChunkRequest::CopyFrom(const WriteChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.WriteChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkRequest::IsInitialized() const {
  return true;
}

void WriteChunkRequest::InternalSwap(WriteChunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locations_.InternalSwap(&other->_impl_.locations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteChunkRequest, _impl_.length_)
      + sizeof(WriteChunkRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(WriteChunkRequest, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[23]);
}

// ===================================================================

class WriteChunkReply::_Internal {
 public:
};

WriteChunkReply::WriteChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.WriteChunkReply)
}
WriteChunkReply::WriteChunkReply(const WriteChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WriteChunkReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_read_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bytes_read_ = from._impl_.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:Rpc.WriteChunkReply)
}

inline void WriteChunkReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_read_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WriteChunkReply::~WriteChunkReply() {
  // @@protoc_insertion_point(destructor:Rpc.WriteChunkReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WriteChunkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteChunkReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WriteChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.WriteChunkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytes_read_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteChunkReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bytes_read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteChunkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.WriteChunkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.WriteChunkReply)
  return target;
}

size_t WriteChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.WriteChunkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_read());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WriteChunkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteChunkReply::GetClassData() const { return &_class_data_; }


void WriteChunkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WriteChunkReply*>(&to_msg);
  auto& from = static_cast<const WriteChunkReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.WriteChunkReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bytes_read() != 0) {
    _this->_internal_set_bytes_read(from._internal_bytes_read());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteChunkReply::CopyFrom(const WriteChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.WriteChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteChunkReply::IsInitialized() const {
  return true;
}

void WriteChunkReply::InternalSwap(WriteChunkReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bytes_read_, other->_impl_.bytes_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteChunkReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[24]);
}

// ===================================================================

class ReadChunkRequest::_Internal {
 public:
};

ReadChunkRequest::ReadChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.ReadChunkRequest)
}
ReadChunkRequest::ReadChunkRequest(const ReadChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadChunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunkhandle_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chunkhandle_, &from._impl_.chunkhandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.chunkhandle_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:Rpc.ReadChunkRequest)
}

inline void ReadChunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunkhandle_){int64_t{0}}
    , decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.length_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadChunkRequest::~ReadChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.ReadChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReadChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.chunkhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.chunkhandle_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 chunkhandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chunkhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReadChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_chunkhandle(), target);
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReadChunkRequest)
  return target;
}

size_t ReadChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReadChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 chunkhandle = 1;
  if (this->_internal_chunkhandle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunkhandle());
  }

  // int64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadChunkRequest::GetClassData() const { return &_class_data_; }


void ReadChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadChunkRequest*>(&to_msg);
  auto& from = static_cast<const ReadChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReadChunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chunkhandle() != 0) {
    _this->_internal_set_chunkhandle(from._internal_chunkhandle());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadChunkRequest::CopyFrom(const ReadChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReadChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkRequest::IsInitialized() const {
  return true;
}

void ReadChunkRequest::InternalSwap(ReadChunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadChunkRequest, _impl_.length_)
      + sizeof(ReadChunkRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(ReadChunkRequest, _impl_.chunkhandle_)>(
          reinterpret_cast<char*>(&_impl_.chunkhandle_),
          reinterpret_cast<char*>(&other->_impl_.chunkhandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[25]);
}

// ===================================================================

class ReadChunkReply::_Internal {
 public:
};

ReadChunkReply::ReadChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.ReadChunkReply)
}
ReadChunkReply::ReadChunkReply(const ReadChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadChunkReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.bytes_read_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bytes_read_ = from._impl_.bytes_read_;
  // @@protoc_insertion_point(copy_constructor:Rpc.ReadChunkReply)
}

inline void ReadChunkReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.bytes_read_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadChunkReply::~ReadChunkReply() {
  // @@protoc_insertion_point(destructor:Rpc.ReadChunkReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadChunkReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ReadChunkReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadChunkReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReadChunkReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.bytes_read_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadChunkReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.ReadChunkReply.data"));
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_read = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadChunkReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReadChunkReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReadChunkReply.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReadChunkReply)
  return target;
}

size_t ReadChunkReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReadChunkReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int64 bytes_read = 2;
  if (this->_internal_bytes_read() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_read());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadChunkReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadChunkReply::GetClassData() const { return &_class_data_; }


void ReadChunkReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadChunkReply*>(&to_msg);
  auto& from = static_cast<const ReadChunkReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReadChunkReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_bytes_read() != 0) {
    _this->_internal_set_bytes_read(from._internal_bytes_read());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadChunkReply::CopyFrom(const ReadChunkReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReadChunkReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadChunkReply::IsInitialized() const {
  return true;
}

void ReadChunkReply::InternalSwap(ReadChunkReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.bytes_read_, other->_impl_.bytes_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadChunkReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[26]);
}

// ===================================================================

class DataNodeLocation::_Internal {
 public:
};

DataNodeLocation::DataNodeLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.DataNodeLocation)
}
DataNodeLocation::DataNodeLocation(const DataNodeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataNodeLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNodeLocation)
}

inline void DataNodeLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataNodeLocation::~DataNodeLocation() {
  // @@protoc_insertion_point(destructor:Rpc.DataNodeLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataNodeLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.Destroy();
}

void DataNodeLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataNodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNodeLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNodeLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.DataNodeLocation.location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNodeLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNodeLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNodeLocation.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNodeLocation)
  return target;
}

size_t DataNodeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNodeLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNodeLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataNodeLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNodeLocation::GetClassData() const { return &_class_data_; }


void DataNodeLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataNodeLocation*>(&to_msg);
  auto& from = static_cast<const DataNodeLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNodeLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNodeLocation::CopyFrom(const DataNodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNodeLocation::IsInitialized() const {
  return true;
}

void DataNodeLocation::InternalSwap(DataNodeLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNodeLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[27]);
}

// ===================================================================

class DataNode::_Internal {
 public:
};

DataNode::DataNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.DataNode)
}
DataNode::DataNode(const DataNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stored_chunk_handles_){from._impl_.stored_chunk_handles_}
    , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.location_){}
    , decltype(_impl_.available_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.available_size_ = from._impl_.available_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.DataNode)
}

inline void DataNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stored_chunk_handles_){arena}
    , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.location_){}
    , decltype(_impl_.available_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataNode::~DataNode() {
  // @@protoc_insertion_point(destructor:Rpc.DataNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stored_chunk_handles_.~RepeatedField();
  _impl_.location_.Destroy();
}

void DataNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataNode::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.DataNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stored_chunk_handles_.Clear();
  _impl_.location_.ClearToEmpty();
  _impl_.available_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.DataNode.location"));
        } else
          goto handle_unusual;
        continue;
      // uint32 available_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 stored_chunk_handles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_stored_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_stored_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.DataNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.DataNode.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_available_size(), target);
  }

  // repeated int64 stored_chunk_handles = 3;
  {
    int byte_size = _impl_._stored_chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_stored_chunk_handles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.DataNode)
  return target;
}

size_t DataNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.DataNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 stored_chunk_handles = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.stored_chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stored_chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_available_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataNode::GetClassData() const { return &_class_data_; }


void DataNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataNode*>(&to_msg);
  auto& from = static_cast<const DataNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.DataNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stored_chunk_handles_.MergeFrom(from._impl_.stored_chunk_handles_);
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_available_size() != 0) {
    _this->_internal_set_available_size(from._internal_available_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataNode::CopyFrom(const DataNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.DataNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataNode::IsInitialized() const {
  return true;
}

void DataNode::InternalSwap(DataNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stored_chunk_handles_.InternalSwap(&other->_impl_.stored_chunk_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  swap(_impl_.available_size_, other->_impl_.available_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[28]);
}

// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){from._impl_.location_}
    , decltype(_impl_.chunk_handle_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chunk_handle_, &from._impl_.chunk_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.chunk_handle_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:Rpc.Chunk)
}

inline void Chunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){arena}
    , decltype(_impl_.chunk_handle_){int64_t{0}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:Rpc.Chunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.~RepeatedPtrField();
}

void Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.Clear();
  ::memset(&_impl_.chunk_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.chunk_handle_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 chunk_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chunk_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_location();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Rpc.Chunk.location"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 chunk_handle = 1;
  if (this->_internal_chunk_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_chunk_handle(), target);
  }

  // repeated string location = 2;
  for (int i = 0, n = this->_internal_location_size(); i < n; i++) {
    const auto& s = this->_internal_location(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.Chunk.location");
    target = stream->WriteString(2, s, target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string location = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.location_.size());
  for (int i = 0, n = _impl_.location_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.location_.Get(i));
  }

  // int64 chunk_handle = 1;
  if (this->_internal_chunk_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_handle());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }


void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chunk*>(&to_msg);
  auto& from = static_cast<const Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.Chunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.location_.MergeFrom(from._impl_.location_);
  if (from._internal_chunk_handle() != 0) {
    _this->_internal_set_chunk_handle(from._internal_chunk_handle());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.location_.InternalSwap(&other->_impl_.location_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, _impl_.size_)
      + sizeof(Chunk::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(Chunk, _impl_.chunk_handle_)>(
          reinterpret_cast<char*>(&_impl_.chunk_handle_),
          reinterpret_cast<char*>(&other->_impl_.chunk_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[29]);
}

// ===================================================================

class ReportDataNodeRequest::_Internal {
 public:
};

ReportDataNodeRequest::ReportDataNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.ReportDataNodeRequest)
}
ReportDataNodeRequest::ReportDataNodeRequest(const ReportDataNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportDataNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stored_chunk_handles_){from._impl_.stored_chunk_handles_}
    , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.location_){}
    , decltype(_impl_.available_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.available_size_ = from._impl_.available_size_;
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeRequest)
}

inline void ReportDataNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stored_chunk_handles_){arena}
    , /*decltype(_impl_._stored_chunk_handles_cached_byte_size_)*/{0}
    , decltype(_impl_.location_){}
    , decltype(_impl_.available_size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportDataNodeRequest::~ReportDataNodeRequest() {
  // @@protoc_insertion_point(destructor:Rpc.ReportDataNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportDataNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stored_chunk_handles_.~RepeatedField();
  _impl_.location_.Destroy();
}

void ReportDataNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportDataNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.ReportDataNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stored_chunk_handles_.Clear();
  _impl_.location_.ClearToEmpty();
  _impl_.available_size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportDataNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.ReportDataNodeRequest.location"));
        } else
          goto handle_unusual;
        continue;
      // uint32 available_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 stored_chunk_handles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_stored_chunk_handles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_stored_chunk_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportDataNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.ReportDataNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.ReportDataNodeRequest.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_available_size(), target);
  }

  // repeated int64 stored_chunk_handles = 3;
  {
    int byte_size = _impl_._stored_chunk_handles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_stored_chunk_handles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.ReportDataNodeRequest)
  return target;
}

size_t ReportDataNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.ReportDataNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 stored_chunk_handles = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.stored_chunk_handles_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stored_chunk_handles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // uint32 available_size = 2;
  if (this->_internal_available_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_available_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDataNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportDataNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDataNodeRequest::GetClassData() const { return &_class_data_; }


void ReportDataNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportDataNodeRequest*>(&to_msg);
  auto& from = static_cast<const ReportDataNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.ReportDataNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stored_chunk_handles_.MergeFrom(from._impl_.stored_chunk_handles_);
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_available_size() != 0) {
    _this->_internal_set_available_size(from._internal_available_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportDataNodeRequest::CopyFrom(const ReportDataNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.ReportDataNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportDataNodeRequest::IsInitialized() const {
  return true;
}

void ReportDataNodeRequest::InternalSwap(ReportDataNodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stored_chunk_handles_.InternalSwap(&other->_impl_.stored_chunk_handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  swap(_impl_.available_size_, other->_impl_.available_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportDataNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[30]);
}

// ===================================================================

class ReportDataNodeReply::_Internal {
 public:
};

ReportDataNodeReply::ReportDataNodeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.ReportDataNodeReply)
}
ReportDataNodeReply::ReportDataNodeReply(const ReportDataNodeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReportDataNodeReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.ReportDataNodeReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportDataNodeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportDataNodeReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReportDataNodeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[31]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HeartbeatRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[32]);
}

// ===================================================================

class HeartbeatReply::_Internal {
 public:
  static const ::Rpc::HeartbeatRequest& request(const HeartbeatReply* msg);
};

const ::Rpc::HeartbeatRequest&
HeartbeatReply::_Internal::request(const HeartbeatReply* msg) {
  return *msg->_impl_.request_;
}
HeartbeatReply::HeartbeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.HeartbeatReply)
}
HeartbeatReply::HeartbeatReply(const HeartbeatReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::Rpc::HeartbeatRequest(*from._impl_.request_);
  }
  // @@protoc_insertion_point(copy_constructor:Rpc.HeartbeatReply)
}

inline void HeartbeatReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatReply::~HeartbeatReply() {
  // @@protoc_insertion_point(destructor:Rpc.HeartbeatReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
}

void HeartbeatReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Rpc.HeartbeatRequest request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.HeartbeatReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.HeartbeatReply)
  return target;
}

size_t HeartbeatReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.HeartbeatReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rpc.HeartbeatRequest request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatReply::GetClassData() const { return &_class_data_; }


void HeartbeatReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatReply*>(&to_msg);
  auto& from = static_cast<const HeartbeatReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.HeartbeatReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::Rpc::HeartbeatRequest::MergeFrom(
        from._internal_request());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatReply::CopyFrom(const HeartbeatReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.HeartbeatReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReply::IsInitialized() const {
  return true;
}

void HeartbeatReply::InternalSwap(HeartbeatReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[33]);
}

// ===================================================================

class CopyChunkRequest::_Internal {
 public:
};

CopyChunkRequest::CopyChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkRequest)
}
CopyChunkRequest::CopyChunkRequest(const CopyChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CopyChunkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.chunk_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.chunk_handle_ = from._impl_.chunk_handle_;
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkRequest)
}

inline void CopyChunkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.chunk_handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CopyChunkRequest::~CopyChunkRequest() {
  // @@protoc_insertion_point(destructor:Rpc.CopyChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CopyChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.Destroy();
}

void CopyChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CopyChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.CopyChunkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.ClearToEmpty();
  _impl_.chunk_handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Rpc.CopyChunkRequest.location"));
        } else
          goto handle_unusual;
        continue;
      // int64 chunk_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunk_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopyChunkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.CopyChunkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Rpc.CopyChunkRequest.location");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_location(), target);
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunk_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.CopyChunkRequest)
  return target;
}

size_t CopyChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.CopyChunkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 1;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CopyChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkRequest::GetClassData() const { return &_class_data_; }


void CopyChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CopyChunkRequest*>(&to_msg);
  auto& from = static_cast<const CopyChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.CopyChunkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_chunk_handle() != 0) {
    _this->_internal_set_chunk_handle(from._internal_chunk_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopyChunkRequest::CopyFrom(const CopyChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.CopyChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyChunkRequest::IsInitialized() const {
  return true;
}

void CopyChunkRequest::InternalSwap(CopyChunkRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  swap(_impl_.chunk_handle_, other->_impl_.chunk_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[34]);
}

// ===================================================================

class CopyChunkReply::_Internal {
 public:
};

CopyChunkReply::CopyChunkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkReply)
}
CopyChunkReply::CopyChunkReply(const CopyChunkReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CopyChunkReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[35]);
}

// ===================================================================

class MultiWriteRequest::_Internal {
 public:
};

MultiWriteRequest::MultiWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.MultiWriteRequest)
}
MultiWriteRequest::MultiWriteRequest(const MultiWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiWriteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.chunkhandle_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.padded_chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.padded_chunk_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.padded_chunk_));
  // @@protoc_insertion_point(copy_constructor:Rpc.MultiWriteRequest)
}

inline void MultiWriteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.client_id_){int64_t{0}}
    , decltype(_impl_.chunkhandle_){int64_t{0}}
    , decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.padded_chunk_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiWriteRequest::~MultiWriteRequest() {
  // @@protoc_insertion_point(destructor:Rpc.MultiWriteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MultiWriteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.MultiWriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.padded_chunk_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.padded_chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWriteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 chunkhandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunkhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool padded_chunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.padded_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.MultiWriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_client_id(), target);
  }

  // int64 chunkhandle = 2;
  if (this->_internal_chunkhandle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunkhandle(), target);
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  // bool padded_chunk = 4;
  if (this->_internal_padded_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_padded_chunk(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.MultiWriteRequest)
  return target;
}

size_t MultiWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.MultiWriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_id());
  }

  // int64 chunkhandle = 2;
  if (this->_internal_chunkhandle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunkhandle());
  }

  // int64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // bool padded_chunk = 4;
  if (this->_internal_padded_chunk() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiWriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWriteRequest::GetClassData() const { return &_class_data_; }


void MultiWriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiWriteRequest*>(&to_msg);
  auto& from = static_cast<const MultiWriteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.MultiWriteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_chunkhandle() != 0) {
    _this->_internal_set_chunkhandle(from._internal_chunkhandle());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_padded_chunk() != 0) {
    _this->_internal_set_padded_chunk(from._internal_padded_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWriteRequest::CopyFrom(const MultiWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.MultiWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWriteRequest::IsInitialized() const {
  return true;
}

void MultiWriteRequest::InternalSwap(MultiWriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiWriteRequest, _impl_.padded_chunk_)
      + sizeof(MultiWriteRequest::_impl_.padded_chunk_)
      - PROTOBUF_FIELD_OFFSET(MultiWriteRequest, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWriteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[36]);
}

// ===================================================================

class MultiWriteReply::_Internal {
 public:
};

MultiWriteReply::MultiWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.MultiWriteReply)
}
MultiWriteReply::MultiWriteReply(const MultiWriteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiWriteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_written_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bytes_written_ = from._impl_.bytes_written_;
  // @@protoc_insertion_point(copy_constructor:Rpc.MultiWriteReply)
}

inline void MultiWriteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_written_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiWriteReply::~MultiWriteReply() {
  // @@protoc_insertion_point(destructor:Rpc.MultiWriteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiWriteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiWriteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiWriteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.MultiWriteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytes_written_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiWriteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bytes_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiWriteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.MultiWriteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes_written = 1;
  if (this->_internal_bytes_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_bytes_written(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.MultiWriteReply)
  return target;
}

size_t MultiWriteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.MultiWriteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bytes_written = 1;
  if (this->_internal_bytes_written() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_written());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiWriteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiWriteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiWriteReply::GetClassData() const { return &_class_data_; }


void MultiWriteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiWriteReply*>(&to_msg);
  auto& from = static_cast<const MultiWriteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.MultiWriteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bytes_written() != 0) {
    _this->_internal_set_bytes_written(from._internal_bytes_written());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiWriteReply::CopyFrom(const MultiWriteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.MultiWriteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiWriteReply::IsInitialized() const {
  return true;
}

void MultiWriteReply::InternalSwap(MultiWriteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bytes_written_, other->_impl_.bytes_written_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiWriteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[37]);
}

// ===================================================================

class CopyChunkWriteRequest::_Internal {
 public:
};

CopyChunkWriteRequest::CopyChunkWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkWriteRequest)
}
CopyChunkWriteRequest::CopyChunkWriteRequest(const CopyChunkWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CopyChunkWriteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.chunk_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.chunk_handle_ = from._impl_.chunk_handle_;
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkWriteRequest)
}

inline void CopyChunkWriteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.chunk_handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CopyChunkWriteRequest::~CopyChunkWriteRequest() {
  // @@protoc_insertion_point(destructor:Rpc.CopyChunkWriteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CopyChunkWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CopyChunkWriteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CopyChunkWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Rpc.CopyChunkWriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.chunk_handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyChunkWriteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 chunk_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.chunk_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopyChunkWriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rpc.CopyChunkWriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_chunk_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rpc.CopyChunkWriteRequest)
  return target;
}

size_t CopyChunkWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rpc.CopyChunkWriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 chunk_handle = 2;
  if (this->_internal_chunk_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chunk_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkWriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CopyChunkWriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkWriteRequest::GetClassData() const { return &_class_data_; }


void CopyChunkWriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CopyChunkWriteRequest*>(&to_msg);
  auto& from = static_cast<const CopyChunkWriteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Rpc.CopyChunkWriteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_chunk_handle() != 0) {
    _this->_internal_set_chunk_handle(from._internal_chunk_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopyChunkWriteRequest::CopyFrom(const CopyChunkWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rpc.CopyChunkWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyChunkWriteRequest::IsInitialized() const {
  return true;
}

void CopyChunkWriteRequest::InternalSwap(CopyChunkWriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.chunk_handle_, other->_impl_.chunk_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkWriteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[38]);
}

// ===================================================================

class CopyChunkWriteReply::_Internal {
 public:
};

CopyChunkWriteReply::CopyChunkWriteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Rpc.CopyChunkWriteReply)
}
CopyChunkWriteReply::CopyChunkWriteReply(const CopyChunkWriteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CopyChunkWriteReply* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rpc.CopyChunkWriteReply)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyChunkWriteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyChunkWriteReply::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CopyChunkWriteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_final_2eproto_getter, &descriptor_table_final_2eproto_once,
      file_level_metadata_final_2eproto[39]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rpc::LogEntry*
Arena::CreateMaybeMessage< ::Rpc::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::AppendEntriesArgs*
Arena::CreateMaybeMessage< ::Rpc::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::AppendEntriesArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::AppendEntriesReply*
Arena::CreateMaybeMessage< ::Rpc::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::AppendEntriesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::RequestVoteArgs*
Arena::CreateMaybeMessage< ::Rpc::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::RequestVoteArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::RequestVoteReply*
Arena::CreateMaybeMessage< ::Rpc::RequestVoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::RequestVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::FindAddrRequest*
Arena::CreateMaybeMessage< ::Rpc::FindAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::FindAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::FindAddrReply_ReplicaAddrs*
Arena::CreateMaybeMessage< ::Rpc::FindAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::FindAddrReply_ReplicaAddrs >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::FindAddrReply*
Arena::CreateMaybeMessage< ::Rpc::FindAddrReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::FindAddrReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::GetWriteAddrRequest*
Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::GetWriteAddrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::GetWriteAddrReply_ReplicaAddrs*
Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrReply_ReplicaAddrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::GetWriteAddrReply_ReplicaAddrs >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::GetWriteAddrReply*
Arena::CreateMaybeMessage< ::Rpc::GetWriteAddrReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::GetWriteAddrReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::GetSubDirNamesRequest*
Arena::CreateMaybeMessage< ::Rpc::GetSubDirNamesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::GetSubDirNamesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::GetSubDirNamesReply*
Arena::CreateMaybeMessage< ::Rpc::GetSubDirNamesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::GetSubDirNamesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::MkdirRequest*
Arena::CreateMaybeMessage< ::Rpc::MkdirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::MkdirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::MkdirReply*
Arena::CreateMaybeMessage< ::Rpc::MkdirReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::MkdirReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::RenameRequest*
Arena::CreateMaybeMessage< ::Rpc::RenameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::RenameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::RenameReply*
Arena::CreateMaybeMessage< ::Rpc::RenameReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::RenameReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::DeleteRequest*
Arena::CreateMaybeMessage< ::Rpc::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::DeleteReply*
Arena::CreateMaybeMessage< ::Rpc::DeleteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DeleteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::StatRequest*
Arena::CreateMaybeMessage< ::Rpc::StatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::StatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::StatReply*
Arena::CreateMaybeMessage< ::Rpc::StatReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::StatReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HelloRequest*
Arena::CreateMaybeMessage< ::Rpc::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HelloReply*
Arena::CreateMaybeMessage< ::Rpc::HelloReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::WriteChunkRequest*
Arena::CreateMaybeMessage< ::Rpc::WriteChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::WriteChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::WriteChunkReply*
Arena::CreateMaybeMessage< ::Rpc::WriteChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::WriteChunkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReadChunkRequest*
Arena::CreateMaybeMessage< ::Rpc::ReadChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReadChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReadChunkReply*
Arena::CreateMaybeMessage< ::Rpc::ReadChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReadChunkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::DataNodeLocation*
Arena::CreateMaybeMessage< ::Rpc::DataNodeLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DataNodeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::DataNode*
Arena::CreateMaybeMessage< ::Rpc::DataNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::DataNode >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::Chunk*
Arena::CreateMaybeMessage< ::Rpc::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReportDataNodeRequest*
Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReportDataNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::ReportDataNodeReply*
Arena::CreateMaybeMessage< ::Rpc::ReportDataNodeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::ReportDataNodeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HeartbeatRequest*
Arena::CreateMaybeMessage< ::Rpc::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::HeartbeatReply*
Arena::CreateMaybeMessage< ::Rpc::HeartbeatReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::HeartbeatReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkRequest*
Arena::CreateMaybeMessage< ::Rpc::CopyChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkReply*
Arena::CreateMaybeMessage< ::Rpc::CopyChunkReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::MultiWriteRequest*
Arena::CreateMaybeMessage< ::Rpc::MultiWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::MultiWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::MultiWriteReply*
Arena::CreateMaybeMessage< ::Rpc::MultiWriteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::MultiWriteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkWriteRequest*
Arena::CreateMaybeMessage< ::Rpc::CopyChunkWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Rpc::CopyChunkWriteReply*
Arena::CreateMaybeMessage< ::Rpc::CopyChunkWriteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rpc::CopyChunkWriteReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
