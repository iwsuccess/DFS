// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: final.proto

#include "final.pb.h"
#include "final.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Rpc {

static const char* Cli2Master_method_names[] = {
  "/Rpc.Cli2Master/FindAddr",
  "/Rpc.Cli2Master/GetWriteAddr",
  "/Rpc.Cli2Master/Stat",
  "/Rpc.Cli2Master/Rename",
  "/Rpc.Cli2Master/Delete",
  "/Rpc.Cli2Master/Mkdir",
  "/Rpc.Cli2Master/GetSubDirNames",
  "/Rpc.Cli2Master/RequestVote",
  "/Rpc.Cli2Master/AppendEntries",
};

std::unique_ptr< Cli2Master::Stub> Cli2Master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cli2Master::Stub> stub(new Cli2Master::Stub(channel, options));
  return stub;
}

Cli2Master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FindAddr_(Cli2Master_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWriteAddr_(Cli2Master_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stat_(Cli2Master_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(Cli2Master_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Cli2Master_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mkdir_(Cli2Master_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubDirNames_(Cli2Master_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(Cli2Master_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendEntries_(Cli2Master_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cli2Master::Stub::FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::Rpc::FindAddrReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindAddr_, context, request, response);
}

void Cli2Master::Stub::async::FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAddr_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* Cli2Master::Stub::PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::FindAddrReply, ::Rpc::FindAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* Cli2Master::Stub::AsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::Rpc::GetWriteAddrReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWriteAddr_, context, request, response);
}

void Cli2Master::Stub::async::GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteAddr_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWriteAddr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* Cli2Master::Stub::PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::GetWriteAddrReply, ::Rpc::GetWriteAddrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWriteAddr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* Cli2Master::Stub::AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWriteAddrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::Rpc::StatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::StatRequest, ::Rpc::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stat_, context, request, response);
}

void Cli2Master::Stub::async::Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::StatRequest, ::Rpc::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* Cli2Master::Stub::PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::StatReply, ::Rpc::StatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* Cli2Master::Stub::AsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::Rpc::RenameReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::RenameRequest, ::Rpc::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void Cli2Master::Stub::async::Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::RenameRequest, ::Rpc::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* Cli2Master::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::RenameReply, ::Rpc::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* Cli2Master::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::Rpc::DeleteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::DeleteRequest, ::Rpc::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Cli2Master::Stub::async::Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::DeleteRequest, ::Rpc::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* Cli2Master::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::DeleteReply, ::Rpc::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* Cli2Master::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::Rpc::MkdirReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::MkdirRequest, ::Rpc::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Mkdir_, context, request, response);
}

void Cli2Master::Stub::async::Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::MkdirRequest, ::Rpc::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* Cli2Master::Stub::PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::MkdirReply, ::Rpc::MkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* Cli2Master::Stub::AsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::Rpc::GetSubDirNamesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubDirNames_, context, request, response);
}

void Cli2Master::Stub::async::GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubDirNames_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubDirNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* Cli2Master::Stub::PrepareAsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::GetSubDirNamesReply, ::Rpc::GetSubDirNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubDirNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* Cli2Master::Stub::AsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubDirNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::Rpc::RequestVoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void Cli2Master::Stub::async::RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* Cli2Master::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::RequestVoteReply, ::Rpc::RequestVoteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* Cli2Master::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2Master::Stub::AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::Rpc::AppendEntriesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void Cli2Master::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void Cli2Master::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* Cli2Master::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::AppendEntriesReply, ::Rpc::AppendEntriesArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* Cli2Master::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cli2Master::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::FindAddrRequest* req,
             ::Rpc::FindAddrReply* resp) {
               return service->FindAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::GetWriteAddrRequest* req,
             ::Rpc::GetWriteAddrReply* resp) {
               return service->GetWriteAddr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::StatRequest, ::Rpc::StatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::StatRequest* req,
             ::Rpc::StatReply* resp) {
               return service->Stat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::RenameRequest, ::Rpc::RenameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::RenameRequest* req,
             ::Rpc::RenameReply* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::DeleteRequest, ::Rpc::DeleteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::DeleteRequest* req,
             ::Rpc::DeleteReply* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::MkdirRequest, ::Rpc::MkdirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::MkdirRequest* req,
             ::Rpc::MkdirReply* resp) {
               return service->Mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::GetSubDirNamesRequest* req,
             ::Rpc::GetSubDirNamesReply* resp) {
               return service->GetSubDirNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::RequestVoteArgs* req,
             ::Rpc::RequestVoteReply* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2Master_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2Master::Service, ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2Master::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::AppendEntriesArgs* req,
             ::Rpc::AppendEntriesReply* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
}

Cli2Master::Service::~Service() {
}

::grpc::Status Cli2Master::Service::FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2Master::Service::AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Cli2ChunkServer_method_names[] = {
  "/Rpc.Cli2ChunkServer/ReadChunk",
  "/Rpc.Cli2ChunkServer/WriteChunk",
  "/Rpc.Cli2ChunkServer/SayHello",
};

std::unique_ptr< Cli2ChunkServer::Stub> Cli2ChunkServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cli2ChunkServer::Stub> stub(new Cli2ChunkServer::Stub(channel, options));
  return stub;
}

Cli2ChunkServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadChunk_(Cli2ChunkServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteChunk_(Cli2ChunkServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHello_(Cli2ChunkServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cli2ChunkServer::Stub::ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::Rpc::ReadChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadChunk_, context, request, response);
}

void Cli2ChunkServer::Stub::async::ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadChunk_, context, request, response, std::move(f));
}

void Cli2ChunkServer::Stub::async::ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* Cli2ChunkServer::Stub::PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::ReadChunkReply, ::Rpc::ReadChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* Cli2ChunkServer::Stub::AsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2ChunkServer::Stub::WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::Rpc::WriteChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteChunk_, context, request, response);
}

void Cli2ChunkServer::Stub::async::WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteChunk_, context, request, response, std::move(f));
}

void Cli2ChunkServer::Stub::async::WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* Cli2ChunkServer::Stub::PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::WriteChunkReply, ::Rpc::WriteChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* Cli2ChunkServer::Stub::AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cli2ChunkServer::Stub::SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::Rpc::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::HelloRequest, ::Rpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Cli2ChunkServer::Stub::async::SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::HelloRequest, ::Rpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Cli2ChunkServer::Stub::async::SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>* Cli2ChunkServer::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::HelloReply, ::Rpc::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>* Cli2ChunkServer::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cli2ChunkServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2ChunkServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2ChunkServer::Service, ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2ChunkServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::ReadChunkRequest* req,
             ::Rpc::ReadChunkReply* resp) {
               return service->ReadChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2ChunkServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2ChunkServer::Service, ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2ChunkServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::WriteChunkRequest* req,
             ::Rpc::WriteChunkReply* resp) {
               return service->WriteChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cli2ChunkServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cli2ChunkServer::Service, ::Rpc::HelloRequest, ::Rpc::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Cli2ChunkServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::HelloRequest* req,
             ::Rpc::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
}

Cli2ChunkServer::Service::~Service() {
}

::grpc::Status Cli2ChunkServer::Service::ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2ChunkServer::Service::WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cli2ChunkServer::Service::SayHello(::grpc::ServerContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DataNodeControlerService_method_names[] = {
  "/Rpc.DataNodeControlerService/CheckHeartbeat",
  "/Rpc.DataNodeControlerService/CopyChunk",
};

std::unique_ptr< DataNodeControlerService::Stub> DataNodeControlerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataNodeControlerService::Stub> stub(new DataNodeControlerService::Stub(channel, options));
  return stub;
}

DataNodeControlerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckHeartbeat_(DataNodeControlerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CopyChunk_(DataNodeControlerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataNodeControlerService::Stub::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHeartbeat_, context, request, response);
}

void DataNodeControlerService::Stub::async::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHeartbeat_, context, request, response, std::move(f));
}

void DataNodeControlerService::Stub::async::CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHeartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* DataNodeControlerService::Stub::PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::HeartbeatReply, ::Rpc::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHeartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* DataNodeControlerService::Stub::AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataNodeControlerService::Stub::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CopyChunk_, context, request, response);
}

void DataNodeControlerService::Stub::async::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunk_, context, request, response, std::move(f));
}

void DataNodeControlerService::Stub::async::CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* DataNodeControlerService::Stub::PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::CopyChunkReply, ::Rpc::CopyChunkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CopyChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* DataNodeControlerService::Stub::AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataNodeControlerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeControlerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeControlerService::Service, ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeControlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::HeartbeatRequest* req,
             ::Rpc::HeartbeatReply* resp) {
               return service->CheckHeartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataNodeControlerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataNodeControlerService::Service, ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataNodeControlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::CopyChunkRequest* req,
             ::Rpc::CopyChunkReply* resp) {
               return service->CopyChunk(ctx, req, resp);
             }, this)));
}

DataNodeControlerService::Service::~Service() {
}

::grpc::Status DataNodeControlerService::Service::CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeControlerService::Service::CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ReportDataNodeSerivce_method_names[] = {
  "/Rpc.ReportDataNodeSerivce/ReportDataNode",
};

std::unique_ptr< ReportDataNodeSerivce::Stub> ReportDataNodeSerivce::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReportDataNodeSerivce::Stub> stub(new ReportDataNodeSerivce::Stub(channel, options));
  return stub;
}

ReportDataNodeSerivce::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReportDataNode_(ReportDataNodeSerivce_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReportDataNodeSerivce::Stub::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportDataNode_, context, request, response);
}

void ReportDataNodeSerivce::Stub::async::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDataNode_, context, request, response, std::move(f));
}

void ReportDataNodeSerivce::Stub::async::ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportDataNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* ReportDataNodeSerivce::Stub::PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::ReportDataNodeReply, ::Rpc::ReportDataNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportDataNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* ReportDataNodeSerivce::Stub::AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportDataNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReportDataNodeSerivce::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReportDataNodeSerivce_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReportDataNodeSerivce::Service, ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReportDataNodeSerivce::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::ReportDataNodeRequest* req,
             ::Rpc::ReportDataNodeReply* resp) {
               return service->ReportDataNode(ctx, req, resp);
             }, this)));
}

ReportDataNodeSerivce::Service::~Service() {
}

::grpc::Status ReportDataNodeSerivce::Service::ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ChunkServer2Chunkserver_method_names[] = {
  "/Rpc.ChunkServer2Chunkserver/MultiWrite",
  "/Rpc.ChunkServer2Chunkserver/CopyChunkWrite",
};

std::unique_ptr< ChunkServer2Chunkserver::Stub> ChunkServer2Chunkserver::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChunkServer2Chunkserver::Stub> stub(new ChunkServer2Chunkserver::Stub(channel, options));
  return stub;
}

ChunkServer2Chunkserver::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MultiWrite_(ChunkServer2Chunkserver_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CopyChunkWrite_(ChunkServer2Chunkserver_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChunkServer2Chunkserver::Stub::MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::Rpc::MultiWriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MultiWrite_, context, request, response);
}

void ChunkServer2Chunkserver::Stub::async::MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MultiWrite_, context, request, response, std::move(f));
}

void ChunkServer2Chunkserver::Stub::async::MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MultiWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>* ChunkServer2Chunkserver::Stub::PrepareAsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::MultiWriteReply, ::Rpc::MultiWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MultiWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>* ChunkServer2Chunkserver::Stub::AsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMultiWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChunkServer2Chunkserver::Stub::CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::Rpc::CopyChunkWriteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CopyChunkWrite_, context, request, response);
}

void ChunkServer2Chunkserver::Stub::async::CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunkWrite_, context, request, response, std::move(f));
}

void ChunkServer2Chunkserver::Stub::async::CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyChunkWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>* ChunkServer2Chunkserver::Stub::PrepareAsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Rpc::CopyChunkWriteReply, ::Rpc::CopyChunkWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CopyChunkWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>* ChunkServer2Chunkserver::Stub::AsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyChunkWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChunkServer2Chunkserver::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServer2Chunkserver_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServer2Chunkserver::Service, ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServer2Chunkserver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::MultiWriteRequest* req,
             ::Rpc::MultiWriteReply* resp) {
               return service->MultiWrite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServer2Chunkserver_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServer2Chunkserver::Service, ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChunkServer2Chunkserver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Rpc::CopyChunkWriteRequest* req,
             ::Rpc::CopyChunkWriteReply* resp) {
               return service->CopyChunkWrite(ctx, req, resp);
             }, this)));
}

ChunkServer2Chunkserver::Service::~Service() {
}

::grpc::Status ChunkServer2Chunkserver::Service::MultiWrite(::grpc::ServerContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServer2Chunkserver::Service::CopyChunkWrite(::grpc::ServerContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Rpc

