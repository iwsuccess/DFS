// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: final.proto
#ifndef GRPC_final_2eproto__INCLUDED
#define GRPC_final_2eproto__INCLUDED

#include "final.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Rpc {

class Cli2Master final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.Cli2Master";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // client -> master rpcs
    // -------------------
    // FindAddr(): client send the filename, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::Rpc::FindAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    // for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::Rpc::GetWriteAddrReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    // Stat(): client send the filename, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::Rpc::StatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    virtual ::grpc::Status Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::Rpc::RenameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::Rpc::DeleteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::Rpc::MkdirReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::Rpc::GetSubDirNamesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>> AsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>>(AsyncGetSubDirNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>> PrepareAsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>>(PrepareAsyncGetSubDirNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::Rpc::RequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::Rpc::AppendEntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // client -> master rpcs
      // -------------------
      // FindAddr(): client send the filename, get the chunk_handles and the addr. 
      virtual void FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for client's API-Put() usage
      // master tells the client which chunkservers to write to 
      virtual void GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stat(): client send the filename, get the file existence, path and size information
      virtual void Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // for client's API-List() usage.
      virtual void GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>* AsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::GetSubDirNamesReply>* PrepareAsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::Rpc::FindAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>> AsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>>(AsyncFindAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>> PrepareAsyncFindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>>(PrepareAsyncFindAddrRaw(context, request, cq));
    }
    ::grpc::Status GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::Rpc::GetWriteAddrReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>> AsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>>(AsyncGetWriteAddrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>> PrepareAsyncGetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>>(PrepareAsyncGetWriteAddrRaw(context, request, cq));
    }
    ::grpc::Status Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::Rpc::StatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>> AsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>>(AsyncStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>> PrepareAsyncStat(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>>(PrepareAsyncStatRaw(context, request, cq));
    }
    ::grpc::Status Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::Rpc::RenameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>> AsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>> PrepareAsyncRename(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::Rpc::DeleteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>> AsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::Rpc::MkdirReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>> AsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>>(AsyncMkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>> PrepareAsyncMkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>>(PrepareAsyncMkdirRaw(context, request, cq));
    }
    ::grpc::Status GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::Rpc::GetSubDirNamesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>> AsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>>(AsyncGetSubDirNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>> PrepareAsyncGetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>>(PrepareAsyncGetSubDirNamesRaw(context, request, cq));
    }
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::Rpc::RequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::Rpc::AppendEntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, std::function<void(::grpc::Status)>) override;
      void FindAddr(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, std::function<void(::grpc::Status)>) override;
      void GetWriteAddr(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, std::function<void(::grpc::Status)>) override;
      void Stat(::grpc::ClientContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, std::function<void(::grpc::Status)>) override;
      void Rename(::grpc::ClientContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, std::function<void(::grpc::Status)>) override;
      void Mkdir(::grpc::ClientContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, std::function<void(::grpc::Status)>) override;
      void GetSubDirNames(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* AsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::FindAddrReply>* PrepareAsyncFindAddrRaw(::grpc::ClientContext* context, const ::Rpc::FindAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* AsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetWriteAddrReply>* PrepareAsyncGetWriteAddrRaw(::grpc::ClientContext* context, const ::Rpc::GetWriteAddrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* AsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::StatReply>* PrepareAsyncStatRaw(::grpc::ClientContext* context, const ::Rpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* AsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RenameReply>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::Rpc::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::DeleteReply>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::Rpc::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* AsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::MkdirReply>* PrepareAsyncMkdirRaw(::grpc::ClientContext* context, const ::Rpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* AsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::GetSubDirNamesReply>* PrepareAsyncGetSubDirNamesRaw(::grpc::ClientContext* context, const ::Rpc::GetSubDirNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::Rpc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::AppendEntriesReply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::Rpc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWriteAddr_;
    const ::grpc::internal::RpcMethod rpcmethod_Stat_;
    const ::grpc::internal::RpcMethod rpcmethod_Rename_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubDirNames_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // client -> master rpcs
    // -------------------
    // FindAddr(): client send the filename, get the chunk_handles and the addr. 
    virtual ::grpc::Status FindAddr(::grpc::ServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response);
    // for client's API-Put() usage
    // master tells the client which chunkservers to write to 
    virtual ::grpc::Status GetWriteAddr(::grpc::ServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response);
    // Stat(): client send the filename, get the file existence, path and size information
    virtual ::grpc::Status Stat(::grpc::ServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response);
    virtual ::grpc::Status Rename(::grpc::ServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response);
    virtual ::grpc::Status Mkdir(::grpc::ServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response);
    // for client's API-List() usage.
    virtual ::grpc::Status GetSubDirNames(::grpc::ServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response);
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response);
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAddr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAddr(::grpc::ServerContext* context, ::Rpc::FindAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::FindAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteAddr(::grpc::ServerContext* context, ::Rpc::GetWriteAddrRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::GetWriteAddrReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::Rpc::StatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::StatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rename() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::Rpc::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::RenameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::Rpc::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::DeleteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mkdir() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::Rpc::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::MkdirReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubDirNames(::grpc::ServerContext* context, ::Rpc::GetSubDirNamesRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::GetSubDirNamesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::Rpc::RequestVoteArgs* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::RequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::Rpc::AppendEntriesArgs* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::AppendEntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindAddr<WithAsyncMethod_GetWriteAddr<WithAsyncMethod_Stat<WithAsyncMethod_Rename<WithAsyncMethod_Delete<WithAsyncMethod_Mkdir<WithAsyncMethod_GetSubDirNames<WithAsyncMethod_RequestVote<WithAsyncMethod_AppendEntries<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAddr() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::FindAddrRequest* request, ::Rpc::FindAddrReply* response) { return this->FindAddr(context, request, response); }));}
    void SetMessageAllocatorFor_FindAddr(
        ::grpc::MessageAllocator< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::GetWriteAddrRequest* request, ::Rpc::GetWriteAddrReply* response) { return this->GetWriteAddr(context, request, response); }));}
    void SetMessageAllocatorFor_GetWriteAddr(
        ::grpc::MessageAllocator< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWriteAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::StatRequest, ::Rpc::StatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::StatRequest* request, ::Rpc::StatReply* response) { return this->Stat(context, request, response); }));}
    void SetMessageAllocatorFor_Stat(
        ::grpc::MessageAllocator< ::Rpc::StatRequest, ::Rpc::StatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::StatRequest, ::Rpc::StatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::RenameRequest, ::Rpc::RenameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::RenameRequest* request, ::Rpc::RenameReply* response) { return this->Rename(context, request, response); }));}
    void SetMessageAllocatorFor_Rename(
        ::grpc::MessageAllocator< ::Rpc::RenameRequest, ::Rpc::RenameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::RenameRequest, ::Rpc::RenameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::DeleteRequest, ::Rpc::DeleteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::DeleteRequest* request, ::Rpc::DeleteReply* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::Rpc::DeleteRequest, ::Rpc::DeleteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::DeleteRequest, ::Rpc::DeleteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Mkdir() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::MkdirRequest, ::Rpc::MkdirReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::MkdirRequest* request, ::Rpc::MkdirReply* response) { return this->Mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_Mkdir(
        ::grpc::MessageAllocator< ::Rpc::MkdirRequest, ::Rpc::MkdirReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::MkdirRequest, ::Rpc::MkdirReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::GetSubDirNamesRequest* request, ::Rpc::GetSubDirNamesReply* response) { return this->GetSubDirNames(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubDirNames(
        ::grpc::MessageAllocator< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubDirNames(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::RequestVoteArgs* request, ::Rpc::RequestVoteReply* response) { return this->RequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVote(
        ::grpc::MessageAllocator< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::AppendEntriesArgs* request, ::Rpc::AppendEntriesReply* response) { return this->AppendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEntries(
        ::grpc::MessageAllocator< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_FindAddr<WithCallbackMethod_GetWriteAddr<WithCallbackMethod_Stat<WithCallbackMethod_Rename<WithCallbackMethod_Delete<WithCallbackMethod_Mkdir<WithCallbackMethod_GetSubDirNames<WithCallbackMethod_RequestVote<WithCallbackMethod_AppendEntries<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAddr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rename() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mkdir() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAddr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteAddr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rename() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mkdir() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubDirNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAddr() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWriteAddr(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWriteAddr(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rename(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Mkdir() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubDirNames(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubDirNames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAddr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::FindAddrRequest, ::Rpc::FindAddrReply>* streamer) {
                       return this->StreamedFindAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAddr(::grpc::ServerContext* /*context*/, const ::Rpc::FindAddrRequest* /*request*/, ::Rpc::FindAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::FindAddrRequest,::Rpc::FindAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWriteAddr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWriteAddr() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::GetWriteAddrRequest, ::Rpc::GetWriteAddrReply>* streamer) {
                       return this->StreamedGetWriteAddr(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWriteAddr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWriteAddr(::grpc::ServerContext* /*context*/, const ::Rpc::GetWriteAddrRequest* /*request*/, ::Rpc::GetWriteAddrReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWriteAddr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::GetWriteAddrRequest,::Rpc::GetWriteAddrReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::StatRequest, ::Rpc::StatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::StatRequest, ::Rpc::StatReply>* streamer) {
                       return this->StreamedStat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stat(::grpc::ServerContext* /*context*/, const ::Rpc::StatRequest* /*request*/, ::Rpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::StatRequest,::Rpc::StatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rename() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::RenameRequest, ::Rpc::RenameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::RenameRequest, ::Rpc::RenameReply>* streamer) {
                       return this->StreamedRename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::Rpc::RenameRequest* /*request*/, ::Rpc::RenameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::RenameRequest,::Rpc::RenameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::DeleteRequest, ::Rpc::DeleteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::DeleteRequest, ::Rpc::DeleteReply>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::Rpc::DeleteRequest* /*request*/, ::Rpc::DeleteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::DeleteRequest,::Rpc::DeleteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mkdir() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::MkdirRequest, ::Rpc::MkdirReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::MkdirRequest, ::Rpc::MkdirReply>* streamer) {
                       return this->StreamedMkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mkdir(::grpc::ServerContext* /*context*/, const ::Rpc::MkdirRequest* /*request*/, ::Rpc::MkdirReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::MkdirRequest,::Rpc::MkdirReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubDirNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubDirNames() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::GetSubDirNamesRequest, ::Rpc::GetSubDirNamesReply>* streamer) {
                       return this->StreamedGetSubDirNames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubDirNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubDirNames(::grpc::ServerContext* /*context*/, const ::Rpc::GetSubDirNamesRequest* /*request*/, ::Rpc::GetSubDirNamesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubDirNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::GetSubDirNamesRequest,::Rpc::GetSubDirNamesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::RequestVoteArgs, ::Rpc::RequestVoteReply>* streamer) {
                       return this->StreamedRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::Rpc::RequestVoteArgs* /*request*/, ::Rpc::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::RequestVoteArgs,::Rpc::RequestVoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::AppendEntriesArgs, ::Rpc::AppendEntriesReply>* streamer) {
                       return this->StreamedAppendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::Rpc::AppendEntriesArgs* /*request*/, ::Rpc::AppendEntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::AppendEntriesArgs,::Rpc::AppendEntriesReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirNames<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindAddr<WithStreamedUnaryMethod_GetWriteAddr<WithStreamedUnaryMethod_Stat<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Mkdir<WithStreamedUnaryMethod_GetSubDirNames<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<Service > > > > > > > > > StreamedService;
};

class Cli2ChunkServer final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.Cli2ChunkServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::Rpc::ReadChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::Rpc::WriteChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::Rpc::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ReadChunk(): client send the read request, get the file data.
      virtual void ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::Rpc::ReadChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>> AsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>>(AsyncReadChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>> PrepareAsyncReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>>(PrepareAsyncReadChunkRaw(context, request, cq));
    }
    ::grpc::Status WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::Rpc::WriteChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>> AsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>>(AsyncWriteChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>> PrepareAsyncWriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>>(PrepareAsyncWriteChunkRaw(context, request, cq));
    }
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::Rpc::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, std::function<void(::grpc::Status)>) override;
      void ReadChunk(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, std::function<void(::grpc::Status)>) override;
      void WriteChunk(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* AsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReadChunkReply>* PrepareAsyncReadChunkRaw(::grpc::ClientContext* context, const ::Rpc::ReadChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* AsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::WriteChunkReply>* PrepareAsyncWriteChunkRaw(::grpc::ClientContext* context, const ::Rpc::WriteChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::Rpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReadChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ReadChunk(): client send the read request, get the file data.
    virtual ::grpc::Status ReadChunk(::grpc::ServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response);
    virtual ::grpc::Status WriteChunk(::grpc::ServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response);
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadChunk() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadChunk(::grpc::ServerContext* context, ::Rpc::ReadChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::ReadChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteChunk(::grpc::ServerContext* context, ::Rpc::WriteChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::WriteChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::Rpc::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReadChunk<WithAsyncMethod_WriteChunk<WithAsyncMethod_SayHello<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadChunk() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::ReadChunkRequest* request, ::Rpc::ReadChunkReply* response) { return this->ReadChunk(context, request, response); }));}
    void SetMessageAllocatorFor_ReadChunk(
        ::grpc::MessageAllocator< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::WriteChunkRequest* request, ::Rpc::WriteChunkReply* response) { return this->WriteChunk(context, request, response); }));}
    void SetMessageAllocatorFor_WriteChunk(
        ::grpc::MessageAllocator< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::HelloRequest, ::Rpc::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::HelloRequest* request, ::Rpc::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::Rpc::HelloRequest, ::Rpc::HelloReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::HelloRequest, ::Rpc::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReadChunk<WithCallbackMethod_WriteChunk<WithCallbackMethod_SayHello<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadChunk() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadChunk() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadChunk() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadChunk() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::ReadChunkRequest, ::Rpc::ReadChunkReply>* streamer) {
                       return this->StreamedReadChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadChunk(::grpc::ServerContext* /*context*/, const ::Rpc::ReadChunkRequest* /*request*/, ::Rpc::ReadChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::ReadChunkRequest,::Rpc::ReadChunkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::WriteChunkRequest, ::Rpc::WriteChunkReply>* streamer) {
                       return this->StreamedWriteChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteChunk(::grpc::ServerContext* /*context*/, const ::Rpc::WriteChunkRequest* /*request*/, ::Rpc::WriteChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::WriteChunkRequest,::Rpc::WriteChunkReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::HelloRequest, ::Rpc::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::HelloRequest, ::Rpc::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::Rpc::HelloRequest* /*request*/, ::Rpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::HelloRequest,::Rpc::HelloReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<WithStreamedUnaryMethod_SayHello<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReadChunk<WithStreamedUnaryMethod_WriteChunk<WithStreamedUnaryMethod_SayHello<Service > > > StreamedService;
};
// client -> chunk_server rpcs
// --------------------------

class DataNodeControlerService final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.DataNodeControlerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // to check if the datanode is alive
      virtual void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send request to tell a datanode to copy chunk to another chunk
      virtual void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::Rpc::HeartbeatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> AsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(AsyncCheckHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>> PrepareAsyncCheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>>(PrepareAsyncCheckHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::Rpc::CopyChunkReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> AsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(AsyncCopyChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>> PrepareAsyncCopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>>(PrepareAsyncCopyChunkRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, std::function<void(::grpc::Status)>) override;
      void CheckHeartbeat(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, std::function<void(::grpc::Status)>) override;
      void CopyChunk(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* AsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::HeartbeatReply>* PrepareAsyncCheckHeartbeatRaw(::grpc::ClientContext* context, const ::Rpc::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* AsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkReply>* PrepareAsyncCopyChunkRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_CopyChunk_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // to check if the datanode is alive
    virtual ::grpc::Status CheckHeartbeat(::grpc::ServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response);
    // send request to tell a datanode to copy chunk to another chunk
    virtual ::grpc::Status CopyChunk(::grpc::ServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHeartbeat(::grpc::ServerContext* context, ::Rpc::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::HeartbeatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CopyChunk() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunk(::grpc::ServerContext* context, ::Rpc::CopyChunkRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::CopyChunkReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckHeartbeat<WithAsyncMethod_CopyChunk<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::HeartbeatRequest* request, ::Rpc::HeartbeatReply* response) { return this->CheckHeartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHeartbeat(
        ::grpc::MessageAllocator< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CopyChunk() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::CopyChunkRequest* request, ::Rpc::CopyChunkReply* response) { return this->CopyChunk(context, request, response); }));}
    void SetMessageAllocatorFor_CopyChunk(
        ::grpc::MessageAllocator< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CheckHeartbeat<WithCallbackMethod_CopyChunk<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CopyChunk() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CopyChunk() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHeartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CopyChunk() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CopyChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::HeartbeatRequest, ::Rpc::HeartbeatReply>* streamer) {
                       return this->StreamedCheckHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHeartbeat(::grpc::ServerContext* /*context*/, const ::Rpc::HeartbeatRequest* /*request*/, ::Rpc::HeartbeatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::HeartbeatRequest,::Rpc::HeartbeatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CopyChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CopyChunk() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::CopyChunkRequest, ::Rpc::CopyChunkReply>* streamer) {
                       return this->StreamedCopyChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CopyChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CopyChunk(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkRequest* /*request*/, ::Rpc::CopyChunkReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopyChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::CopyChunkRequest,::Rpc::CopyChunkReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckHeartbeat<WithStreamedUnaryMethod_CopyChunk<Service > > StreamedService;
};

class ReportDataNodeSerivce final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.ReportDataNodeSerivce";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // each datanode reriodically reports the chunks it has
      // namenode replies with the identity of all chunk 
      virtual void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::Rpc::ReportDataNodeReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> AsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(AsyncReportDataNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>> PrepareAsyncReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>>(PrepareAsyncReportDataNodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, std::function<void(::grpc::Status)>) override;
      void ReportDataNode(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* AsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::ReportDataNodeReply>* PrepareAsyncReportDataNodeRaw(::grpc::ClientContext* context, const ::Rpc::ReportDataNodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReportDataNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // each datanode reriodically reports the chunks it has
    // namenode replies with the identity of all chunk 
    virtual ::grpc::Status ReportDataNode(::grpc::ServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDataNode(::grpc::ServerContext* context, ::Rpc::ReportDataNodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::ReportDataNodeReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReportDataNode<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::ReportDataNodeRequest* request, ::Rpc::ReportDataNodeReply* response) { return this->ReportDataNode(context, request, response); }));}
    void SetMessageAllocatorFor_ReportDataNode(
        ::grpc::MessageAllocator< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDataNode(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReportDataNode<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportDataNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportDataNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportDataNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportDataNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportDataNode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::ReportDataNodeRequest, ::Rpc::ReportDataNodeReply>* streamer) {
                       return this->StreamedReportDataNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportDataNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportDataNode(::grpc::ServerContext* /*context*/, const ::Rpc::ReportDataNodeRequest* /*request*/, ::Rpc::ReportDataNodeReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportDataNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::ReportDataNodeRequest,::Rpc::ReportDataNodeReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReportDataNode<Service > StreamedService;
};

class ChunkServer2Chunkserver final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc.ChunkServer2Chunkserver";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Chunkserver -> Chunkserver RPCs
    // SerializedWrite from primary to replica ChunkServers
    virtual ::grpc::Status MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::Rpc::MultiWriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>> AsyncMultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>>(AsyncMultiWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>> PrepareAsyncMultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>>(PrepareAsyncMultiWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::Rpc::CopyChunkWriteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>> AsyncCopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>>(AsyncCopyChunkWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>> PrepareAsyncCopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>>(PrepareAsyncCopyChunkWriteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Chunkserver -> Chunkserver RPCs
      // SerializedWrite from primary to replica ChunkServers
      virtual void MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>* AsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::MultiWriteReply>* PrepareAsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>* AsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Rpc::CopyChunkWriteReply>* PrepareAsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::Rpc::MultiWriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>> AsyncMultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>>(AsyncMultiWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>> PrepareAsyncMultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>>(PrepareAsyncMultiWriteRaw(context, request, cq));
    }
    ::grpc::Status CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::Rpc::CopyChunkWriteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>> AsyncCopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>>(AsyncCopyChunkWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>> PrepareAsyncCopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>>(PrepareAsyncCopyChunkWriteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, std::function<void(::grpc::Status)>) override;
      void MultiWrite(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, std::function<void(::grpc::Status)>) override;
      void CopyChunkWrite(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>* AsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::MultiWriteReply>* PrepareAsyncMultiWriteRaw(::grpc::ClientContext* context, const ::Rpc::MultiWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>* AsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Rpc::CopyChunkWriteReply>* PrepareAsyncCopyChunkWriteRaw(::grpc::ClientContext* context, const ::Rpc::CopyChunkWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_MultiWrite_;
    const ::grpc::internal::RpcMethod rpcmethod_CopyChunkWrite_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Chunkserver -> Chunkserver RPCs
    // SerializedWrite from primary to replica ChunkServers
    virtual ::grpc::Status MultiWrite(::grpc::ServerContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response);
    virtual ::grpc::Status CopyChunkWrite(::grpc::ServerContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MultiWrite() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiWrite(::grpc::ServerContext* context, ::Rpc::MultiWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::MultiWriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunkWrite(::grpc::ServerContext* context, ::Rpc::CopyChunkWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Rpc::CopyChunkWriteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MultiWrite<WithAsyncMethod_CopyChunkWrite<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MultiWrite() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::MultiWriteRequest* request, ::Rpc::MultiWriteReply* response) { return this->MultiWrite(context, request, response); }));}
    void SetMessageAllocatorFor_MultiWrite(
        ::grpc::MessageAllocator< ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MultiWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Rpc::CopyChunkWriteRequest* request, ::Rpc::CopyChunkWriteReply* response) { return this->CopyChunkWrite(context, request, response); }));}
    void SetMessageAllocatorFor_CopyChunkWrite(
        ::grpc::MessageAllocator< ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunkWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_MultiWrite<WithCallbackMethod_CopyChunkWrite<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MultiWrite() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MultiWrite() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCopyChunkWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MultiWrite() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MultiWrite(context, request, response); }));
    }
    ~WithRawCallbackMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MultiWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CopyChunkWrite(context, request, response); }));
    }
    ~WithRawCallbackMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CopyChunkWrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MultiWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MultiWrite() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::MultiWriteRequest, ::Rpc::MultiWriteReply>* streamer) {
                       return this->StreamedMultiWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MultiWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiWrite(::grpc::ServerContext* /*context*/, const ::Rpc::MultiWriteRequest* /*request*/, ::Rpc::MultiWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::MultiWriteRequest,::Rpc::MultiWriteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CopyChunkWrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CopyChunkWrite() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Rpc::CopyChunkWriteRequest, ::Rpc::CopyChunkWriteReply>* streamer) {
                       return this->StreamedCopyChunkWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CopyChunkWrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CopyChunkWrite(::grpc::ServerContext* /*context*/, const ::Rpc::CopyChunkWriteRequest* /*request*/, ::Rpc::CopyChunkWriteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCopyChunkWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Rpc::CopyChunkWriteRequest,::Rpc::CopyChunkWriteReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MultiWrite<WithStreamedUnaryMethod_CopyChunkWrite<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MultiWrite<WithStreamedUnaryMethod_CopyChunkWrite<Service > > StreamedService;
};

}  // namespace Rpc


#endif  // GRPC_final_2eproto__INCLUDED
